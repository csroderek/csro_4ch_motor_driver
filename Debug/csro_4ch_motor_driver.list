
csro_4ch_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005440  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a0  080056a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080056a0  080056a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056a0  080056a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002428  20000074  0800571c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000249c  0800571c  0002249c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a55  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378d  00000000  00000000  00039af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019966  00000000  00000000  0003f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001605e  00000000  00000000  0005927e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093bda  00000000  00000000  0006f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  00102f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005538 	.word	0x08005538

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005538 	.word	0x08005538

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b18      	ldr	r3, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 fd51 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 fd6a 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 fd49 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 fd62 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 fd41 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fd5a 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 fd39 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 fd52 	bl	8000c52 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80001c0:	4a10      	ldr	r2, [pc, #64]	; (8000204 <MX_FREERTOS_Init+0x48>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	4810      	ldr	r0, [pc, #64]	; (8000208 <MX_FREERTOS_Init+0x4c>)
 80001c6:	f002 fc17 	bl	80029f8 <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a0f      	ldr	r2, [pc, #60]	; (800020c <MX_FREERTOS_Init+0x50>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80001d0:	4a0f      	ldr	r2, [pc, #60]	; (8000210 <MX_FREERTOS_Init+0x54>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	480f      	ldr	r0, [pc, #60]	; (8000214 <MX_FREERTOS_Init+0x58>)
 80001d6:	f002 fc0f 	bl	80029f8 <osThreadNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <MX_FREERTOS_Init+0x5c>)
 80001de:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80001e0:	4a0e      	ldr	r2, [pc, #56]	; (800021c <MX_FREERTOS_Init+0x60>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	480e      	ldr	r0, [pc, #56]	; (8000220 <MX_FREERTOS_Init+0x64>)
 80001e6:	f002 fc07 	bl	80029f8 <osThreadNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <MX_FREERTOS_Init+0x68>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <MX_FREERTOS_Init+0x6c>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	480d      	ldr	r0, [pc, #52]	; (800022c <MX_FREERTOS_Init+0x70>)
 80001f6:	f002 fbff 	bl	80029f8 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <MX_FREERTOS_Init+0x74>)
 80001fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}
 8000204:	08005598 	.word	0x08005598
 8000208:	08000235 	.word	0x08000235
 800020c:	20002264 	.word	0x20002264
 8000210:	080055bc 	.word	0x080055bc
 8000214:	08000245 	.word	0x08000245
 8000218:	2000225c 	.word	0x2000225c
 800021c:	080055e0 	.word	0x080055e0
 8000220:	08000255 	.word	0x08000255
 8000224:	20002268 	.word	0x20002268
 8000228:	08005604 	.word	0x08005604
 800022c:	08000265 	.word	0x08000265
 8000230:	20002260 	.word	0x20002260

08000234 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f002 fc85 	bl	8002b4c <osDelay>
 8000242:	e7fb      	b.n	800023c <StartTask01+0x8>

08000244 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f002 fc7d 	bl	8002b4c <osDelay>
 8000252:	e7fb      	b.n	800024c <StartTask02+0x8>

08000254 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f002 fc75 	bl	8002b4c <osDelay>
 8000262:	e7fb      	b.n	800025c <StartTask03+0x8>

08000264 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800026c:	2001      	movs	r0, #1
 800026e:	f002 fc6d 	bl	8002b4c <osDelay>
 8000272:	e7fb      	b.n	800026c <StartTask04+0x8>

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	; 0x28
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000288:	4b59      	ldr	r3, [pc, #356]	; (80003f0 <MX_GPIO_Init+0x17c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <MX_GPIO_Init+0x17c>)
 800028e:	f043 0310 	orr.w	r3, r3, #16
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b56      	ldr	r3, [pc, #344]	; (80003f0 <MX_GPIO_Init+0x17c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a0:	4b53      	ldr	r3, [pc, #332]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a52      	ldr	r2, [pc, #328]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b50      	ldr	r3, [pc, #320]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0320 	and.w	r3, r3, #32
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b4d      	ldr	r3, [pc, #308]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a4c      	ldr	r2, [pc, #304]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b4a      	ldr	r3, [pc, #296]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b47      	ldr	r3, [pc, #284]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <MX_GPIO_Init+0x17c>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80002ee:	4841      	ldr	r0, [pc, #260]	; (80003f4 <MX_GPIO_Init+0x180>)
 80002f0:	f001 f852 	bl	8001398 <HAL_GPIO_WritePin>
                          |RLY_05_Pin|RS485_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 80002f4:	2200      	movs	r2, #0
 80002f6:	f244 4107 	movw	r1, #17415	; 0x4407
 80002fa:	483f      	ldr	r0, [pc, #252]	; (80003f8 <MX_GPIO_Init+0x184>)
 80002fc:	f001 f84c 	bl	8001398 <HAL_GPIO_WritePin>
                          |LED_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_02_Pin|BTN_01_Pin|KEY_04_Pin;
 8000300:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000306:	2300      	movs	r3, #0
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4619      	mov	r1, r3
 8000314:	4839      	ldr	r0, [pc, #228]	; (80003fc <MX_GPIO_Init+0x188>)
 8000316:	f000 febb 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = KEY_03_Pin|KEY_02_Pin;
 800031a:	2303      	movs	r3, #3
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4834      	ldr	r0, [pc, #208]	; (8000400 <MX_GPIO_Init+0x18c>)
 800032e:	f000 feaf 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_01_Pin|BTN_12_Pin|BTN_11_Pin|BTN_10_Pin;
 8000332:	f649 0301 	movw	r3, #38913	; 0x9801
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	482b      	ldr	r0, [pc, #172]	; (80003f4 <MX_GPIO_Init+0x180>)
 8000348:	f000 fea2 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 800034c:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8000350:	617b      	str	r3, [r7, #20]
                          |RLY_05_Pin|RS485_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	4619      	mov	r1, r3
 8000364:	4823      	ldr	r0, [pc, #140]	; (80003f4 <MX_GPIO_Init+0x180>)
 8000366:	f000 fe93 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 800036a:	f244 4307 	movw	r3, #17415	; 0x4407
 800036e:	617b      	str	r3, [r7, #20]
                          |LED_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	481d      	ldr	r0, [pc, #116]	; (80003f8 <MX_GPIO_Init+0x184>)
 8000384:	f000 fe84 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SIG_Pin;
 8000388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <MX_GPIO_Init+0x190>)
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_SIG_GPIO_Port, &GPIO_InitStruct);
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	4619      	mov	r1, r3
 800039c:	4816      	ldr	r0, [pc, #88]	; (80003f8 <MX_GPIO_Init+0x184>)
 800039e:	f000 fe77 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_09_Pin|BTN_08_Pin|BTN_07_Pin|BTN_06_Pin
 80003a2:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80003a6:	617b      	str	r3, [r7, #20]
                          |BTN_05_Pin|BTN_04_Pin|BTN_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	4619      	mov	r1, r3
 80003b6:	4810      	ldr	r0, [pc, #64]	; (80003f8 <MX_GPIO_Init+0x184>)
 80003b8:	f000 fe6a 	bl	8001090 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_GPIO_Init+0x194>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24
 80003c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
 80003ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <MX_GPIO_Init+0x194>)
 80003d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d6:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2105      	movs	r1, #5
 80003dc:	2028      	movs	r0, #40	; 0x28
 80003de:	f000 fc1c 	bl	8000c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003e2:	2028      	movs	r0, #40	; 0x28
 80003e4:	f000 fc35 	bl	8000c52 <HAL_NVIC_EnableIRQ>

}
 80003e8:	bf00      	nop
 80003ea:	3728      	adds	r7, #40	; 0x28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010800 	.word	0x40010800
 80003f8:	40010c00 	.word	0x40010c00
 80003fc:	40011000 	.word	0x40011000
 8000400:	40011400 	.word	0x40011400
 8000404:	10110000 	.word	0x10110000
 8000408:	40010000 	.word	0x40010000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 fb1c 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f80f 	bl	8000436 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f7ff ff2c 	bl	8000274 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800041c:	f000 f95e 	bl	80006dc <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000420:	f7ff fe96 	bl	8000150 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000424:	f000 f984 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000428:	f002 fa80 	bl	800292c <osKernelInitialize>
  MX_FREERTOS_Init();
 800042c:	f7ff fec6 	bl	80001bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000430:	f002 faae 	bl	8002990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000434:	e7fe      	b.n	8000434 <main+0x28>

08000436 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b090      	sub	sp, #64	; 0x40
 800043a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	2228      	movs	r2, #40	; 0x28
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f004 ffad 	bl	80053a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000458:	2302      	movs	r3, #2
 800045a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000460:	2310      	movs	r3, #16
 8000462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000468:	2300      	movs	r3, #0
 800046a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800046c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0318 	add.w	r3, r7, #24
 8000476:	4618      	mov	r0, r3
 8000478:	f000 ffc8 	bl	800140c <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000482:	f000 f82b 	bl	80004dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	230f      	movs	r3, #15
 8000488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	2302      	movs	r3, #2
 800048c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2102      	movs	r1, #2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fa33 	bl	800190c <HAL_RCC_ClockConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004ac:	f000 f816 	bl	80004dc <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	3740      	adds	r7, #64	; 0x40
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ca:	f000 fad5 	bl	8000a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40000800 	.word	0x40000800

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_MspInit+0x68>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <HAL_MspInit+0x68>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_MspInit+0x68>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_MspInit+0x68>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_MspInit+0x68>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x68>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	210f      	movs	r1, #15
 8000522:	f06f 0001 	mvn.w	r0, #1
 8000526:	f000 fb78 	bl	8000c1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_MspInit+0x6c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_MspInit+0x6c>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	201e      	movs	r0, #30
 800056e:	f000 fb54 	bl	8000c1a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000572:	201e      	movs	r0, #30
 8000574:	f000 fb6d 	bl	8000c52 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <HAL_InitTick+0xa0>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <HAL_InitTick+0xa0>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	61d3      	str	r3, [r2, #28]
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <HAL_InitTick+0xa0>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000590:	f107 0210 	add.w	r2, r7, #16
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fb32 	bl	8001c04 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005a0:	f001 fb08 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 80005a4:	4603      	mov	r3, r0
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <HAL_InitTick+0xa4>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	0c9b      	lsrs	r3, r3, #18
 80005b4:	3b01      	subs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_InitTick+0xa8>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <HAL_InitTick+0xac>)
 80005bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_InitTick+0xa8>)
 80005c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_InitTick+0xa8>)
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_InitTick+0xa8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_InitTick+0xa8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <HAL_InitTick+0xa8>)
 80005da:	f001 fb61 	bl	8001ca0 <HAL_TIM_Base_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d104      	bne.n	80005ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <HAL_InitTick+0xa8>)
 80005e6:	f001 fbb3 	bl	8001d50 <HAL_TIM_Base_Start_IT>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3730      	adds	r7, #48	; 0x30
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	431bde83 	.word	0x431bde83
 8000600:	2000226c 	.word	0x2000226c
 8000604:	40000800 	.word	0x40000800

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <MemManage_Handler+0x4>

0800061a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <UsageFault_Handler+0x4>

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <DMA1_Channel4_IRQHandler+0x10>)
 800063a:	f000 fc23 	bl	8000e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200022f8 	.word	0x200022f8

08000648 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <DMA1_Channel5_IRQHandler+0x10>)
 800064e:	f000 fc19 	bl	8000e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000233c 	.word	0x2000233c

0800065c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <DMA1_Channel6_IRQHandler+0x10>)
 8000662:	f000 fc0f 	bl	8000e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200022b4 	.word	0x200022b4

08000670 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <DMA1_Channel7_IRQHandler+0x10>)
 8000676:	f000 fc05 	bl	8000e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20002380 	.word	0x20002380

08000684 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <TIM4_IRQHandler+0x10>)
 800068a:	f001 fbb3 	bl	8001df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000226c 	.word	0x2000226c

08000698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <USART1_IRQHandler+0x10>)
 800069e:	f001 fd97 	bl	80021d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200023c4 	.word	0x200023c4

080006ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <USART2_IRQHandler+0x10>)
 80006b2:	f001 fd8d 	bl	80021d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20002408 	.word	0x20002408

080006c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SIG_Pin);
 80006c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006c8:	f000 fe7e 	bl	80013c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART1_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000714:	f001 fd0e 	bl	8002134 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f7ff fedd 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200023c4 	.word	0x200023c4
 800072c:	40013800 	.word	0x40013800

08000730 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f001 fce4 	bl	8002134 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f7ff feb3 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20002408 	.word	0x20002408
 8000780:	40004400 	.word	0x40004400

08000784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0318 	add.w	r3, r7, #24
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a8c      	ldr	r2, [pc, #560]	; (80009d0 <HAL_UART_MspInit+0x24c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f040 8087 	bne.w	80008b4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a6:	4b8b      	ldr	r3, [pc, #556]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a8a      	ldr	r2, [pc, #552]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b88      	ldr	r3, [pc, #544]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b85      	ldr	r3, [pc, #532]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a84      	ldr	r2, [pc, #528]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b82      	ldr	r3, [pc, #520]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX1_Pin;
 80007d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4619      	mov	r1, r3
 80007ea:	487b      	ldr	r0, [pc, #492]	; (80009d8 <HAL_UART_MspInit+0x254>)
 80007ec:	f000 fc50 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX1_Pin;
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	4619      	mov	r1, r3
 8000804:	4874      	ldr	r0, [pc, #464]	; (80009d8 <HAL_UART_MspInit+0x254>)
 8000806:	f000 fc43 	bl	8001090 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800080a:	4b74      	ldr	r3, [pc, #464]	; (80009dc <HAL_UART_MspInit+0x258>)
 800080c:	4a74      	ldr	r2, [pc, #464]	; (80009e0 <HAL_UART_MspInit+0x25c>)
 800080e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000810:	4b72      	ldr	r3, [pc, #456]	; (80009dc <HAL_UART_MspInit+0x258>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000816:	4b71      	ldr	r3, [pc, #452]	; (80009dc <HAL_UART_MspInit+0x258>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800081c:	4b6f      	ldr	r3, [pc, #444]	; (80009dc <HAL_UART_MspInit+0x258>)
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000822:	4b6e      	ldr	r3, [pc, #440]	; (80009dc <HAL_UART_MspInit+0x258>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000828:	4b6c      	ldr	r3, [pc, #432]	; (80009dc <HAL_UART_MspInit+0x258>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800082e:	4b6b      	ldr	r3, [pc, #428]	; (80009dc <HAL_UART_MspInit+0x258>)
 8000830:	2220      	movs	r2, #32
 8000832:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000834:	4b69      	ldr	r3, [pc, #420]	; (80009dc <HAL_UART_MspInit+0x258>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800083a:	4868      	ldr	r0, [pc, #416]	; (80009dc <HAL_UART_MspInit+0x258>)
 800083c:	f000 fa18 	bl	8000c70 <HAL_DMA_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000846:	f7ff fe49 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a63      	ldr	r2, [pc, #396]	; (80009dc <HAL_UART_MspInit+0x258>)
 800084e:	639a      	str	r2, [r3, #56]	; 0x38
 8000850:	4a62      	ldr	r2, [pc, #392]	; (80009dc <HAL_UART_MspInit+0x258>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000856:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <HAL_UART_MspInit+0x260>)
 8000858:	4a63      	ldr	r2, [pc, #396]	; (80009e8 <HAL_UART_MspInit+0x264>)
 800085a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085c:	4b61      	ldr	r3, [pc, #388]	; (80009e4 <HAL_UART_MspInit+0x260>)
 800085e:	2210      	movs	r2, #16
 8000860:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <HAL_UART_MspInit+0x260>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <HAL_UART_MspInit+0x260>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800086e:	4b5d      	ldr	r3, [pc, #372]	; (80009e4 <HAL_UART_MspInit+0x260>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000874:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <HAL_UART_MspInit+0x260>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800087a:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <HAL_UART_MspInit+0x260>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000880:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <HAL_UART_MspInit+0x260>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000886:	4857      	ldr	r0, [pc, #348]	; (80009e4 <HAL_UART_MspInit+0x260>)
 8000888:	f000 f9f2 	bl	8000c70 <HAL_DMA_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000892:	f7ff fe23 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a52      	ldr	r2, [pc, #328]	; (80009e4 <HAL_UART_MspInit+0x260>)
 800089a:	635a      	str	r2, [r3, #52]	; 0x34
 800089c:	4a51      	ldr	r2, [pc, #324]	; (80009e4 <HAL_UART_MspInit+0x260>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2025      	movs	r0, #37	; 0x25
 80008a8:	f000 f9b7 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ac:	2025      	movs	r0, #37	; 0x25
 80008ae:	f000 f9d0 	bl	8000c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008b2:	e089      	b.n	80009c8 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <HAL_UART_MspInit+0x268>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f040 8084 	bne.w	80009c8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c0:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80008c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ca:	61d3      	str	r3, [r2, #28]
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a3d      	ldr	r2, [pc, #244]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <HAL_UART_MspInit+0x250>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX2_Pin;
 80008f0:	2304      	movs	r3, #4
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX2_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4619      	mov	r1, r3
 8000902:	4835      	ldr	r0, [pc, #212]	; (80009d8 <HAL_UART_MspInit+0x254>)
 8000904:	f000 fbc4 	bl	8001090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX2_Pin;
 8000908:	2308      	movs	r3, #8
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX2_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	4619      	mov	r1, r3
 800091a:	482f      	ldr	r0, [pc, #188]	; (80009d8 <HAL_UART_MspInit+0x254>)
 800091c:	f000 fbb8 	bl	8001090 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000922:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <HAL_UART_MspInit+0x270>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000946:	2220      	movs	r2, #32
 8000948:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000950:	4827      	ldr	r0, [pc, #156]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000952:	f000 f98d 	bl	8000c70 <HAL_DMA_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 800095c:	f7ff fdbe 	bl	80004dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a23      	ldr	r2, [pc, #140]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000964:	639a      	str	r2, [r3, #56]	; 0x38
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <HAL_UART_MspInit+0x26c>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <HAL_UART_MspInit+0x274>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <HAL_UART_MspInit+0x278>)
 8000970:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <HAL_UART_MspInit+0x274>)
 8000974:	2210      	movs	r2, #16
 8000976:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_UART_MspInit+0x274>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <HAL_UART_MspInit+0x274>)
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0x274>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_UART_MspInit+0x274>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0x274>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0x274>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800099c:	4816      	ldr	r0, [pc, #88]	; (80009f8 <HAL_UART_MspInit+0x274>)
 800099e:	f000 f967 	bl	8000c70 <HAL_DMA_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0x228>
      Error_Handler();
 80009a8:	f7ff fd98 	bl	80004dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_UART_MspInit+0x274>)
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x274>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2105      	movs	r1, #5
 80009bc:	2026      	movs	r0, #38	; 0x26
 80009be:	f000 f92c 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	2026      	movs	r0, #38	; 0x26
 80009c4:	f000 f945 	bl	8000c52 <HAL_NVIC_EnableIRQ>
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40013800 	.word	0x40013800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010800 	.word	0x40010800
 80009dc:	2000233c 	.word	0x2000233c
 80009e0:	40020058 	.word	0x40020058
 80009e4:	200022f8 	.word	0x200022f8
 80009e8:	40020044 	.word	0x40020044
 80009ec:	40004400 	.word	0x40004400
 80009f0:	200022b4 	.word	0x200022b4
 80009f4:	4002006c 	.word	0x4002006c
 80009f8:	20002380 	.word	0x20002380
 80009fc:	40020080 	.word	0x40020080

08000a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a26:	f7ff fe53 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f004 fc87 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fced 	bl	800040c <main>
  bx lr
 8000a32:	4770      	bx	lr
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a3c:	080056a8 	.word	0x080056a8
  ldr r2, =_sbss
 8000a40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a44:	2000249c 	.word	0x2000249c

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f8d1 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f7ff fd78 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fd3e 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000008 	.word	0x20000008
 8000a98:	2000244c 	.word	0x2000244c

08000a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	2000244c 	.word	0x2000244c

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4906      	ldr	r1, [pc, #24]	; (8000b48 <__NVIC_EnableIRQ+0x34>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff4f 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff64 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ffb2 	bl	8000ba0 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff81 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff57 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e043      	b.n	8000d0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <HAL_DMA_Init+0xa8>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_DMA_Init+0xac>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	009a      	lsls	r2, r3, #2
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_DMA_Init+0xb0>)
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	bffdfff8 	.word	0xbffdfff8
 8000d1c:	cccccccd 	.word	0xcccccccd
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d008      	beq.n	8000d4c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e020      	b.n	8000d8e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 020e 	bic.w	r2, r2, #14
 8000d5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0201 	bic.w	r2, r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d005      	beq.n	8000dba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2204      	movs	r2, #4
 8000db2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e051      	b.n	8000e5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 020e 	bic.w	r2, r2, #14
 8000dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0201 	bic.w	r2, r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_DMA_Abort_IT+0xd0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d029      	beq.n	8000e38 <HAL_DMA_Abort_IT+0xa0>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_DMA_Abort_IT+0xd4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d022      	beq.n	8000e34 <HAL_DMA_Abort_IT+0x9c>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_DMA_Abort_IT+0xd8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d01a      	beq.n	8000e2e <HAL_DMA_Abort_IT+0x96>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_DMA_Abort_IT+0xdc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d012      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x90>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <HAL_DMA_Abort_IT+0xe0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00a      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x8a>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_DMA_Abort_IT+0xe4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d102      	bne.n	8000e1c <HAL_DMA_Abort_IT+0x84>
 8000e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e1a:	e00e      	b.n	8000e3a <HAL_DMA_Abort_IT+0xa2>
 8000e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e20:	e00b      	b.n	8000e3a <HAL_DMA_Abort_IT+0xa2>
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e26:	e008      	b.n	8000e3a <HAL_DMA_Abort_IT+0xa2>
 8000e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2c:	e005      	b.n	8000e3a <HAL_DMA_Abort_IT+0xa2>
 8000e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e32:	e002      	b.n	8000e3a <HAL_DMA_Abort_IT+0xa2>
 8000e34:	2310      	movs	r3, #16
 8000e36:	e000      	b.n	8000e3a <HAL_DMA_Abort_IT+0xa2>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_DMA_Abort_IT+0xe8>)
 8000e3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
    } 
  }
  return status;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40020008 	.word	0x40020008
 8000e6c:	4002001c 	.word	0x4002001c
 8000e70:	40020030 	.word	0x40020030
 8000e74:	40020044 	.word	0x40020044
 8000e78:	40020058 	.word	0x40020058
 8000e7c:	4002006c 	.word	0x4002006c
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d04f      	beq.n	8000f4c <HAL_DMA_IRQHandler+0xc8>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d04a      	beq.n	8000f4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0204 	bic.w	r2, r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a66      	ldr	r2, [pc, #408]	; (8001074 <HAL_DMA_IRQHandler+0x1f0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d029      	beq.n	8000f32 <HAL_DMA_IRQHandler+0xae>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a65      	ldr	r2, [pc, #404]	; (8001078 <HAL_DMA_IRQHandler+0x1f4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d022      	beq.n	8000f2e <HAL_DMA_IRQHandler+0xaa>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a63      	ldr	r2, [pc, #396]	; (800107c <HAL_DMA_IRQHandler+0x1f8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01a      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xa4>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a62      	ldr	r2, [pc, #392]	; (8001080 <HAL_DMA_IRQHandler+0x1fc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d012      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x9e>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a60      	ldr	r2, [pc, #384]	; (8001084 <HAL_DMA_IRQHandler+0x200>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00a      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x98>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	; (8001088 <HAL_DMA_IRQHandler+0x204>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d102      	bne.n	8000f16 <HAL_DMA_IRQHandler+0x92>
 8000f10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f14:	e00e      	b.n	8000f34 <HAL_DMA_IRQHandler+0xb0>
 8000f16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1a:	e00b      	b.n	8000f34 <HAL_DMA_IRQHandler+0xb0>
 8000f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f20:	e008      	b.n	8000f34 <HAL_DMA_IRQHandler+0xb0>
 8000f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f26:	e005      	b.n	8000f34 <HAL_DMA_IRQHandler+0xb0>
 8000f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2c:	e002      	b.n	8000f34 <HAL_DMA_IRQHandler+0xb0>
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	e000      	b.n	8000f34 <HAL_DMA_IRQHandler+0xb0>
 8000f32:	2304      	movs	r3, #4
 8000f34:	4a55      	ldr	r2, [pc, #340]	; (800108c <HAL_DMA_IRQHandler+0x208>)
 8000f36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 8094 	beq.w	800106a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f4a:	e08e      	b.n	800106a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	2202      	movs	r2, #2
 8000f52:	409a      	lsls	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d056      	beq.n	800100a <HAL_DMA_IRQHandler+0x186>
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d051      	beq.n	800100a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 020a 	bic.w	r2, r2, #10
 8000f82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a38      	ldr	r2, [pc, #224]	; (8001074 <HAL_DMA_IRQHandler+0x1f0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d029      	beq.n	8000fea <HAL_DMA_IRQHandler+0x166>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a37      	ldr	r2, [pc, #220]	; (8001078 <HAL_DMA_IRQHandler+0x1f4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d022      	beq.n	8000fe6 <HAL_DMA_IRQHandler+0x162>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a35      	ldr	r2, [pc, #212]	; (800107c <HAL_DMA_IRQHandler+0x1f8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01a      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0x15c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a34      	ldr	r2, [pc, #208]	; (8001080 <HAL_DMA_IRQHandler+0x1fc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d012      	beq.n	8000fda <HAL_DMA_IRQHandler+0x156>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a32      	ldr	r2, [pc, #200]	; (8001084 <HAL_DMA_IRQHandler+0x200>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00a      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x150>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a31      	ldr	r2, [pc, #196]	; (8001088 <HAL_DMA_IRQHandler+0x204>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d102      	bne.n	8000fce <HAL_DMA_IRQHandler+0x14a>
 8000fc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fcc:	e00e      	b.n	8000fec <HAL_DMA_IRQHandler+0x168>
 8000fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd2:	e00b      	b.n	8000fec <HAL_DMA_IRQHandler+0x168>
 8000fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd8:	e008      	b.n	8000fec <HAL_DMA_IRQHandler+0x168>
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	e005      	b.n	8000fec <HAL_DMA_IRQHandler+0x168>
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	e002      	b.n	8000fec <HAL_DMA_IRQHandler+0x168>
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	e000      	b.n	8000fec <HAL_DMA_IRQHandler+0x168>
 8000fea:	2302      	movs	r3, #2
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <HAL_DMA_IRQHandler+0x208>)
 8000fee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d034      	beq.n	800106a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001008:	e02f      	b.n	800106a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2208      	movs	r2, #8
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d028      	beq.n	800106c <HAL_DMA_IRQHandler+0x1e8>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d023      	beq.n	800106c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 020e 	bic.w	r2, r2, #14
 8001032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4798      	blx	r3
    }
  }
  return;
 800106a:	bf00      	nop
 800106c:	bf00      	nop
}
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020008 	.word	0x40020008
 8001078:	4002001c 	.word	0x4002001c
 800107c:	40020030 	.word	0x40020030
 8001080:	40020044 	.word	0x40020044
 8001084:	40020058 	.word	0x40020058
 8001088:	4002006c 	.word	0x4002006c
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e169      	b.n	8001378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a4:	2201      	movs	r2, #1
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8158 	bne.w	8001372 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4a9a      	ldr	r2, [pc, #616]	; (8001330 <HAL_GPIO_Init+0x2a0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d05e      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010cc:	4a98      	ldr	r2, [pc, #608]	; (8001330 <HAL_GPIO_Init+0x2a0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d875      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010d2:	4a98      	ldr	r2, [pc, #608]	; (8001334 <HAL_GPIO_Init+0x2a4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d058      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010d8:	4a96      	ldr	r2, [pc, #600]	; (8001334 <HAL_GPIO_Init+0x2a4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d86f      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010de:	4a96      	ldr	r2, [pc, #600]	; (8001338 <HAL_GPIO_Init+0x2a8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d052      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010e4:	4a94      	ldr	r2, [pc, #592]	; (8001338 <HAL_GPIO_Init+0x2a8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d869      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010ea:	4a94      	ldr	r2, [pc, #592]	; (800133c <HAL_GPIO_Init+0x2ac>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d04c      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010f0:	4a92      	ldr	r2, [pc, #584]	; (800133c <HAL_GPIO_Init+0x2ac>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d863      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 80010f6:	4a92      	ldr	r2, [pc, #584]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d046      	beq.n	800118a <HAL_GPIO_Init+0xfa>
 80010fc:	4a90      	ldr	r2, [pc, #576]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d85d      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 8001102:	2b12      	cmp	r3, #18
 8001104:	d82a      	bhi.n	800115c <HAL_GPIO_Init+0xcc>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d859      	bhi.n	80011be <HAL_GPIO_Init+0x12e>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <HAL_GPIO_Init+0x80>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	0800118b 	.word	0x0800118b
 8001114:	08001165 	.word	0x08001165
 8001118:	08001177 	.word	0x08001177
 800111c:	080011b9 	.word	0x080011b9
 8001120:	080011bf 	.word	0x080011bf
 8001124:	080011bf 	.word	0x080011bf
 8001128:	080011bf 	.word	0x080011bf
 800112c:	080011bf 	.word	0x080011bf
 8001130:	080011bf 	.word	0x080011bf
 8001134:	080011bf 	.word	0x080011bf
 8001138:	080011bf 	.word	0x080011bf
 800113c:	080011bf 	.word	0x080011bf
 8001140:	080011bf 	.word	0x080011bf
 8001144:	080011bf 	.word	0x080011bf
 8001148:	080011bf 	.word	0x080011bf
 800114c:	080011bf 	.word	0x080011bf
 8001150:	080011bf 	.word	0x080011bf
 8001154:	0800116d 	.word	0x0800116d
 8001158:	08001181 	.word	0x08001181
 800115c:	4a79      	ldr	r2, [pc, #484]	; (8001344 <HAL_GPIO_Init+0x2b4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001162:	e02c      	b.n	80011be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e029      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	3304      	adds	r3, #4
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e024      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	3308      	adds	r3, #8
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e01f      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	330c      	adds	r3, #12
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e01a      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001192:	2304      	movs	r3, #4
 8001194:	623b      	str	r3, [r7, #32]
          break;
 8001196:	e013      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a0:	2308      	movs	r3, #8
 80011a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	611a      	str	r2, [r3, #16]
          break;
 80011aa:	e009      	b.n	80011c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ac:	2308      	movs	r3, #8
 80011ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	615a      	str	r2, [r3, #20]
          break;
 80011b6:	e003      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x130>
          break;
 80011be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d801      	bhi.n	80011ca <HAL_GPIO_Init+0x13a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e001      	b.n	80011ce <HAL_GPIO_Init+0x13e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3304      	adds	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2bff      	cmp	r3, #255	; 0xff
 80011d4:	d802      	bhi.n	80011dc <HAL_GPIO_Init+0x14c>
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x152>
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	3b08      	subs	r3, #8
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	210f      	movs	r1, #15
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	401a      	ands	r2, r3
 80011f4:	6a39      	ldr	r1, [r7, #32]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80b1 	beq.w	8001372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001210:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001228:	4a48      	ldr	r2, [pc, #288]	; (800134c <HAL_GPIO_Init+0x2bc>)
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a40      	ldr	r2, [pc, #256]	; (8001350 <HAL_GPIO_Init+0x2c0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x1ec>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <HAL_GPIO_Init+0x2c4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1e8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a3e      	ldr	r2, [pc, #248]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1e4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3d      	ldr	r2, [pc, #244]	; (800135c <HAL_GPIO_Init+0x2cc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1e0>
 800126c:	2303      	movs	r3, #3
 800126e:	e006      	b.n	800127e <HAL_GPIO_Init+0x1ee>
 8001270:	2304      	movs	r3, #4
 8001272:	e004      	b.n	800127e <HAL_GPIO_Init+0x1ee>
 8001274:	2302      	movs	r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x1ee>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_GPIO_Init+0x1ee>
 800127c:	2300      	movs	r3, #0
 800127e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001280:	f002 0203 	and.w	r2, r2, #3
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4093      	lsls	r3, r2
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800128e:	492f      	ldr	r1, [pc, #188]	; (800134c <HAL_GPIO_Init+0x2bc>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	492c      	ldr	r1, [pc, #176]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	43db      	mvns	r3, r3
 80012be:	4928      	ldr	r1, [pc, #160]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4922      	ldr	r1, [pc, #136]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	491e      	ldr	r1, [pc, #120]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	4918      	ldr	r1, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	608b      	str	r3, [r1, #8]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	4914      	ldr	r1, [pc, #80]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001310:	4013      	ands	r3, r2
 8001312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d021      	beq.n	8001364 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	490e      	ldr	r1, [pc, #56]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
 800132c:	e021      	b.n	8001372 <HAL_GPIO_Init+0x2e2>
 800132e:	bf00      	nop
 8001330:	10320000 	.word	0x10320000
 8001334:	10310000 	.word	0x10310000
 8001338:	10220000 	.word	0x10220000
 800133c:	10210000 	.word	0x10210000
 8001340:	10120000 	.word	0x10120000
 8001344:	10110000 	.word	0x10110000
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40011000 	.word	0x40011000
 800135c:	40011400 	.word	0x40011400
 8001360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_GPIO_Init+0x304>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	43db      	mvns	r3, r3
 800136c:	4909      	ldr	r1, [pc, #36]	; (8001394 <HAL_GPIO_Init+0x304>)
 800136e:	4013      	ands	r3, r2
 8001370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	3301      	adds	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	f47f ae8e 	bne.w	80010a4 <HAL_GPIO_Init+0x14>
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	372c      	adds	r7, #44	; 0x2c
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f806 	bl	80013f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e26c      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8087 	beq.w	800153a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800142c:	4b92      	ldr	r3, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b04      	cmp	r3, #4
 8001436:	d00c      	beq.n	8001452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001438:	4b8f      	ldr	r3, [pc, #572]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d112      	bne.n	800146a <HAL_RCC_OscConfig+0x5e>
 8001444:	4b8c      	ldr	r3, [pc, #560]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d10b      	bne.n	800146a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001452:	4b89      	ldr	r3, [pc, #548]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d06c      	beq.n	8001538 <HAL_RCC_OscConfig+0x12c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d168      	bne.n	8001538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e246      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x76>
 8001474:	4b80      	ldr	r3, [pc, #512]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a7f      	ldr	r2, [pc, #508]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e02e      	b.n	80014e0 <HAL_RCC_OscConfig+0xd4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x98>
 800148a:	4b7b      	ldr	r3, [pc, #492]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a7a      	ldr	r2, [pc, #488]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b78      	ldr	r3, [pc, #480]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a77      	ldr	r2, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e01d      	b.n	80014e0 <HAL_RCC_OscConfig+0xd4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0xbc>
 80014ae:	4b72      	ldr	r3, [pc, #456]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a71      	ldr	r2, [pc, #452]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6e      	ldr	r2, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xd4>
 80014c8:	4b6b      	ldr	r3, [pc, #428]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a6a      	ldr	r2, [pc, #424]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a67      	ldr	r2, [pc, #412]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fad8 	bl	8000a9c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fad4 	bl	8000a9c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1fa      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0xe4>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fac4 	bl	8000a9c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fac0 	bl	8000a9c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1e6      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x10c>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d063      	beq.n	800160e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001546:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d11c      	bne.n	8001598 <HAL_RCC_OscConfig+0x18c>
 800155e:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x176>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1ba      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4939      	ldr	r1, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e03a      	b.n	800160e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_RCC_OscConfig+0x270>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fa79 	bl	8000a9c <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fa75 	bl	8000a9c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e19b      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4927      	ldr	r1, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x270>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa58 	bl	8000a9c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fa54 	bl	8000a9c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e17a      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d03a      	beq.n	8001690 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d019      	beq.n	8001656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_RCC_OscConfig+0x274>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fa38 	bl	8000a9c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fa34 	bl	8000a9c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e15a      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_RCC_OscConfig+0x26c>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800164e:	2001      	movs	r0, #1
 8001650:	f000 fb08 	bl	8001c64 <RCC_Delay>
 8001654:	e01c      	b.n	8001690 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_RCC_OscConfig+0x274>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa1e 	bl	8000a9c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001662:	e00f      	b.n	8001684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fa1a 	bl	8000a9c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d908      	bls.n	8001684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e140      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	42420000 	.word	0x42420000
 8001680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001684:	4b9e      	ldr	r3, [pc, #632]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e9      	bne.n	8001664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80a6 	beq.w	80017ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b97      	ldr	r3, [pc, #604]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10d      	bne.n	80016ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a93      	ldr	r2, [pc, #588]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b91      	ldr	r3, [pc, #580]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b8e      	ldr	r3, [pc, #568]	; (8001904 <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b8b      	ldr	r3, [pc, #556]	; (8001904 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a8a      	ldr	r2, [pc, #552]	; (8001904 <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f9db 	bl	8000a9c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff f9d7 	bl	8000a9c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b64      	cmp	r3, #100	; 0x64
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0fd      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x312>
 8001710:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e02d      	b.n	800177a <HAL_RCC_OscConfig+0x36e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x334>
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a75      	ldr	r2, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	4b73      	ldr	r3, [pc, #460]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a72      	ldr	r2, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	f023 0304 	bic.w	r3, r3, #4
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	e01c      	b.n	800177a <HAL_RCC_OscConfig+0x36e>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b05      	cmp	r3, #5
 8001746:	d10c      	bne.n	8001762 <HAL_RCC_OscConfig+0x356>
 8001748:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a6c      	ldr	r2, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a69      	ldr	r2, [pc, #420]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	e00b      	b.n	800177a <HAL_RCC_OscConfig+0x36e>
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a66      	ldr	r2, [pc, #408]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	4b64      	ldr	r3, [pc, #400]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a63      	ldr	r2, [pc, #396]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	f023 0304 	bic.w	r3, r3, #4
 8001778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d015      	beq.n	80017ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff f98b 	bl	8000a9c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff f987 	bl	8000a9c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0ab      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0ee      	beq.n	800178a <HAL_RCC_OscConfig+0x37e>
 80017ac:	e014      	b.n	80017d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f975 	bl	8000a9c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff f971 	bl	8000a9c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e095      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ee      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d105      	bne.n	80017ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017de:	4b48      	ldr	r3, [pc, #288]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a47      	ldr	r2, [pc, #284]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8081 	beq.w	80018f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f4:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d061      	beq.n	80018c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d146      	bne.n	8001896 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_OscConfig+0x4fc>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff f945 	bl	8000a9c <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff f941 	bl	8000a9c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e067      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	492d      	ldr	r1, [pc, #180]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a19      	ldr	r1, [r3, #32]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	430b      	orrs	r3, r1
 8001862:	4927      	ldr	r1, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_RCC_OscConfig+0x4fc>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff f915 	bl	8000a9c <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff f911 	bl	8000a9c <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e037      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x46a>
 8001894:	e02f      	b.n	80018f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_RCC_OscConfig+0x4fc>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff f8fe 	bl	8000a9c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff f8fa 	bl	8000a9c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e020      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x498>
 80018c2:	e018      	b.n	80018f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e013      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	42420060 	.word	0x42420060

0800190c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0d0      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d910      	bls.n	8001950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 0207 	bic.w	r2, r3, #7
 8001936:	4965      	ldr	r1, [pc, #404]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b8      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001968:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800196e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800198a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	494d      	ldr	r1, [pc, #308]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d040      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07f      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e073      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06b      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4936      	ldr	r1, [pc, #216]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f84e 	bl	8000a9c <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f84a 	bl	8000a9c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e053      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d210      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4922      	ldr	r1, [pc, #136]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e032      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4916      	ldr	r1, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a9a:	f000 f821 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	490a      	ldr	r1, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1d0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd4c 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	08005628 	.word	0x08005628
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	b490      	push	{r4, r7}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ae8:	1d3c      	adds	r4, r7, #4
 8001aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001af0:	f240 2301 	movw	r3, #513	; 0x201
 8001af4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0x46>
 8001b1e:	e02d      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	623b      	str	r3, [r7, #32]
      break;
 8001b24:	e02d      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	0c9b      	lsrs	r3, r3, #18
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b32:	4413      	add	r3, r2
 8001b34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c5b      	lsrs	r3, r3, #17
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b52:	4413      	add	r3, r2
 8001b54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5e:	fb02 f203 	mul.w	r2, r2, r3
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6a:	e004      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	623b      	str	r3, [r7, #32]
      break;
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7e:	623b      	str	r3, [r7, #32]
      break;
 8001b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b82:	6a3b      	ldr	r3, [r7, #32]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3728      	adds	r7, #40	; 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc90      	pop	{r4, r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	08005570 	.word	0x08005570
 8001b94:	40021000 	.word	0x40021000
 8001b98:	007a1200 	.word	0x007a1200
 8001b9c:	003d0900 	.word	0x003d0900

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bb8:	f7ff fff2 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4903      	ldr	r1, [pc, #12]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08005638 	.word	0x08005638

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0adb      	lsrs	r3, r3, #11
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08005638 	.word	0x08005638

08001c04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	220f      	movs	r2, #15
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_RCC_GetClockConfig+0x58>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_RCC_GetClockConfig+0x58>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_GetClockConfig+0x58>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_GetClockConfig+0x58>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0207 	and.w	r2, r3, #7
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40022000 	.word	0x40022000

08001c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <RCC_Delay+0x34>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <RCC_Delay+0x38>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0a5b      	lsrs	r3, r3, #9
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c80:	bf00      	nop
  }
  while (Delay --);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	60fa      	str	r2, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f9      	bne.n	8001c80 <RCC_Delay+0x1c>
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	10624dd3 	.word	0x10624dd3

08001ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e041      	b.n	8001d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f839 	bl	8001d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f000 f9b4 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d001      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e03a      	b.n	8001dde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <HAL_TIM_Base_Start_IT+0x98>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00e      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x58>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d92:	d009      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x58>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_TIM_Base_Start_IT+0x9c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x58>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d111      	bne.n	8001dcc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d010      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dca:	e007      	b.n	8001ddc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800

08001df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0202 	mvn.w	r2, #2
 8001e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8ed 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8e0 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8ef 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0204 	mvn.w	r2, #4
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8c3 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8b6 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8c5 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0208 	mvn.w	r2, #8
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f899 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f88c 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f89b 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b10      	cmp	r3, #16
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0210 	mvn.w	r2, #16
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2208      	movs	r2, #8
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f86f 	bl	8002016 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f862 	bl	8002004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f871 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0201 	mvn.w	r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe faa0 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	2b80      	cmp	r3, #128	; 0x80
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8bf 	bl	8002122 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b40      	cmp	r3, #64	; 0x40
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f835 	bl	800203a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d10e      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d107      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0220 	mvn.w	r2, #32
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f88a 	bl	8002110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a29      	ldr	r2, [pc, #164]	; (8002104 <TIM_Base_SetConfig+0xb8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x30>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x30>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a26      	ldr	r2, [pc, #152]	; (8002108 <TIM_Base_SetConfig+0xbc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x30>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <TIM_Base_SetConfig+0xc0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <TIM_Base_SetConfig+0xb8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <TIM_Base_SetConfig+0xbc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0x62>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <TIM_Base_SetConfig+0xc0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <TIM_Base_SetConfig+0xb8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d103      	bne.n	80020f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	615a      	str	r2, [r3, #20]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40000400 	.word	0x40000400
 800210c:	40000800 	.word	0x40000800

08002110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e03f      	b.n	80021c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fb12 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fb49 	bl	8002810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800218c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800219c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_UART_IRQHandler+0x52>
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa4f 	bl	80026be <UART_Receive_IT>
      return;
 8002220:	e17b      	b.n	800251a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80b1 	beq.w	800238c <HAL_UART_IRQHandler+0x1bc>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_UART_IRQHandler+0x70>
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a6 	beq.w	800238c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_UART_IRQHandler+0x90>
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_UART_IRQHandler+0xb0>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f043 0202 	orr.w	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_UART_IRQHandler+0xd0>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0204 	orr.w	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00f      	beq.n	80022ca <HAL_UART_IRQHandler+0xfa>
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_UART_IRQHandler+0xee>
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0208 	orr.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 811e 	beq.w	8002510 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_UART_IRQHandler+0x11e>
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f9e8 	bl	80026be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_UART_IRQHandler+0x146>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d031      	beq.n	800237a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f92a 	bl	8002570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d023      	beq.n	8002372 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002338:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	2b00      	cmp	r3, #0
 8002340:	d013      	beq.n	800236a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4a76      	ldr	r2, [pc, #472]	; (8002520 <HAL_UART_IRQHandler+0x350>)
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fd22 	bl	8000d98 <HAL_DMA_Abort_IT>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002364:	4610      	mov	r0, r2
 8002366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002368:	e00e      	b.n	8002388 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8ec 	bl	8002548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002370:	e00a      	b.n	8002388 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8e8 	bl	8002548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	e006      	b.n	8002388 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8e4 	bl	8002548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002386:	e0c3      	b.n	8002510 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002388:	bf00      	nop
    return;
 800238a:	e0c1      	b.n	8002510 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 80a1 	bne.w	80024d8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 809b 	beq.w	80024d8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8095 	beq.w	80024d8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d04e      	beq.n	8002470 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80023dc:	8a3b      	ldrh	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8098 	beq.w	8002514 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023e8:	8a3a      	ldrh	r2, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	f080 8092 	bcs.w	8002514 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8a3a      	ldrh	r2, [r7, #16]
 80023f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d02b      	beq.n	8002458 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc66 	bl	8000d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002460:	b29b      	uxth	r3, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f876 	bl	800255a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800246e:	e051      	b.n	8002514 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002478:	b29b      	uxth	r3, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d047      	beq.n	8002518 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002488:	8a7b      	ldrh	r3, [r7, #18]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800249c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0210 	bic.w	r2, r2, #16
 80024ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024cc:	8a7b      	ldrh	r3, [r7, #18]
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f842 	bl	800255a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80024d6:	e01f      	b.n	8002518 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_UART_IRQHandler+0x324>
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f87f 	bl	80025f0 <UART_Transmit_IT>
    return;
 80024f2:	e012      	b.n	800251a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <HAL_UART_IRQHandler+0x34a>
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8c0 	bl	800268e <UART_EndTransmit_IT>
    return;
 800250e:	e004      	b.n	800251a <HAL_UART_IRQHandler+0x34a>
    return;
 8002510:	bf00      	nop
 8002512:	e002      	b.n	800251a <HAL_UART_IRQHandler+0x34a>
      return;
 8002514:	bf00      	nop
 8002516:	e000      	b.n	800251a <HAL_UART_IRQHandler+0x34a>
      return;
 8002518:	bf00      	nop
  }
}
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	080025c9 	.word	0x080025c9

08002524 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002586:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff ffb0 	bl	8002548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b21      	cmp	r3, #33	; 0x21
 8002602:	d13e      	bne.n	8002682 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	d114      	bne.n	8002638 <UART_Transmit_IT+0x48>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d110      	bne.n	8002638 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	1c9a      	adds	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]
 8002636:	e008      	b.n	800264a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	1c59      	adds	r1, r3, #1
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6211      	str	r1, [r2, #32]
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4619      	mov	r1, r3
 8002658:	84d1      	strh	r1, [r2, #38]	; 0x26
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff38 	bl	8002524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b22      	cmp	r3, #34	; 0x22
 80026d0:	f040 8099 	bne.w	8002806 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d117      	bne.n	800270e <UART_Receive_IT+0x50>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d113      	bne.n	800270e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
 800270c:	e026      	b.n	800275c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d007      	beq.n	8002732 <UART_Receive_IT+0x74>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <UART_Receive_IT+0x82>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e008      	b.n	8002752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274c:	b2da      	uxtb	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4619      	mov	r1, r3
 800276a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800276c:	2b00      	cmp	r3, #0
 800276e:	d148      	bne.n	8002802 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0220 	bic.w	r2, r2, #32
 800277e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800278e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d123      	bne.n	80027f8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0210 	bic.w	r2, r2, #16
 80027c4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d10a      	bne.n	80027ea <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff feb2 	bl	800255a <HAL_UARTEx_RxEventCallback>
 80027f6:	e002      	b.n	80027fe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fe9c 	bl	8002536 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e002      	b.n	8002808 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800284a:	f023 030c 	bic.w	r3, r3, #12
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <UART_SetConfig+0x114>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002878:	f7ff f9b0 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	e002      	b.n	8002886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002880:	f7ff f998 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <UART_SetConfig+0x118>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	0119      	lsls	r1, r3, #4
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <UART_SetConfig+0x118>)
 80028be:	fba3 0302 	umull	r0, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	3332      	adds	r3, #50	; 0x32
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <UART_SetConfig+0x118>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	4419      	add	r1, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <UART_SetConfig+0x118>)
 80028f6:	fba3 0302 	umull	r0, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2064      	movs	r0, #100	; 0x64
 80028fe:	fb00 f303 	mul.w	r3, r0, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	3332      	adds	r3, #50	; 0x32
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <UART_SetConfig+0x118>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	440a      	add	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40013800 	.word	0x40013800
 8002928:	51eb851f 	.word	0x51eb851f

0800292c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002932:	f3ef 8305 	mrs	r3, IPSR
 8002936:	60bb      	str	r3, [r7, #8]
  return(result);
 8002938:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293e:	f3ef 8310 	mrs	r3, PRIMASK
 8002942:	607b      	str	r3, [r7, #4]
  return(result);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <osKernelInitialize+0x32>
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <osKernelInitialize+0x60>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d109      	bne.n	8002966 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002952:	f3ef 8311 	mrs	r3, BASEPRI
 8002956:	603b      	str	r3, [r7, #0]
  return(result);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800295e:	f06f 0305 	mvn.w	r3, #5
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e00c      	b.n	8002980 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <osKernelInitialize+0x60>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <osKernelInitialize+0x60>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e002      	b.n	8002980 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	20000090 	.word	0x20000090

08002990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002996:	f3ef 8305 	mrs	r3, IPSR
 800299a:	60bb      	str	r3, [r7, #8]
  return(result);
 800299c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a2:	f3ef 8310 	mrs	r3, PRIMASK
 80029a6:	607b      	str	r3, [r7, #4]
  return(result);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <osKernelStart+0x32>
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <osKernelStart+0x64>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d109      	bne.n	80029ca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029b6:	f3ef 8311 	mrs	r3, BASEPRI
 80029ba:	603b      	str	r3, [r7, #0]
  return(result);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <osKernelStart+0x3a>
    stat = osErrorISR;
 80029c2:	f06f 0305 	mvn.w	r3, #5
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e00e      	b.n	80029e8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <osKernelStart+0x64>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <osKernelStart+0x64>)
 80029d4:	2202      	movs	r2, #2
 80029d6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80029d8:	f001 f890 	bl	8003afc <vTaskStartScheduler>
      stat = osOK;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e002      	b.n	80029e8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029e8:	68fb      	ldr	r3, [r7, #12]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000090 	.word	0x20000090

080029f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b092      	sub	sp, #72	; 0x48
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a08:	f3ef 8305 	mrs	r3, IPSR
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 8094 	bne.w	8002b3e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a16:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1a:	623b      	str	r3, [r7, #32]
  return(result);
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 808d 	bne.w	8002b3e <osThreadNew+0x146>
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <osThreadNew+0x150>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d106      	bne.n	8002a3a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a30:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 8082 	bne.w	8002b3e <osThreadNew+0x146>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d07e      	beq.n	8002b3e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a44:	2318      	movs	r3, #24
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a48:	2300      	movs	r3, #0
 8002a4a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a4c:	f107 031b 	add.w	r3, r7, #27
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d045      	beq.n	8002aea <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <osThreadNew+0x74>
        name = attr->name;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <osThreadNew+0x9a>
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	2b38      	cmp	r3, #56	; 0x38
 8002a84:	d805      	bhi.n	8002a92 <osThreadNew+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <osThreadNew+0x9e>
        return (NULL);
 8002a92:	2300      	movs	r3, #0
 8002a94:	e054      	b.n	8002b40 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <osThreadNew+0xd4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2bbb      	cmp	r3, #187	; 0xbb
 8002ab4:	d90a      	bls.n	8002acc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <osThreadNew+0xd4>
        mem = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aca:	e010      	b.n	8002aee <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <osThreadNew+0xf6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <osThreadNew+0xf6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <osThreadNew+0xf6>
          mem = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae8:	e001      	b.n	8002aee <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d110      	bne.n	8002b16 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002afc:	9202      	str	r2, [sp, #8]
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fe12 	bl	8003734 <xTaskCreateStatic>
 8002b10:	4603      	mov	r3, r0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e013      	b.n	8002b3e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fe5c 	bl	80037ec <xTaskCreate>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <osThreadNew+0x146>
          hTask = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b3e:	697b      	ldr	r3, [r7, #20]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3738      	adds	r7, #56	; 0x38
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000090 	.word	0x20000090

08002b4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b54:	f3ef 8305 	mrs	r3, IPSR
 8002b58:	613b      	str	r3, [r7, #16]
  return(result);
 8002b5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10f      	bne.n	8002b80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b60:	f3ef 8310 	mrs	r3, PRIMASK
 8002b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <osDelay+0x34>
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <osDelay+0x58>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d109      	bne.n	8002b88 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b74:	f3ef 8311 	mrs	r3, BASEPRI
 8002b78:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <osDelay+0x3c>
    stat = osErrorISR;
 8002b80:	f06f 0305 	mvn.w	r3, #5
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e007      	b.n	8002b98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 ff7e 	bl	8003a94 <vTaskDelay>
    }
  }

  return (stat);
 8002b98:	697b      	ldr	r3, [r7, #20]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000090 	.word	0x20000090

08002ba8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a06      	ldr	r2, [pc, #24]	; (8002bd0 <vApplicationGetIdleTaskMemory+0x28>)
 8002bb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000094 	.word	0x20000094
 8002bd4:	20000150 	.word	0x20000150

08002bd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <vApplicationGetTimerTaskMemory+0x2c>)
 8002be8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4a06      	ldr	r2, [pc, #24]	; (8002c08 <vApplicationGetTimerTaskMemory+0x30>)
 8002bee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf6:	601a      	str	r2, [r3, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000350 	.word	0x20000350
 8002c08:	2000040c 	.word	0x2000040c

08002c0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 0208 	add.w	r2, r3, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f103 0208 	add.w	r2, r3, #8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0208 	add.w	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d103      	bne.n	8002cc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e00c      	b.n	8002ce2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e002      	b.n	8002cd6 <vListInsert+0x2e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d2f6      	bcs.n	8002cd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6892      	ldr	r2, [r2, #8]
 8002d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6852      	ldr	r2, [r2, #4]
 8002d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d103      	bne.n	8002d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
	...

08002d6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d96:	f001 fff9 	bl	8004d8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	68f9      	ldr	r1, [r7, #12]
 8002da4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	68f9      	ldr	r1, [r7, #12]
 8002dca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	441a      	add	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	22ff      	movs	r2, #255	; 0xff
 8002dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	22ff      	movs	r2, #255	; 0xff
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d114      	bne.n	8002e16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01a      	beq.n	8002e2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3310      	adds	r3, #16
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f91b 	bl	8004034 <xTaskRemoveFromEventList>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <xQueueGenericReset+0xcc>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	e009      	b.n	8002e2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3310      	adds	r3, #16
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fef6 	bl	8002c0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fef1 	bl	8002c0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e2a:	f001 ffdf 	bl	8004dec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	e000ed04 	.word	0xe000ed04

08002e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08e      	sub	sp, #56	; 0x38
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e7e:	bf00      	nop
 8002e80:	e7fe      	b.n	8002e80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <xQueueGenericCreateStatic+0x52>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <xQueueGenericCreateStatic+0x56>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericCreateStatic+0x58>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	623b      	str	r3, [r7, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <xQueueGenericCreateStatic+0x7e>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <xQueueGenericCreateStatic+0x82>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <xQueueGenericCreateStatic+0x84>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	61fb      	str	r3, [r7, #28]
}
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002eda:	2350      	movs	r3, #80	; 0x50
 8002edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d00a      	beq.n	8002efa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	61bb      	str	r3, [r7, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f805 	bl	8002f2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f58:	2101      	movs	r1, #1
 8002f5a:	69b8      	ldr	r0, [r7, #24]
 8002f5c:	f7ff ff06 	bl	8002d6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueGenericSend+0x32>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d103      	bne.n	8002fb0 <xQueueGenericSend+0x40>
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <xQueueGenericSend+0x44>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <xQueueGenericSend+0x46>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <xQueueGenericSend+0x60>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSend+0x6e>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <xQueueGenericSend+0x72>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueGenericSend+0x74>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <xQueueGenericSend+0x8e>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	623b      	str	r3, [r7, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ffe:	f001 f9df 	bl	80043c0 <xTaskGetSchedulerState>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <xQueueGenericSend+0x9e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueGenericSend+0xa2>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueGenericSend+0xa4>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <xQueueGenericSend+0xbe>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61fb      	str	r3, [r7, #28]
}
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800302e:	f001 fead 	bl	8004d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <xQueueGenericSend+0xd4>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d129      	bne.n	8003098 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304a:	f000 fa07 	bl	800345c <prvCopyDataToQueue>
 800304e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	4618      	mov	r0, r3
 800305e:	f000 ffe9 	bl	8004034 <xTaskRemoveFromEventList>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003068:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <xQueueGenericSend+0x1f8>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	e00a      	b.n	8003090 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003080:	4b39      	ldr	r3, [pc, #228]	; (8003168 <xQueueGenericSend+0x1f8>)
 8003082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003090:	f001 feac 	bl	8004dec <vPortExitCritical>
				return pdPASS;
 8003094:	2301      	movs	r3, #1
 8003096:	e063      	b.n	8003160 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800309e:	f001 fea5 	bl	8004dec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e05c      	b.n	8003160 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 f823 	bl	80040fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030b6:	2301      	movs	r3, #1
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ba:	f001 fe97 	bl	8004dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030be:	f000 fd8d 	bl	8003bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030c2:	f001 fe63 	bl	8004d8c <vPortEnterCritical>
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d103      	bne.n	80030dc <xQueueGenericSend+0x16c>
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSend+0x182>
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f2:	f001 fe7b 	bl	8004dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f6:	1d3a      	adds	r2, r7, #4
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f001 f812 	bl	8004128 <xTaskCheckForTimeOut>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d124      	bne.n	8003154 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800310a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800310c:	f000 fa9e 	bl	800364c <prvIsQueueFull>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d018      	beq.n	8003148 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	3310      	adds	r3, #16
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f000 ff38 	bl	8003f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003126:	f000 fa29 	bl	800357c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800312a:	f000 fd65 	bl	8003bf8 <xTaskResumeAll>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f af7c 	bne.w	800302e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <xQueueGenericSend+0x1f8>)
 8003138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	e772      	b.n	800302e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800314a:	f000 fa17 	bl	800357c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800314e:	f000 fd53 	bl	8003bf8 <xTaskResumeAll>
 8003152:	e76c      	b.n	800302e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003156:	f000 fa11 	bl	800357c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800315a:	f000 fd4d 	bl	8003bf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800315e:	2300      	movs	r3, #0
		}
	}
}
 8003160:	4618      	mov	r0, r3
 8003162:	3738      	adds	r7, #56	; 0x38
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08e      	sub	sp, #56	; 0x38
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003196:	bf00      	nop
 8003198:	e7fe      	b.n	8003198 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <xQueueGenericSendFromISR+0x3c>
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <xQueueGenericSendFromISR+0x40>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <xQueueGenericSendFromISR+0x42>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10a      	bne.n	80031c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	623b      	str	r3, [r7, #32]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d103      	bne.n	80031d6 <xQueueGenericSendFromISR+0x6a>
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <xQueueGenericSendFromISR+0x6e>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <xQueueGenericSendFromISR+0x70>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61fb      	str	r3, [r7, #28]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031f6:	f001 fe8b 	bl	8004f10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031fa:	f3ef 8211 	mrs	r2, BASEPRI
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	61ba      	str	r2, [r7, #24]
 8003210:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003212:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <xQueueGenericSendFromISR+0xbc>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d12c      	bne.n	8003282 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003238:	f000 f910 	bl	800345c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800323c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d112      	bne.n	800326c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	3324      	adds	r3, #36	; 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f000 feee 	bl	8004034 <xTaskRemoveFromEventList>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e007      	b.n	800327c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800326c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003270:	3301      	adds	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	b25a      	sxtb	r2, r3
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800327c:	2301      	movs	r3, #1
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003280:	e001      	b.n	8003286 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003290:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003294:	4618      	mov	r0, r3
 8003296:	3738      	adds	r7, #56	; 0x38
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <xQueueReceive+0x30>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	623b      	str	r3, [r7, #32]
}
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <xQueueReceive+0x3e>
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <xQueueReceive+0x42>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueReceive+0x44>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <xQueueReceive+0x5e>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	61fb      	str	r3, [r7, #28]
}
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032fa:	f001 f861 	bl	80043c0 <xTaskGetSchedulerState>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <xQueueReceive+0x6e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <xQueueReceive+0x72>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <xQueueReceive+0x74>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueReceive+0x8e>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61bb      	str	r3, [r7, #24]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800332a:	f001 fd2f 	bl	8004d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01f      	beq.n	800337a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800333e:	f000 f8f7 	bl	8003530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00f      	beq.n	8003372 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	3310      	adds	r3, #16
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fe6c 	bl	8004034 <xTaskRemoveFromEventList>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <xQueueReceive+0x1bc>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003372:	f001 fd3b 	bl	8004dec <vPortExitCritical>
				return pdPASS;
 8003376:	2301      	movs	r3, #1
 8003378:	e069      	b.n	800344e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003380:	f001 fd34 	bl	8004dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003384:	2300      	movs	r3, #0
 8003386:	e062      	b.n	800344e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f000 feb2 	bl	80040fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800339c:	f001 fd26 	bl	8004dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033a0:	f000 fc1c 	bl	8003bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a4:	f001 fcf2 	bl	8004d8c <vPortEnterCritical>
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d103      	bne.n	80033be <xQueueReceive+0x122>
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d103      	bne.n	80033d4 <xQueueReceive+0x138>
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d4:	f001 fd0a 	bl	8004dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033d8:	1d3a      	adds	r2, r7, #4
 80033da:	f107 0310 	add.w	r3, r7, #16
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fea1 	bl	8004128 <xTaskCheckForTimeOut>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d123      	bne.n	8003434 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ee:	f000 f917 	bl	8003620 <prvIsQueueEmpty>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d017      	beq.n	8003428 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	3324      	adds	r3, #36	; 0x24
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fdc7 	bl	8003f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003408:	f000 f8b8 	bl	800357c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800340c:	f000 fbf4 	bl	8003bf8 <xTaskResumeAll>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d189      	bne.n	800332a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <xQueueReceive+0x1bc>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	e780      	b.n	800332a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342a:	f000 f8a7 	bl	800357c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800342e:	f000 fbe3 	bl	8003bf8 <xTaskResumeAll>
 8003432:	e77a      	b.n	800332a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003436:	f000 f8a1 	bl	800357c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800343a:	f000 fbdd 	bl	8003bf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800343e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003440:	f000 f8ee 	bl	8003620 <prvIsQueueEmpty>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f43f af6f 	beq.w	800332a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800344c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800344e:	4618      	mov	r0, r3
 8003450:	3730      	adds	r7, #48	; 0x30
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d14d      	bne.n	800351e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 ffb8 	bl	80043fc <xTaskPriorityDisinherit>
 800348c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	e043      	b.n	800351e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d119      	bne.n	80034d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6898      	ldr	r0, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	461a      	mov	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	f001 ff6e 	bl	8005388 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	441a      	add	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d32b      	bcc.n	800351e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	e026      	b.n	800351e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68d8      	ldr	r0, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	461a      	mov	r2, r3
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	f001 ff54 	bl	8005388 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	425b      	negs	r3, r3
 80034ea:	441a      	add	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d207      	bcs.n	800350c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	425b      	negs	r3, r3
 8003506:	441a      	add	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d105      	bne.n	800351e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3b01      	subs	r3, #1
 800351c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	441a      	add	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d303      	bcc.n	8003564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68d9      	ldr	r1, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	461a      	mov	r2, r3
 800356e:	6838      	ldr	r0, [r7, #0]
 8003570:	f001 ff0a 	bl	8005388 <memcpy>
	}
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003584:	f001 fc02 	bl	8004d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800358e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003590:	e011      	b.n	80035b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3324      	adds	r3, #36	; 0x24
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fd48 	bl	8004034 <xTaskRemoveFromEventList>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035aa:	f000 fe1f 	bl	80041ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	dce9      	bgt.n	8003592 <prvUnlockQueue+0x16>
 80035be:	e000      	b.n	80035c2 <prvUnlockQueue+0x46>
					break;
 80035c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	22ff      	movs	r2, #255	; 0xff
 80035c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035ca:	f001 fc0f 	bl	8004dec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035ce:	f001 fbdd 	bl	8004d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035da:	e011      	b.n	8003600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3310      	adds	r3, #16
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd23 	bl	8004034 <xTaskRemoveFromEventList>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035f4:	f000 fdfa 	bl	80041ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035f8:	7bbb      	ldrb	r3, [r7, #14]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003604:	2b00      	cmp	r3, #0
 8003606:	dce9      	bgt.n	80035dc <prvUnlockQueue+0x60>
 8003608:	e000      	b.n	800360c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800360a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003614:	f001 fbea 	bl	8004dec <vPortExitCritical>
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003628:	f001 fbb0 	bl	8004d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e001      	b.n	800363e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800363e:	f001 fbd5 	bl	8004dec <vPortExitCritical>

	return xReturn;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003654:	f001 fb9a 	bl	8004d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	429a      	cmp	r2, r3
 8003662:	d102      	bne.n	800366a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003664:	2301      	movs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e001      	b.n	800366e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800366e:	f001 fbbd 	bl	8004dec <vPortExitCritical>

	return xReturn;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e014      	b.n	80036b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <vQueueAddToRegistry+0x4c>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003698:	490b      	ldr	r1, [pc, #44]	; (80036c8 <vQueueAddToRegistry+0x4c>)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <vQueueAddToRegistry+0x4c>)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036ae:	e006      	b.n	80036be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	d9e7      	bls.n	800368c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20002450 	.word	0x20002450

080036cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036dc:	f001 fb56 	bl	8004d8c <vPortEnterCritical>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d103      	bne.n	80036f6 <vQueueWaitForMessageRestricted+0x2a>
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036fc:	b25b      	sxtb	r3, r3
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d103      	bne.n	800370c <vQueueWaitForMessageRestricted+0x40>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370c:	f001 fb6e 	bl	8004dec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	2b00      	cmp	r3, #0
 8003716:	d106      	bne.n	8003726 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3324      	adds	r3, #36	; 0x24
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fc5b 	bl	8003fdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff ff28 	bl	800357c <prvUnlockQueue>
	}
 800372c:	bf00      	nop
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08e      	sub	sp, #56	; 0x38
 8003738:	af04      	add	r7, sp, #16
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	623b      	str	r3, [r7, #32]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xTaskCreateStatic+0x46>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	61fb      	str	r3, [r7, #28]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800377a:	23bc      	movs	r3, #188	; 0xbc
 800377c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2bbc      	cmp	r3, #188	; 0xbc
 8003782:	d00a      	beq.n	800379a <xTaskCreateStatic+0x66>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61bb      	str	r3, [r7, #24]
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01e      	beq.n	80037de <xTaskCreateStatic+0xaa>
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01b      	beq.n	80037de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037b8:	2300      	movs	r3, #0
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f851 	bl	8003878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037d8:	f000 f8ec 	bl	80039b4 <prvAddNewTaskToReadyList>
 80037dc:	e001      	b.n	80037e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037e2:	697b      	ldr	r3, [r7, #20]
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af04      	add	r7, sp, #16
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fbc3 	bl	8004f8c <pvPortMalloc>
 8003806:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800380e:	20bc      	movs	r0, #188	; 0xbc
 8003810:	f001 fbbc 	bl	8004f8c <pvPortMalloc>
 8003814:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	e005      	b.n	8003830 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003824:	6978      	ldr	r0, [r7, #20]
 8003826:	f001 fc75 	bl	8005114 <vPortFree>
 800382a:	e001      	b.n	8003830 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d017      	beq.n	8003866 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	2300      	movs	r3, #0
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f80f 	bl	8003878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800385a:	69f8      	ldr	r0, [r7, #28]
 800385c:	f000 f8aa 	bl	80039b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003860:	2301      	movs	r3, #1
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	e002      	b.n	800386c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800386c:	69bb      	ldr	r3, [r7, #24]
	}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	461a      	mov	r2, r3
 8003890:	21a5      	movs	r1, #165	; 0xa5
 8003892:	f001 fd87 	bl	80053a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038a0:	3b01      	subs	r3, #1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f023 0307 	bic.w	r3, r3, #7
 80038ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	617b      	str	r3, [r7, #20]
}
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e012      	b.n	80038fc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	7819      	ldrb	r1, [r3, #0]
 80038de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	3334      	adds	r3, #52	; 0x34
 80038e6:	460a      	mov	r2, r1
 80038e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3301      	adds	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d9e9      	bls.n	80038d6 <prvInitialiseNewTask+0x5e>
 8003902:	e000      	b.n	8003906 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003904:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	2b37      	cmp	r3, #55	; 0x37
 8003912:	d901      	bls.n	8003918 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003914:	2337      	movs	r3, #55	; 0x37
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800391c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003922:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	2200      	movs	r2, #0
 8003928:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	3304      	adds	r3, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f98b 	bl	8002c4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	3318      	adds	r3, #24
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f986 	bl	8002c4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	2200      	movs	r2, #0
 8003958:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	3354      	adds	r3, #84	; 0x54
 8003968:	2260      	movs	r2, #96	; 0x60
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fd19 	bl	80053a4 <memset>
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <prvInitialiseNewTask+0x130>)
 8003976:	659a      	str	r2, [r3, #88]	; 0x58
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <prvInitialiseNewTask+0x134>)
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	4a0b      	ldr	r2, [pc, #44]	; (80039b0 <prvInitialiseNewTask+0x138>)
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	69b8      	ldr	r0, [r7, #24]
 800398a:	f001 f90b 	bl	8004ba4 <pxPortInitialiseStack>
 800398e:	4602      	mov	r2, r0
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08005660 	.word	0x08005660
 80039ac:	08005680 	.word	0x08005680
 80039b0:	08005640 	.word	0x08005640

080039b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039bc:	f001 f9e6 	bl	8004d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039c0:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <prvAddNewTaskToReadyList+0xc4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <prvAddNewTaskToReadyList+0xc4>)
 80039c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039d2:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <prvAddNewTaskToReadyList+0xc4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d110      	bne.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039e0:	f000 fc28 	bl	8004234 <prvInitialiseTaskLists>
 80039e4:	e00d      	b.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <prvAddNewTaskToReadyList+0xcc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d802      	bhi.n	8003a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <prvAddNewTaskToReadyList+0xd0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <prvAddNewTaskToReadyList+0xd0>)
 8003a0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <prvAddNewTaskToReadyList+0xd0>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <prvAddNewTaskToReadyList+0xd4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d903      	bls.n	8003a28 <prvAddNewTaskToReadyList+0x74>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <prvAddNewTaskToReadyList+0xd4>)
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <prvAddNewTaskToReadyList+0xd8>)
 8003a36:	441a      	add	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f7ff f90f 	bl	8002c62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a44:	f001 f9d2 	bl	8004dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <prvAddNewTaskToReadyList+0xcc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00e      	beq.n	8003a6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <prvAddNewTaskToReadyList+0xc8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d207      	bcs.n	8003a6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <prvAddNewTaskToReadyList+0xdc>)
 8003a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000ce0 	.word	0x20000ce0
 8003a7c:	2000080c 	.word	0x2000080c
 8003a80:	20000cec 	.word	0x20000cec
 8003a84:	20000cfc 	.word	0x20000cfc
 8003a88:	20000ce8 	.word	0x20000ce8
 8003a8c:	20000810 	.word	0x20000810
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d017      	beq.n	8003ad6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <vTaskDelay+0x60>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <vTaskDelay+0x30>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	60bb      	str	r3, [r7, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ac4:	f000 f88a 	bl	8003bdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ac8:	2100      	movs	r1, #0
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fd04 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ad0:	f000 f892 	bl	8003bf8 <xTaskResumeAll>
 8003ad4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <vTaskDelay+0x64>)
 8003ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000d08 	.word	0x20000d08
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	1d39      	adds	r1, r7, #4
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f848 	bl	8002ba8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	9202      	str	r2, [sp, #8]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	460a      	mov	r2, r1
 8003b2a:	4924      	ldr	r1, [pc, #144]	; (8003bbc <vTaskStartScheduler+0xc0>)
 8003b2c:	4824      	ldr	r0, [pc, #144]	; (8003bc0 <vTaskStartScheduler+0xc4>)
 8003b2e:	f7ff fe01 	bl	8003734 <xTaskCreateStatic>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <vTaskStartScheduler+0xc8>)
 8003b36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <vTaskStartScheduler+0xc8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e001      	b.n	8003b4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b50:	f000 fd16 	bl	8004580 <xTimerCreateTimerTask>
 8003b54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d11b      	bne.n	8003b94 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	613b      	str	r3, [r7, #16]
}
 8003b6e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <vTaskStartScheduler+0xcc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3354      	adds	r3, #84	; 0x54
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <vTaskStartScheduler+0xd0>)
 8003b78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <vTaskStartScheduler+0xd4>)
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <vTaskStartScheduler+0xd8>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <vTaskStartScheduler+0xdc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b8e:	f001 f88b 	bl	8004ca8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b92:	e00e      	b.n	8003bb2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d10a      	bne.n	8003bb2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60fb      	str	r3, [r7, #12]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <vTaskStartScheduler+0xb4>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	08005580 	.word	0x08005580
 8003bc0:	08004205 	.word	0x08004205
 8003bc4:	20000d04 	.word	0x20000d04
 8003bc8:	2000080c 	.word	0x2000080c
 8003bcc:	20000010 	.word	0x20000010
 8003bd0:	20000d00 	.word	0x20000d00
 8003bd4:	20000cec 	.word	0x20000cec
 8003bd8:	20000ce4 	.word	0x20000ce4

08003bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <vTaskSuspendAll+0x18>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <vTaskSuspendAll+0x18>)
 8003be8:	6013      	str	r3, [r2, #0]
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000d08 	.word	0x20000d08

08003bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c06:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <xTaskResumeAll+0x118>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	603b      	str	r3, [r7, #0]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c24:	f001 f8b2 	bl	8004d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c28:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <xTaskResumeAll+0x118>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	4a38      	ldr	r2, [pc, #224]	; (8003d10 <xTaskResumeAll+0x118>)
 8003c30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c32:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <xTaskResumeAll+0x118>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d162      	bne.n	8003d00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <xTaskResumeAll+0x11c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d05e      	beq.n	8003d00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c42:	e02f      	b.n	8003ca4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <xTaskResumeAll+0x120>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff f861 	bl	8002d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff f85c 	bl	8002d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <xTaskResumeAll+0x124>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d903      	bls.n	8003c74 <xTaskResumeAll+0x7c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <xTaskResumeAll+0x124>)
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <xTaskResumeAll+0x128>)
 8003c82:	441a      	add	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f7fe ffe9 	bl	8002c62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <xTaskResumeAll+0x12c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <xTaskResumeAll+0x130>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <xTaskResumeAll+0x120>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1cb      	bne.n	8003c44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cb2:	f000 fb61 	bl	8004378 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <xTaskResumeAll+0x134>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d010      	beq.n	8003ce4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cc2:	f000 f845 	bl	8003d50 <xTaskIncrementTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <xTaskResumeAll+0x130>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f1      	bne.n	8003cc2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <xTaskResumeAll+0x134>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <xTaskResumeAll+0x130>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <xTaskResumeAll+0x138>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d00:	f001 f874 	bl	8004dec <vPortExitCritical>

	return xAlreadyYielded;
 8003d04:	68bb      	ldr	r3, [r7, #8]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000d08 	.word	0x20000d08
 8003d14:	20000ce0 	.word	0x20000ce0
 8003d18:	20000ca0 	.word	0x20000ca0
 8003d1c:	20000ce8 	.word	0x20000ce8
 8003d20:	20000810 	.word	0x20000810
 8003d24:	2000080c 	.word	0x2000080c
 8003d28:	20000cf4 	.word	0x20000cf4
 8003d2c:	20000cf0 	.word	0x20000cf0
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <xTaskGetTickCount+0x18>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d40:	687b      	ldr	r3, [r7, #4]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000ce4 	.word	0x20000ce4

08003d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5a:	4b51      	ldr	r3, [pc, #324]	; (8003ea0 <xTaskIncrementTick+0x150>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 808e 	bne.w	8003e80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d64:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <xTaskIncrementTick+0x154>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ea4 <xTaskIncrementTick+0x154>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d120      	bne.n	8003dba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	603b      	str	r3, [r7, #0]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <xTaskIncrementTick+0x46>
 8003d98:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <xTaskIncrementTick+0x15c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a41      	ldr	r2, [pc, #260]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4a41      	ldr	r2, [pc, #260]	; (8003eac <xTaskIncrementTick+0x15c>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <xTaskIncrementTick+0x160>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <xTaskIncrementTick+0x160>)
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	f000 fadf 	bl	8004378 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d34e      	bcc.n	8003e62 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc4:	4b38      	ldr	r3, [pc, #224]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <xTaskIncrementTick+0x82>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xTaskIncrementTick+0x84>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd8:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003dda:	f04f 32ff 	mov.w	r2, #4294967295
 8003dde:	601a      	str	r2, [r3, #0]
					break;
 8003de0:	e03f      	b.n	8003e62 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003de2:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d203      	bcs.n	8003e02 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dfa:	4a2e      	ldr	r2, [pc, #184]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6013      	str	r3, [r2, #0]
						break;
 8003e00:	e02f      	b.n	8003e62 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe ff86 	bl	8002d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe ff7d 	bl	8002d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <xTaskIncrementTick+0x168>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d903      	bls.n	8003e32 <xTaskIncrementTick+0xe2>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <xTaskIncrementTick+0x168>)
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <xTaskIncrementTick+0x16c>)
 8003e40:	441a      	add	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7fe ff0a 	bl	8002c62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <xTaskIncrementTick+0x170>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3b3      	bcc.n	8003dc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e60:	e7b0      	b.n	8003dc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e62:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <xTaskIncrementTick+0x170>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4914      	ldr	r1, [pc, #80]	; (8003ebc <xTaskIncrementTick+0x16c>)
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d907      	bls.n	8003e8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e004      	b.n	8003e8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <xTaskIncrementTick+0x174>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <xTaskIncrementTick+0x174>)
 8003e88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <xTaskIncrementTick+0x178>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e96:	697b      	ldr	r3, [r7, #20]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000d08 	.word	0x20000d08
 8003ea4:	20000ce4 	.word	0x20000ce4
 8003ea8:	20000c98 	.word	0x20000c98
 8003eac:	20000c9c 	.word	0x20000c9c
 8003eb0:	20000cf8 	.word	0x20000cf8
 8003eb4:	20000d00 	.word	0x20000d00
 8003eb8:	20000ce8 	.word	0x20000ce8
 8003ebc:	20000810 	.word	0x20000810
 8003ec0:	2000080c 	.word	0x2000080c
 8003ec4:	20000cf0 	.word	0x20000cf0
 8003ec8:	20000cf4 	.word	0x20000cf4

08003ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <vTaskSwitchContext+0xb0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eda:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <vTaskSwitchContext+0xb4>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ee0:	e046      	b.n	8003f70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <vTaskSwitchContext+0xb4>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <vTaskSwitchContext+0xb8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e010      	b.n	8003f12 <vTaskSwitchContext+0x46>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <vTaskSwitchContext+0x40>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	607b      	str	r3, [r7, #4]
}
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <vTaskSwitchContext+0x3e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	491d      	ldr	r1, [pc, #116]	; (8003f88 <vTaskSwitchContext+0xbc>)
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0e4      	beq.n	8003ef0 <vTaskSwitchContext+0x24>
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <vTaskSwitchContext+0xbc>)
 8003f32:	4413      	add	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3308      	adds	r3, #8
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d104      	bne.n	8003f56 <vTaskSwitchContext+0x8a>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <vTaskSwitchContext+0xc0>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <vTaskSwitchContext+0xb8>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <vTaskSwitchContext+0xc0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3354      	adds	r3, #84	; 0x54
 8003f6c:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <vTaskSwitchContext+0xc4>)
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000d08 	.word	0x20000d08
 8003f80:	20000cf4 	.word	0x20000cf4
 8003f84:	20000ce8 	.word	0x20000ce8
 8003f88:	20000810 	.word	0x20000810
 8003f8c:	2000080c 	.word	0x2000080c
 8003f90:	20000010 	.word	0x20000010

08003f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <vTaskPlaceOnEventList+0x44>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3318      	adds	r3, #24
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fe fe70 	bl	8002ca8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fc8:	2101      	movs	r1, #1
 8003fca:	6838      	ldr	r0, [r7, #0]
 8003fcc:	f000 fa84 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	2000080c 	.word	0x2000080c

08003fdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	617b      	str	r3, [r7, #20]
}
 8004000:	bf00      	nop
 8004002:	e7fe      	b.n	8004002 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <vTaskPlaceOnEventListRestricted+0x54>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3318      	adds	r3, #24
 800400a:	4619      	mov	r1, r3
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7fe fe28 	bl	8002c62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68b8      	ldr	r0, [r7, #8]
 8004022:	f000 fa59 	bl	80044d8 <prvAddCurrentTaskToDelayedList>
	}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000080c 	.word	0x2000080c

08004034 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	60fb      	str	r3, [r7, #12]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3318      	adds	r3, #24
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fe57 	bl	8002d18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800406a:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <xTaskRemoveFromEventList+0xb0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11d      	bne.n	80040ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	3304      	adds	r3, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fe4e 	bl	8002d18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <xTaskRemoveFromEventList+0xb4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d903      	bls.n	8004090 <xTaskRemoveFromEventList+0x5c>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <xTaskRemoveFromEventList+0xb4>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <xTaskRemoveFromEventList+0xb8>)
 800409e:	441a      	add	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7fe fddb 	bl	8002c62 <vListInsertEnd>
 80040ac:	e005      	b.n	80040ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	3318      	adds	r3, #24
 80040b2:	4619      	mov	r1, r3
 80040b4:	480e      	ldr	r0, [pc, #56]	; (80040f0 <xTaskRemoveFromEventList+0xbc>)
 80040b6:	f7fe fdd4 	bl	8002c62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <xTaskRemoveFromEventList+0xc0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d905      	bls.n	80040d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <xTaskRemoveFromEventList+0xc4>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e001      	b.n	80040d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040d8:	697b      	ldr	r3, [r7, #20]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000d08 	.word	0x20000d08
 80040e8:	20000ce8 	.word	0x20000ce8
 80040ec:	20000810 	.word	0x20000810
 80040f0:	20000ca0 	.word	0x20000ca0
 80040f4:	2000080c 	.word	0x2000080c
 80040f8:	20000cf4 	.word	0x20000cf4

080040fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <vTaskInternalSetTimeOutState+0x24>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <vTaskInternalSetTimeOutState+0x28>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000cf8 	.word	0x20000cf8
 8004124:	20000ce4 	.word	0x20000ce4

08004128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	613b      	str	r3, [r7, #16]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800416a:	f000 fe0f 	bl	8004d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <xTaskCheckForTimeOut+0xbc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d102      	bne.n	800418e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e023      	b.n	80041d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <xTaskCheckForTimeOut+0xc0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d007      	beq.n	80041aa <xTaskCheckForTimeOut+0x82>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e015      	b.n	80041d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d20b      	bcs.n	80041cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff9b 	bl	80040fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e004      	b.n	80041d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041d6:	f000 fe09 	bl	8004dec <vPortExitCritical>

	return xReturn;
 80041da:	69fb      	ldr	r3, [r7, #28]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000ce4 	.word	0x20000ce4
 80041e8:	20000cf8 	.word	0x20000cf8

080041ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <vTaskMissedYield+0x14>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000cf4 	.word	0x20000cf4

08004204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800420c:	f000 f852 	bl	80042b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <prvIdleTask+0x28>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d9f9      	bls.n	800420c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <prvIdleTask+0x2c>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004228:	e7f0      	b.n	800420c <prvIdleTask+0x8>
 800422a:	bf00      	nop
 800422c:	20000810 	.word	0x20000810
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	e00c      	b.n	800425a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <prvInitialiseTaskLists+0x60>)
 800424c:	4413      	add	r3, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fcdc 	bl	8002c0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3301      	adds	r3, #1
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b37      	cmp	r3, #55	; 0x37
 800425e:	d9ef      	bls.n	8004240 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004260:	480d      	ldr	r0, [pc, #52]	; (8004298 <prvInitialiseTaskLists+0x64>)
 8004262:	f7fe fcd3 	bl	8002c0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004266:	480d      	ldr	r0, [pc, #52]	; (800429c <prvInitialiseTaskLists+0x68>)
 8004268:	f7fe fcd0 	bl	8002c0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800426c:	480c      	ldr	r0, [pc, #48]	; (80042a0 <prvInitialiseTaskLists+0x6c>)
 800426e:	f7fe fccd 	bl	8002c0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004272:	480c      	ldr	r0, [pc, #48]	; (80042a4 <prvInitialiseTaskLists+0x70>)
 8004274:	f7fe fcca 	bl	8002c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004278:	480b      	ldr	r0, [pc, #44]	; (80042a8 <prvInitialiseTaskLists+0x74>)
 800427a:	f7fe fcc7 	bl	8002c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <prvInitialiseTaskLists+0x78>)
 8004280:	4a05      	ldr	r2, [pc, #20]	; (8004298 <prvInitialiseTaskLists+0x64>)
 8004282:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <prvInitialiseTaskLists+0x7c>)
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <prvInitialiseTaskLists+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000810 	.word	0x20000810
 8004298:	20000c70 	.word	0x20000c70
 800429c:	20000c84 	.word	0x20000c84
 80042a0:	20000ca0 	.word	0x20000ca0
 80042a4:	20000cb4 	.word	0x20000cb4
 80042a8:	20000ccc 	.word	0x20000ccc
 80042ac:	20000c98 	.word	0x20000c98
 80042b0:	20000c9c 	.word	0x20000c9c

080042b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042ba:	e019      	b.n	80042f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042bc:	f000 fd66 	bl	8004d8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <prvCheckTasksWaitingTermination+0x50>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fd23 	bl	8002d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <prvCheckTasksWaitingTermination+0x54>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <prvCheckTasksWaitingTermination+0x54>)
 80042da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <prvCheckTasksWaitingTermination+0x58>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <prvCheckTasksWaitingTermination+0x58>)
 80042e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042e6:	f000 fd81 	bl	8004dec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f810 	bl	8004310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <prvCheckTasksWaitingTermination+0x58>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e1      	bne.n	80042bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000cb4 	.word	0x20000cb4
 8004308:	20000ce0 	.word	0x20000ce0
 800430c:	20000cc8 	.word	0x20000cc8

08004310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3354      	adds	r3, #84	; 0x54
 800431c:	4618      	mov	r0, r3
 800431e:	f001 f857 	bl	80053d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	4618      	mov	r0, r3
 8004332:	f000 feef 	bl	8005114 <vPortFree>
				vPortFree( pxTCB );
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 feec 	bl	8005114 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800433c:	e018      	b.n	8004370 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004344:	2b01      	cmp	r3, #1
 8004346:	d103      	bne.n	8004350 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fee3 	bl	8005114 <vPortFree>
	}
 800434e:	e00f      	b.n	8004370 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004356:	2b02      	cmp	r3, #2
 8004358:	d00a      	beq.n	8004370 <prvDeleteTCB+0x60>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60fb      	str	r3, [r7, #12]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <prvDeleteTCB+0x5e>
	}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <prvResetNextTaskUnblockTime+0x40>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <prvResetNextTaskUnblockTime+0x14>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <prvResetNextTaskUnblockTime+0x16>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <prvResetNextTaskUnblockTime+0x44>)
 8004394:	f04f 32ff 	mov.w	r2, #4294967295
 8004398:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800439a:	e008      	b.n	80043ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvResetNextTaskUnblockTime+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <prvResetNextTaskUnblockTime+0x44>)
 80043ac:	6013      	str	r3, [r2, #0]
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	20000c98 	.word	0x20000c98
 80043bc:	20000d00 	.word	0x20000d00

080043c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <xTaskGetSchedulerState+0x34>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ce:	2301      	movs	r3, #1
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	e008      	b.n	80043e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <xTaskGetSchedulerState+0x38>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043dc:	2302      	movs	r3, #2
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	e001      	b.n	80043e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043e6:	687b      	ldr	r3, [r7, #4]
	}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000cec 	.word	0x20000cec
 80043f8:	20000d08 	.word	0x20000d08

080043fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d056      	beq.n	80044c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004412:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <xTaskPriorityDisinherit+0xd0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	429a      	cmp	r2, r3
 800441a:	d00a      	beq.n	8004432 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60bb      	str	r3, [r7, #8]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	429a      	cmp	r2, r3
 8004464:	d02c      	beq.n	80044c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	2b00      	cmp	r3, #0
 800446c:	d128      	bne.n	80044c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fc50 	bl	8002d18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <xTaskPriorityDisinherit+0xd4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d903      	bls.n	80044a0 <xTaskPriorityDisinherit+0xa4>
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <xTaskPriorityDisinherit+0xd4>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <xTaskPriorityDisinherit+0xd8>)
 80044ae:	441a      	add	r2, r3
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f7fe fbd3 	bl	8002c62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044bc:	2301      	movs	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044c0:	697b      	ldr	r3, [r7, #20]
	}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2000080c 	.word	0x2000080c
 80044d0:	20000ce8 	.word	0x20000ce8
 80044d4:	20000810 	.word	0x20000810

080044d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044e2:	4b21      	ldr	r3, [pc, #132]	; (8004568 <prvAddCurrentTaskToDelayedList+0x90>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e8:	4b20      	ldr	r3, [pc, #128]	; (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fc12 	bl	8002d18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d10a      	bne.n	8004512 <prvAddCurrentTaskToDelayedList+0x3a>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4819      	ldr	r0, [pc, #100]	; (8004570 <prvAddCurrentTaskToDelayedList+0x98>)
 800450c:	f7fe fba9 	bl	8002c62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004510:	e026      	b.n	8004560 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	429a      	cmp	r2, r3
 8004528:	d209      	bcs.n	800453e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <prvAddCurrentTaskToDelayedList+0x9c>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe fbb6 	bl	8002ca8 <vListInsert>
}
 800453c:	e010      	b.n	8004560 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <prvAddCurrentTaskToDelayedList+0x94>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7fe fbac 	bl	8002ca8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d202      	bcs.n	8004560 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <prvAddCurrentTaskToDelayedList+0xa4>)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6013      	str	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000ce4 	.word	0x20000ce4
 800456c:	2000080c 	.word	0x2000080c
 8004570:	20000ccc 	.word	0x20000ccc
 8004574:	20000c9c 	.word	0x20000c9c
 8004578:	20000c98 	.word	0x20000c98
 800457c:	20000d00 	.word	0x20000d00

08004580 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800458a:	f000 facb 	bl	8004b24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <xTimerCreateTimerTask+0x80>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800459e:	1d3a      	adds	r2, r7, #4
 80045a0:	f107 0108 	add.w	r1, r7, #8
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fb15 	bl	8002bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	9202      	str	r2, [sp, #8]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	2302      	movs	r3, #2
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2300      	movs	r3, #0
 80045be:	460a      	mov	r2, r1
 80045c0:	4910      	ldr	r1, [pc, #64]	; (8004604 <xTimerCreateTimerTask+0x84>)
 80045c2:	4811      	ldr	r0, [pc, #68]	; (8004608 <xTimerCreateTimerTask+0x88>)
 80045c4:	f7ff f8b6 	bl	8003734 <xTaskCreateStatic>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <xTimerCreateTimerTask+0x8c>)
 80045cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <xTimerCreateTimerTask+0x8c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	613b      	str	r3, [r7, #16]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045f6:	697b      	ldr	r3, [r7, #20]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000d3c 	.word	0x20000d3c
 8004604:	08005588 	.word	0x08005588
 8004608:	0800472d 	.word	0x0800472d
 800460c:	20000d40 	.word	0x20000d40

08004610 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800461e:	2300      	movs	r3, #0
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	623b      	str	r3, [r7, #32]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <xTimerGenericCommand+0x98>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02a      	beq.n	800469c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b05      	cmp	r3, #5
 8004656:	dc18      	bgt.n	800468a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004658:	f7ff feb2 	bl	80043c0 <xTaskGetSchedulerState>
 800465c:	4603      	mov	r3, r0
 800465e:	2b02      	cmp	r3, #2
 8004660:	d109      	bne.n	8004676 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <xTimerGenericCommand+0x98>)
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	f107 0110 	add.w	r1, r7, #16
 800466a:	2300      	movs	r3, #0
 800466c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466e:	f7fe fc7f 	bl	8002f70 <xQueueGenericSend>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24
 8004674:	e012      	b.n	800469c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <xTimerGenericCommand+0x98>)
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f107 0110 	add.w	r1, r7, #16
 800467e:	2300      	movs	r3, #0
 8004680:	2200      	movs	r2, #0
 8004682:	f7fe fc75 	bl	8002f70 <xQueueGenericSend>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24
 8004688:	e008      	b.n	800469c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <xTimerGenericCommand+0x98>)
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	f107 0110 	add.w	r1, r7, #16
 8004692:	2300      	movs	r3, #0
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	f7fe fd69 	bl	800316c <xQueueGenericSendFromISR>
 800469a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000d3c 	.word	0x20000d3c

080046ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <prvProcessExpiredTimer+0x7c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fb27 	bl	8002d18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d122      	bne.n	8004718 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	18d1      	adds	r1, r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f000 f8c8 	bl	8004874 <prvInsertTimerInActiveList>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046ea:	2300      	movs	r3, #0
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2300      	movs	r3, #0
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	2100      	movs	r1, #0
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f7ff ff8b 	bl	8004610 <xTimerGenericCommand>
 80046fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60fb      	str	r3, [r7, #12]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	6978      	ldr	r0, [r7, #20]
 800471e:	4798      	blx	r3
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000d34 	.word	0x20000d34

0800472c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004734:	f107 0308 	add.w	r3, r7, #8
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f857 	bl	80047ec <prvGetNextExpireTime>
 800473e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f803 	bl	8004750 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800474a:	f000 f8d5 	bl	80048f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800474e:	e7f1      	b.n	8004734 <prvTimerTask+0x8>

08004750 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800475a:	f7ff fa3f 	bl	8003bdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f866 	bl	8004834 <prvSampleTimeNow>
 8004768:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d130      	bne.n	80047d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <prvProcessTimerOrBlockTask+0x3c>
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	429a      	cmp	r2, r3
 800477c:	d806      	bhi.n	800478c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800477e:	f7ff fa3b 	bl	8003bf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff91 	bl	80046ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800478a:	e024      	b.n	80047d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <prvProcessTimerOrBlockTask+0x90>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <prvProcessTimerOrBlockTask+0x94>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	f7fe ff8b 	bl	80036cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047b6:	f7ff fa1f 	bl	8003bf8 <xTaskResumeAll>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <prvProcessTimerOrBlockTask+0x98>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
}
 80047d0:	e001      	b.n	80047d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047d2:	f7ff fa11 	bl	8003bf8 <xTaskResumeAll>
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000d38 	.word	0x20000d38
 80047e4:	20000d3c 	.word	0x20000d3c
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <prvGetNextExpireTime+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <prvGetNextExpireTime+0x44>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e001      	b.n	8004822 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000d34 	.word	0x20000d34

08004834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800483c:	f7ff fa7a 	bl	8003d34 <xTaskGetTickCount>
 8004840:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <prvSampleTimeNow+0x3c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d205      	bcs.n	8004858 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800484c:	f000 f908 	bl	8004a60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e002      	b.n	800485e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <prvSampleTimeNow+0x3c>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004864:	68fb      	ldr	r3, [r7, #12]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000d44 	.word	0x20000d44

08004874 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d812      	bhi.n	80048c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e01b      	b.n	80048e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <prvInsertTimerInActiveList+0x7c>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f7fe f9f5 	bl	8002ca8 <vListInsert>
 80048be:	e012      	b.n	80048e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d206      	bcs.n	80048d6 <prvInsertTimerInActiveList+0x62>
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e007      	b.n	80048e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <prvInsertTimerInActiveList+0x80>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe f9e1 	bl	8002ca8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048e6:	697b      	ldr	r3, [r7, #20]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000d38 	.word	0x20000d38
 80048f4:	20000d34 	.word	0x20000d34

080048f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08e      	sub	sp, #56	; 0x38
 80048fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048fe:	e09d      	b.n	8004a3c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	da18      	bge.n	8004938 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	3304      	adds	r3, #4
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	61fb      	str	r3, [r7, #28]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492e:	6850      	ldr	r0, [r2, #4]
 8004930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	4611      	mov	r1, r2
 8004936:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db7d      	blt.n	8004a3a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	3304      	adds	r3, #4
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f9e2 	bl	8002d18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004954:	463b      	mov	r3, r7
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff6c 	bl	8004834 <prvSampleTimeNow>
 800495c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b09      	cmp	r3, #9
 8004962:	d86b      	bhi.n	8004a3c <prvProcessReceivedCommands+0x144>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <prvProcessReceivedCommands+0x74>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004995 	.word	0x08004995
 8004970:	08004995 	.word	0x08004995
 8004974:	08004995 	.word	0x08004995
 8004978:	08004a3d 	.word	0x08004a3d
 800497c:	080049f1 	.word	0x080049f1
 8004980:	08004a29 	.word	0x08004a29
 8004984:	08004995 	.word	0x08004995
 8004988:	08004995 	.word	0x08004995
 800498c:	08004a3d 	.word	0x08004a3d
 8004990:	080049f1 	.word	0x080049f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	18d1      	adds	r1, r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a2:	f7ff ff67 	bl	8004874 <prvInsertTimerInActiveList>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d047      	beq.n	8004a3c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d13f      	bne.n	8004a3c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	441a      	add	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2300      	movs	r3, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ce:	f7ff fe1f 	bl	8004610 <xTimerGenericCommand>
 80049d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d130      	bne.n	8004a3c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	61bb      	str	r3, [r7, #24]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	617b      	str	r3, [r7, #20]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	18d1      	adds	r1, r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a22:	f7ff ff27 	bl	8004874 <prvInsertTimerInActiveList>
					break;
 8004a26:	e009      	b.n	8004a3c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a34:	f000 fb6e 	bl	8005114 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a38:	e000      	b.n	8004a3c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a3a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <prvProcessReceivedCommands+0x164>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1d39      	adds	r1, r7, #4
 8004a42:	2200      	movs	r2, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fe fc29 	bl	800329c <xQueueReceive>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af57 	bne.w	8004900 <prvProcessReceivedCommands+0x8>
	}
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	3730      	adds	r7, #48	; 0x30
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000d3c 	.word	0x20000d3c

08004a60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a66:	e045      	b.n	8004af4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a68:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <prvSwitchTimerLists+0xbc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a72:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <prvSwitchTimerLists+0xbc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe f949 	bl	8002d18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d12e      	bne.n	8004af4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d90e      	bls.n	8004ac6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <prvSwitchTimerLists+0xbc>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe f8f2 	bl	8002ca8 <vListInsert>
 8004ac4:	e016      	b.n	8004af4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	2100      	movs	r1, #0
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff fd9d 	bl	8004610 <xTimerGenericCommand>
 8004ad6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	603b      	str	r3, [r7, #0]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <prvSwitchTimerLists+0xbc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1b4      	bne.n	8004a68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <prvSwitchTimerLists+0xbc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <prvSwitchTimerLists+0xc0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <prvSwitchTimerLists+0xbc>)
 8004b0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <prvSwitchTimerLists+0xc0>)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6013      	str	r3, [r2, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000d34 	.word	0x20000d34
 8004b20:	20000d38 	.word	0x20000d38

08004b24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b2a:	f000 f92f 	bl	8004d8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <prvCheckForValidListAndQueue+0x60>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d120      	bne.n	8004b78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b36:	4814      	ldr	r0, [pc, #80]	; (8004b88 <prvCheckForValidListAndQueue+0x64>)
 8004b38:	f7fe f868 	bl	8002c0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b3c:	4813      	ldr	r0, [pc, #76]	; (8004b8c <prvCheckForValidListAndQueue+0x68>)
 8004b3e:	f7fe f865 	bl	8002c0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <prvCheckForValidListAndQueue+0x6c>)
 8004b44:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <prvCheckForValidListAndQueue+0x64>)
 8004b46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <prvCheckForValidListAndQueue+0x70>)
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <prvCheckForValidListAndQueue+0x68>)
 8004b4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <prvCheckForValidListAndQueue+0x74>)
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <prvCheckForValidListAndQueue+0x78>)
 8004b56:	2110      	movs	r1, #16
 8004b58:	200a      	movs	r0, #10
 8004b5a:	f7fe f96f 	bl	8002e3c <xQueueGenericCreateStatic>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <prvCheckForValidListAndQueue+0x60>)
 8004b62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <prvCheckForValidListAndQueue+0x60>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <prvCheckForValidListAndQueue+0x60>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	490b      	ldr	r1, [pc, #44]	; (8004ba0 <prvCheckForValidListAndQueue+0x7c>)
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fd82 	bl	800367c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b78:	f000 f938 	bl	8004dec <vPortExitCritical>
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000d3c 	.word	0x20000d3c
 8004b88:	20000d0c 	.word	0x20000d0c
 8004b8c:	20000d20 	.word	0x20000d20
 8004b90:	20000d34 	.word	0x20000d34
 8004b94:	20000d38 	.word	0x20000d38
 8004b98:	20000de8 	.word	0x20000de8
 8004b9c:	20000d48 	.word	0x20000d48
 8004ba0:	08005590 	.word	0x08005590

08004ba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f023 0201 	bic.w	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3b04      	subs	r3, #4
 8004bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <pxPortInitialiseStack+0x54>)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3b14      	subs	r3, #20
 8004bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b20      	subs	r3, #32
 8004bea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bec:	68fb      	ldr	r3, [r7, #12]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	08004bfd 	.word	0x08004bfd

08004bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <prvTaskExitError+0x54>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d00a      	beq.n	8004c26 <prvTaskExitError+0x2a>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <prvTaskExitError+0x28>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60bb      	str	r3, [r7, #8]
}
 8004c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c3a:	bf00      	nop
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0fc      	beq.n	8004c3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	2000000c 	.word	0x2000000c
	...

08004c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <pxCurrentTCBConst2>)
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c6a:	f380 8809 	msr	PSP, r0
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8811 	msr	BASEPRI, r0
 8004c7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c7e:	4770      	bx	lr

08004c80 <pxCurrentTCBConst2>:
 8004c80:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c88:	4806      	ldr	r0, [pc, #24]	; (8004ca4 <prvPortStartFirstTask+0x1c>)
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f380 8808 	msr	MSP, r0
 8004c92:	b662      	cpsie	i
 8004c94:	b661      	cpsie	f
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	df00      	svc	0
 8004ca0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed08 	.word	0xe000ed08

08004ca8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cae:	4b32      	ldr	r3, [pc, #200]	; (8004d78 <xPortStartScheduler+0xd0>)
 8004cb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	22ff      	movs	r2, #255	; 0xff
 8004cbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <xPortStartScheduler+0xd4>)
 8004cd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cd6:	4b2a      	ldr	r3, [pc, #168]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004cd8:	2207      	movs	r2, #7
 8004cda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cdc:	e009      	b.n	8004cf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004cde:	4b28      	ldr	r3, [pc, #160]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004ce6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d0ef      	beq.n	8004cde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f1c3 0307 	rsb	r3, r3, #7
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00a      	beq.n	8004d20 <xPortStartScheduler+0x78>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60bb      	str	r3, [r7, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d20:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004d28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d2a:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d32:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <xPortStartScheduler+0xd8>)
 8004d34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d3e:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <xPortStartScheduler+0xdc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <xPortStartScheduler+0xdc>)
 8004d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <xPortStartScheduler+0xdc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <xPortStartScheduler+0xdc>)
 8004d50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d56:	f000 f8b9 	bl	8004ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <xPortStartScheduler+0xe0>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d60:	f7ff ff92 	bl	8004c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d64:	f7ff f8b2 	bl	8003ecc <vTaskSwitchContext>
	prvTaskExitError();
 8004d68:	f7ff ff48 	bl	8004bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	e000e400 	.word	0xe000e400
 8004d7c:	20000e38 	.word	0x20000e38
 8004d80:	20000e3c 	.word	0x20000e3c
 8004d84:	e000ed20 	.word	0xe000ed20
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	607b      	str	r3, [r7, #4]
}
 8004da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <vPortEnterCritical+0x58>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <vPortEnterCritical+0x58>)
 8004dae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <vPortEnterCritical+0x58>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10f      	bne.n	8004dd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <vPortEnterCritical+0x5c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortEnterCritical+0x4a>
	}
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <vPortExitCritical+0x4c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <vPortExitCritical+0x24>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	607b      	str	r3, [r7, #4]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <vPortExitCritical+0x4c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <vPortExitCritical+0x4c>)
 8004e18:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e1a:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <vPortExitCritical+0x4c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d105      	bne.n	8004e2e <vPortExitCritical+0x42>
 8004e22:	2300      	movs	r3, #0
 8004e24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f383 8811 	msr	BASEPRI, r3
}
 8004e2c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	00000000 	.word	0x00000000

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e50:	6010      	str	r0, [r2, #0]
 8004e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e5a:	f380 8811 	msr	BASEPRI, r0
 8004e5e:	f7ff f835 	bl	8003ecc <vTaskSwitchContext>
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f380 8811 	msr	BASEPRI, r0
 8004e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	6808      	ldr	r0, [r1, #0]
 8004e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e76:	f380 8809 	msr	PSP, r0
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	4770      	bx	lr

08004e80 <pxCurrentTCBConst>:
 8004e80:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ea2:	f7fe ff55 	bl	8003d50 <xTaskIncrementTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <SysTick_Handler+0x40>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f383 8811 	msr	BASEPRI, r3
}
 8004ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <vPortSetupTimerInterrupt+0x30>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <vPortSetupTimerInterrupt+0x38>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <vPortSetupTimerInterrupt+0x3c>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <vPortSetupTimerInterrupt+0x40>)
 8004eea:	3b01      	subs	r3, #1
 8004eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eee:	4b03      	ldr	r3, [pc, #12]	; (8004efc <vPortSetupTimerInterrupt+0x30>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	e000e010 	.word	0xe000e010
 8004f00:	e000e018 	.word	0xe000e018
 8004f04:	20000000 	.word	0x20000000
 8004f08:	10624dd3 	.word	0x10624dd3
 8004f0c:	e000e014 	.word	0xe000e014

08004f10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f16:	f3ef 8305 	mrs	r3, IPSR
 8004f1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b0f      	cmp	r3, #15
 8004f20:	d914      	bls.n	8004f4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f22:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <vPortValidateInterruptPriority+0x6c>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <vPortValidateInterruptPriority+0x70>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	7afa      	ldrb	r2, [r7, #11]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d20a      	bcs.n	8004f4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	607b      	str	r3, [r7, #4]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <vPortValidateInterruptPriority+0x74>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <vPortValidateInterruptPriority+0x78>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d90a      	bls.n	8004f72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	603b      	str	r3, [r7, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <vPortValidateInterruptPriority+0x60>
	}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	e000e3f0 	.word	0xe000e3f0
 8004f80:	20000e38 	.word	0x20000e38
 8004f84:	e000ed0c 	.word	0xe000ed0c
 8004f88:	20000e3c 	.word	0x20000e3c

08004f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f98:	f7fe fe20 	bl	8003bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f9c:	4b58      	ldr	r3, [pc, #352]	; (8005100 <pvPortMalloc+0x174>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fa4:	f000 f910 	bl	80051c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fa8:	4b56      	ldr	r3, [pc, #344]	; (8005104 <pvPortMalloc+0x178>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 808e 	bne.w	80050d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01d      	beq.n	8004ff8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d014      	beq.n	8004ff8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f023 0307 	bic.w	r3, r3, #7
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <pvPortMalloc+0x6c>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	617b      	str	r3, [r7, #20]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d069      	beq.n	80050d2 <pvPortMalloc+0x146>
 8004ffe:	4b42      	ldr	r3, [pc, #264]	; (8005108 <pvPortMalloc+0x17c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d864      	bhi.n	80050d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <pvPortMalloc+0x180>)
 800500a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800500c:	4b3f      	ldr	r3, [pc, #252]	; (800510c <pvPortMalloc+0x180>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005012:	e004      	b.n	800501e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d903      	bls.n	8005030 <pvPortMalloc+0xa4>
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f1      	bne.n	8005014 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005030:	4b33      	ldr	r3, [pc, #204]	; (8005100 <pvPortMalloc+0x174>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	429a      	cmp	r2, r3
 8005038:	d04b      	beq.n	80050d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2208      	movs	r2, #8
 8005040:	4413      	add	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	2308      	movs	r3, #8
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	429a      	cmp	r2, r3
 800505a:	d91f      	bls.n	800509c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800505c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <pvPortMalloc+0xf8>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	613b      	str	r3, [r7, #16]
}
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	1ad2      	subs	r2, r2, r3
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005096:	69b8      	ldr	r0, [r7, #24]
 8005098:	f000 f8f8 	bl	800528c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800509c:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <pvPortMalloc+0x17c>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <pvPortMalloc+0x17c>)
 80050a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050aa:	4b17      	ldr	r3, [pc, #92]	; (8005108 <pvPortMalloc+0x17c>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <pvPortMalloc+0x184>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d203      	bcs.n	80050be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <pvPortMalloc+0x17c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <pvPortMalloc+0x184>)
 80050bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <pvPortMalloc+0x178>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050d2:	f7fe fd91 	bl	8003bf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <pvPortMalloc+0x16a>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <pvPortMalloc+0x168>
	return pvReturn;
 80050f6:	69fb      	ldr	r3, [r7, #28]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3728      	adds	r7, #40	; 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20002248 	.word	0x20002248
 8005104:	20002254 	.word	0x20002254
 8005108:	2000224c 	.word	0x2000224c
 800510c:	20002240 	.word	0x20002240
 8005110:	20002250 	.word	0x20002250

08005114 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d048      	beq.n	80051b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005126:	2308      	movs	r3, #8
 8005128:	425b      	negs	r3, r3
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <vPortFree+0xac>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vPortFree+0x44>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60fb      	str	r3, [r7, #12]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <vPortFree+0x62>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60bb      	str	r3, [r7, #8]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <vPortFree+0xac>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d019      	beq.n	80051b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d115      	bne.n	80051b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <vPortFree+0xac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800519c:	f7fe fd1e 	bl	8003bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <vPortFree+0xb0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4413      	add	r3, r2
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <vPortFree+0xb0>)
 80051ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ae:	6938      	ldr	r0, [r7, #16]
 80051b0:	f000 f86c 	bl	800528c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051b4:	f7fe fd20 	bl	8003bf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051b8:	bf00      	nop
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20002254 	.word	0x20002254
 80051c4:	2000224c 	.word	0x2000224c

080051c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80051d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051d4:	4b27      	ldr	r3, [pc, #156]	; (8005274 <prvHeapInit+0xac>)
 80051d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00c      	beq.n	80051fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3307      	adds	r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <prvHeapInit+0xac>)
 80051f8:	4413      	add	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005200:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <prvHeapInit+0xb0>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005206:	4b1c      	ldr	r3, [pc, #112]	; (8005278 <prvHeapInit+0xb0>)
 8005208:	2200      	movs	r2, #0
 800520a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4413      	add	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005214:	2208      	movs	r2, #8
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0307 	bic.w	r3, r3, #7
 8005222:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <prvHeapInit+0xb4>)
 8005228:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800522a:	4b14      	ldr	r3, [pc, #80]	; (800527c <prvHeapInit+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <prvHeapInit+0xb4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <prvHeapInit+0xb4>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <prvHeapInit+0xb8>)
 8005256:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a09      	ldr	r2, [pc, #36]	; (8005284 <prvHeapInit+0xbc>)
 800525e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <prvHeapInit+0xc0>)
 8005262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005266:	601a      	str	r2, [r3, #0]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000e40 	.word	0x20000e40
 8005278:	20002240 	.word	0x20002240
 800527c:	20002248 	.word	0x20002248
 8005280:	20002250 	.word	0x20002250
 8005284:	2000224c 	.word	0x2000224c
 8005288:	20002254 	.word	0x20002254

0800528c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <prvInsertBlockIntoFreeList+0xa8>)
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e002      	b.n	80052a0 <prvInsertBlockIntoFreeList+0x14>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d8f7      	bhi.n	800529a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4413      	add	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d108      	bne.n	80052ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	441a      	add	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d118      	bne.n	8005314 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <prvInsertBlockIntoFreeList+0xac>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d00d      	beq.n	800530a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e008      	b.n	800531c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <prvInsertBlockIntoFreeList+0xac>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e003      	b.n	800531c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d002      	beq.n	800532a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	20002240 	.word	0x20002240
 8005338:	20002248 	.word	0x20002248

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	2600      	movs	r6, #0
 8005340:	4d0c      	ldr	r5, [pc, #48]	; (8005374 <__libc_init_array+0x38>)
 8005342:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	f000 f8f4 	bl	8005538 <_init>
 8005350:	2600      	movs	r6, #0
 8005352:	4d0a      	ldr	r5, [pc, #40]	; (800537c <__libc_init_array+0x40>)
 8005354:	4c0a      	ldr	r4, [pc, #40]	; (8005380 <__libc_init_array+0x44>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	080056a0 	.word	0x080056a0
 8005378:	080056a0 	.word	0x080056a0
 800537c:	080056a0 	.word	0x080056a0
 8005380:	080056a4 	.word	0x080056a4

08005384 <__retarget_lock_acquire_recursive>:
 8005384:	4770      	bx	lr

08005386 <__retarget_lock_release_recursive>:
 8005386:	4770      	bx	lr

08005388 <memcpy>:
 8005388:	440a      	add	r2, r1
 800538a:	4291      	cmp	r1, r2
 800538c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005390:	d100      	bne.n	8005394 <memcpy+0xc>
 8005392:	4770      	bx	lr
 8005394:	b510      	push	{r4, lr}
 8005396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539a:	4291      	cmp	r1, r2
 800539c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a0:	d1f9      	bne.n	8005396 <memcpy+0xe>
 80053a2:	bd10      	pop	{r4, pc}

080053a4 <memset>:
 80053a4:	4603      	mov	r3, r0
 80053a6:	4402      	add	r2, r0
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d100      	bne.n	80053ae <memset+0xa>
 80053ac:	4770      	bx	lr
 80053ae:	f803 1b01 	strb.w	r1, [r3], #1
 80053b2:	e7f9      	b.n	80053a8 <memset+0x4>

080053b4 <cleanup_glue>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	460c      	mov	r4, r1
 80053b8:	6809      	ldr	r1, [r1, #0]
 80053ba:	4605      	mov	r5, r0
 80053bc:	b109      	cbz	r1, 80053c2 <cleanup_glue+0xe>
 80053be:	f7ff fff9 	bl	80053b4 <cleanup_glue>
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ca:	f000 b869 	b.w	80054a0 <_free_r>
	...

080053d0 <_reclaim_reent>:
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <_reclaim_reent+0xb4>)
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4604      	mov	r4, r0
 80053d8:	4283      	cmp	r3, r0
 80053da:	d051      	beq.n	8005480 <_reclaim_reent+0xb0>
 80053dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053de:	b143      	cbz	r3, 80053f2 <_reclaim_reent+0x22>
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d14a      	bne.n	800547c <_reclaim_reent+0xac>
 80053e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	b111      	cbz	r1, 80053f2 <_reclaim_reent+0x22>
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f857 	bl	80054a0 <_free_r>
 80053f2:	6961      	ldr	r1, [r4, #20]
 80053f4:	b111      	cbz	r1, 80053fc <_reclaim_reent+0x2c>
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f852 	bl	80054a0 <_free_r>
 80053fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053fe:	b111      	cbz	r1, 8005406 <_reclaim_reent+0x36>
 8005400:	4620      	mov	r0, r4
 8005402:	f000 f84d 	bl	80054a0 <_free_r>
 8005406:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005408:	b111      	cbz	r1, 8005410 <_reclaim_reent+0x40>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f848 	bl	80054a0 <_free_r>
 8005410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005412:	b111      	cbz	r1, 800541a <_reclaim_reent+0x4a>
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f843 	bl	80054a0 <_free_r>
 800541a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800541c:	b111      	cbz	r1, 8005424 <_reclaim_reent+0x54>
 800541e:	4620      	mov	r0, r4
 8005420:	f000 f83e 	bl	80054a0 <_free_r>
 8005424:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005426:	b111      	cbz	r1, 800542e <_reclaim_reent+0x5e>
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f839 	bl	80054a0 <_free_r>
 800542e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005430:	b111      	cbz	r1, 8005438 <_reclaim_reent+0x68>
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f834 	bl	80054a0 <_free_r>
 8005438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800543a:	b111      	cbz	r1, 8005442 <_reclaim_reent+0x72>
 800543c:	4620      	mov	r0, r4
 800543e:	f000 f82f 	bl	80054a0 <_free_r>
 8005442:	69a3      	ldr	r3, [r4, #24]
 8005444:	b1e3      	cbz	r3, 8005480 <_reclaim_reent+0xb0>
 8005446:	4620      	mov	r0, r4
 8005448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800544a:	4798      	blx	r3
 800544c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800544e:	b1b9      	cbz	r1, 8005480 <_reclaim_reent+0xb0>
 8005450:	4620      	mov	r0, r4
 8005452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005456:	f7ff bfad 	b.w	80053b4 <cleanup_glue>
 800545a:	5949      	ldr	r1, [r1, r5]
 800545c:	b941      	cbnz	r1, 8005470 <_reclaim_reent+0xa0>
 800545e:	3504      	adds	r5, #4
 8005460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005462:	2d80      	cmp	r5, #128	; 0x80
 8005464:	68d9      	ldr	r1, [r3, #12]
 8005466:	d1f8      	bne.n	800545a <_reclaim_reent+0x8a>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f819 	bl	80054a0 <_free_r>
 800546e:	e7ba      	b.n	80053e6 <_reclaim_reent+0x16>
 8005470:	680e      	ldr	r6, [r1, #0]
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f814 	bl	80054a0 <_free_r>
 8005478:	4631      	mov	r1, r6
 800547a:	e7ef      	b.n	800545c <_reclaim_reent+0x8c>
 800547c:	2500      	movs	r5, #0
 800547e:	e7ef      	b.n	8005460 <_reclaim_reent+0x90>
 8005480:	bd70      	pop	{r4, r5, r6, pc}
 8005482:	bf00      	nop
 8005484:	20000010 	.word	0x20000010

08005488 <__malloc_lock>:
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <__malloc_lock+0x8>)
 800548a:	f7ff bf7b 	b.w	8005384 <__retarget_lock_acquire_recursive>
 800548e:	bf00      	nop
 8005490:	20002494 	.word	0x20002494

08005494 <__malloc_unlock>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__malloc_unlock+0x8>)
 8005496:	f7ff bf76 	b.w	8005386 <__retarget_lock_release_recursive>
 800549a:	bf00      	nop
 800549c:	20002494 	.word	0x20002494

080054a0 <_free_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4605      	mov	r5, r0
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d043      	beq.n	8005530 <_free_r+0x90>
 80054a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ac:	1f0c      	subs	r4, r1, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bfb8      	it	lt
 80054b2:	18e4      	addlt	r4, r4, r3
 80054b4:	f7ff ffe8 	bl	8005488 <__malloc_lock>
 80054b8:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <_free_r+0x94>)
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	4610      	mov	r0, r2
 80054be:	b933      	cbnz	r3, 80054ce <_free_r+0x2e>
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	6014      	str	r4, [r2, #0]
 80054c4:	4628      	mov	r0, r5
 80054c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ca:	f7ff bfe3 	b.w	8005494 <__malloc_unlock>
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	d90a      	bls.n	80054e8 <_free_r+0x48>
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	1862      	adds	r2, r4, r1
 80054d6:	4293      	cmp	r3, r2
 80054d8:	bf01      	itttt	eq
 80054da:	681a      	ldreq	r2, [r3, #0]
 80054dc:	685b      	ldreq	r3, [r3, #4]
 80054de:	1852      	addeq	r2, r2, r1
 80054e0:	6022      	streq	r2, [r4, #0]
 80054e2:	6063      	str	r3, [r4, #4]
 80054e4:	6004      	str	r4, [r0, #0]
 80054e6:	e7ed      	b.n	80054c4 <_free_r+0x24>
 80054e8:	461a      	mov	r2, r3
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	b10b      	cbz	r3, 80054f2 <_free_r+0x52>
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	d9fa      	bls.n	80054e8 <_free_r+0x48>
 80054f2:	6811      	ldr	r1, [r2, #0]
 80054f4:	1850      	adds	r0, r2, r1
 80054f6:	42a0      	cmp	r0, r4
 80054f8:	d10b      	bne.n	8005512 <_free_r+0x72>
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	4401      	add	r1, r0
 80054fe:	1850      	adds	r0, r2, r1
 8005500:	4283      	cmp	r3, r0
 8005502:	6011      	str	r1, [r2, #0]
 8005504:	d1de      	bne.n	80054c4 <_free_r+0x24>
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	4401      	add	r1, r0
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	6053      	str	r3, [r2, #4]
 8005510:	e7d8      	b.n	80054c4 <_free_r+0x24>
 8005512:	d902      	bls.n	800551a <_free_r+0x7a>
 8005514:	230c      	movs	r3, #12
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	e7d4      	b.n	80054c4 <_free_r+0x24>
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	1821      	adds	r1, r4, r0
 800551e:	428b      	cmp	r3, r1
 8005520:	bf01      	itttt	eq
 8005522:	6819      	ldreq	r1, [r3, #0]
 8005524:	685b      	ldreq	r3, [r3, #4]
 8005526:	1809      	addeq	r1, r1, r0
 8005528:	6021      	streq	r1, [r4, #0]
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	6054      	str	r4, [r2, #4]
 800552e:	e7c9      	b.n	80054c4 <_free_r+0x24>
 8005530:	bd38      	pop	{r3, r4, r5, pc}
 8005532:	bf00      	nop
 8005534:	20002258 	.word	0x20002258

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
