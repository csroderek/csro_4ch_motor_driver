
csro_4ch_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000914c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b8  080095b8  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  080095b8  080095b8  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095b8  080095b8  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080095c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f98  20000130  080096ec  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200030c8  080096ec  000230c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249ac  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005205  00000000  00000000  00044b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00049d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  0004b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beb4  00000000  00000000  0004ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e929  00000000  00000000  000688cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c39  00000000  00000000  000871f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ce2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  0011ce84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000130 	.word	0x20000130
 800012c:	00000000 	.word	0x00000000
 8000130:	08009244 	.word	0x08009244

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000134 	.word	0x20000134
 800014c:	08009244 	.word	0x08009244

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b18      	ldr	r3, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 ff63 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 ff7c 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 ff5b 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 ff74 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 ff53 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 ff6c 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 ff4b 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 ff64 	bl	8001076 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 80001c0:	f000 fc72 	bl	8000aa8 <fnd_com_modbus_rtu_init>
  ee_init();
 80001c4:	f000 fcc0 	bl	8000b48 <ee_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <MX_FREERTOS_Init+0x50>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4810      	ldr	r0, [pc, #64]	; (8000210 <MX_FREERTOS_Init+0x54>)
 80001ce:	f003 fb45 	bl	800385c <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a0f      	ldr	r2, [pc, #60]	; (8000214 <MX_FREERTOS_Init+0x58>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <MX_FREERTOS_Init+0x5c>)
 80001da:	2100      	movs	r1, #0
 80001dc:	480f      	ldr	r0, [pc, #60]	; (800021c <MX_FREERTOS_Init+0x60>)
 80001de:	f003 fb3d 	bl	800385c <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <MX_FREERTOS_Init+0x64>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <MX_FREERTOS_Init+0x68>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <MX_FREERTOS_Init+0x6c>)
 80001ee:	f003 fb35 	bl	800385c <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <MX_FREERTOS_Init+0x70>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <MX_FREERTOS_Init+0x74>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <MX_FREERTOS_Init+0x78>)
 80001fe:	f003 fb2d 	bl	800385c <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <MX_FREERTOS_Init+0x7c>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	080092a4 	.word	0x080092a4
 8000210:	0800023d 	.word	0x0800023d
 8000214:	20002320 	.word	0x20002320
 8000218:	080092c8 	.word	0x080092c8
 800021c:	0800024b 	.word	0x0800024b
 8000220:	20002318 	.word	0x20002318
 8000224:	080092ec 	.word	0x080092ec
 8000228:	08000259 	.word	0x08000259
 800022c:	20002324 	.word	0x20002324
 8000230:	08009310 	.word	0x08009310
 8000234:	08000285 	.word	0x08000285
 8000238:	2000231c 	.word	0x2000231c

0800023c <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 8000244:	f000 fc6c 	bl	8000b20 <fnd_com_modbus_rtu_slave1_wait>
 8000248:	e7fc      	b.n	8000244 <StartTask01+0x8>

0800024a <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 8000252:	f000 fc6f 	bl	8000b34 <fnd_com_modbus_rtu_slave2_wait>
 8000256:	e7fc      	b.n	8000252 <StartTask02+0x8>

08000258 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  motor_param_persist_initialize();
 8000260:	f008 f90e 	bl	8008480 <motor_param_persist_initialize>
  motor_function_initialize();
 8000264:	f007 ffd4 	bl	8008210 <motor_function_initialize>
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 8000268:	200a      	movs	r0, #10
 800026a:	f003 fba1 	bl	80039b0 <osDelay>
    fnd_input_update_value();
 800026e:	f000 fd4d 	bl	8000d0c <fnd_input_update_value>
    motor_function_step();
 8000272:	f007 fd93 	bl	8007d9c <motor_function_step>
    fnd_output_update_value(relay);
 8000276:	4802      	ldr	r0, [pc, #8]	; (8000280 <StartTask03+0x28>)
 8000278:	f000 fd9c 	bl	8000db4 <fnd_output_update_value>
    osDelay(10);
 800027c:	e7f4      	b.n	8000268 <StartTask03+0x10>
 800027e:	bf00      	nop
 8000280:	20002f48 	.word	0x20002f48

08000284 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  uint8_t count = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for (;;)
  {
    osDelay(200);
 8000290:	20c8      	movs	r0, #200	; 0xc8
 8000292:	f003 fb8d 	bl	80039b0 <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8000296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <StartTask04+0x44>)
 800029c:	f001 fd4b 	bl	8001d36 <HAL_GPIO_TogglePin>
    count = (count + 1) % 50;
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	3301      	adds	r3, #1
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <StartTask04+0x48>)
 80002a6:	fb82 1203 	smull	r1, r2, r2, r3
 80002aa:	1111      	asrs	r1, r2, #4
 80002ac:	17da      	asrs	r2, r3, #31
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	2132      	movs	r1, #50	; 0x32
 80002b2:	fb01 f202 	mul.w	r2, r1, r2
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	4613      	mov	r3, r2
 80002ba:	73fb      	strb	r3, [r7, #15]
    if (count == 0)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1e6      	bne.n	8000290 <StartTask04+0xc>
    {
      motor_param_persist_step();
 80002c2:	f008 f837 	bl	8008334 <motor_param_persist_step>
    osDelay(200);
 80002c6:	e7e3      	b.n	8000290 <StartTask04+0xc>
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	51eb851f 	.word	0x51eb851f

080002d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	; 0x28
 80002d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	4b59      	ldr	r3, [pc, #356]	; (800044c <MX_GPIO_Init+0x17c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a58      	ldr	r2, [pc, #352]	; (800044c <MX_GPIO_Init+0x17c>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b56      	ldr	r3, [pc, #344]	; (800044c <MX_GPIO_Init+0x17c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	613b      	str	r3, [r7, #16]
 80002fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	4b53      	ldr	r3, [pc, #332]	; (800044c <MX_GPIO_Init+0x17c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <MX_GPIO_Init+0x17c>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b50      	ldr	r3, [pc, #320]	; (800044c <MX_GPIO_Init+0x17c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0320 	and.w	r3, r3, #32
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	4b4d      	ldr	r3, [pc, #308]	; (800044c <MX_GPIO_Init+0x17c>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a4c      	ldr	r2, [pc, #304]	; (800044c <MX_GPIO_Init+0x17c>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b4a      	ldr	r3, [pc, #296]	; (800044c <MX_GPIO_Init+0x17c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0304 	and.w	r3, r3, #4
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032c:	4b47      	ldr	r3, [pc, #284]	; (800044c <MX_GPIO_Init+0x17c>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a46      	ldr	r2, [pc, #280]	; (800044c <MX_GPIO_Init+0x17c>)
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b44      	ldr	r3, [pc, #272]	; (800044c <MX_GPIO_Init+0x17c>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0308 	and.w	r3, r3, #8
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800034a:	4841      	ldr	r0, [pc, #260]	; (8000450 <MX_GPIO_Init+0x180>)
 800034c:	f001 fcdb 	bl	8001d06 <HAL_GPIO_WritePin>
                          |RLY_05_Pin|RS485_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 8000350:	2200      	movs	r2, #0
 8000352:	f244 4107 	movw	r1, #17415	; 0x4407
 8000356:	483f      	ldr	r0, [pc, #252]	; (8000454 <MX_GPIO_Init+0x184>)
 8000358:	f001 fcd5 	bl	8001d06 <HAL_GPIO_WritePin>
                          |LED_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_02_Pin|BTN_01_Pin|KEY_04_Pin;
 800035c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	4619      	mov	r1, r3
 8000370:	4839      	ldr	r0, [pc, #228]	; (8000458 <MX_GPIO_Init+0x188>)
 8000372:	f001 fb2d 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = KEY_03_Pin|KEY_02_Pin;
 8000376:	2303      	movs	r3, #3
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	4834      	ldr	r0, [pc, #208]	; (800045c <MX_GPIO_Init+0x18c>)
 800038a:	f001 fb21 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_01_Pin|BTN_12_Pin|BTN_11_Pin|BTN_10_Pin;
 800038e:	f649 0301 	movw	r3, #38913	; 0x9801
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4619      	mov	r1, r3
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <MX_GPIO_Init+0x180>)
 80003a4:	f001 fb14 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 80003a8:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80003ac:	617b      	str	r3, [r7, #20]
                          |RLY_05_Pin|RS485_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	4619      	mov	r1, r3
 80003c0:	4823      	ldr	r0, [pc, #140]	; (8000450 <MX_GPIO_Init+0x180>)
 80003c2:	f001 fb05 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 80003c6:	f244 4307 	movw	r3, #17415	; 0x4407
 80003ca:	617b      	str	r3, [r7, #20]
                          |LED_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2302      	movs	r3, #2
 80003d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	4619      	mov	r1, r3
 80003de:	481d      	ldr	r0, [pc, #116]	; (8000454 <MX_GPIO_Init+0x184>)
 80003e0:	f001 faf6 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SIG_Pin;
 80003e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_GPIO_Init+0x190>)
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_SIG_GPIO_Port, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <MX_GPIO_Init+0x184>)
 80003fa:	f001 fae9 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_09_Pin|BTN_08_Pin|BTN_07_Pin|BTN_06_Pin
 80003fe:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000402:	617b      	str	r3, [r7, #20]
                          |BTN_05_Pin|BTN_04_Pin|BTN_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	4810      	ldr	r0, [pc, #64]	; (8000454 <MX_GPIO_Init+0x184>)
 8000414:	f001 fadc 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x194>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
 8000426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <MX_GPIO_Init+0x194>)
 8000430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000432:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2105      	movs	r1, #5
 8000438:	2028      	movs	r0, #40	; 0x28
 800043a:	f000 fe00 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043e:	2028      	movs	r0, #40	; 0x28
 8000440:	f000 fe19 	bl	8001076 <HAL_NVIC_EnableIRQ>

}
 8000444:	bf00      	nop
 8000446:	3728      	adds	r7, #40	; 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	40010c00 	.word	0x40010c00
 8000458:	40011000 	.word	0x40011000
 800045c:	40011400 	.word	0x40011400
 8000460:	10110000 	.word	0x10110000
 8000464:	40010000 	.word	0x40010000

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 fd00 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f80f 	bl	8000492 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f7ff ff2c 	bl	80002d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000478:	f000 f95e 	bl	8000738 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800047c:	f7ff fe68 	bl	8000150 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000480:	f000 f984 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000484:	f003 f984 	bl	8003790 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000488:	f7ff fe98 	bl	80001bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800048c:	f003 f9b2 	bl	80037f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x28>

08000492 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b090      	sub	sp, #64	; 0x40
 8000496:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	2228      	movs	r2, #40	; 0x28
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f008 fe05 	bl	80090b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	2310      	movs	r3, #16
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	2302      	movs	r3, #2
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004c4:	2300      	movs	r3, #0
 80004c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004c8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fc6a 	bl	8001dac <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004de:	f000 f82b 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2302      	movs	r3, #2
 80004e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2102      	movs	r1, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 fed5 	bl	80022ac <HAL_RCC_ClockConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000508:	f000 f816 	bl	8000538 <Error_Handler>
  }
}
 800050c:	bf00      	nop
 800050e:	3740      	adds	r7, #64	; 0x40
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 fcb9 	bl	8000e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40000800 	.word	0x40000800

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 fd5c 	bl	800103e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	201e      	movs	r0, #30
 80005ca:	f000 fd38 	bl	800103e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005ce:	201e      	movs	r0, #30
 80005d0:	f000 fd51 	bl	8001076 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <HAL_InitTick+0xa0>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <HAL_InitTick+0xa0>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_InitTick+0xa0>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ec:	f107 0210 	add.w	r2, r7, #16
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ffd4 	bl	80025a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005fc:	f001 ffaa 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8000600:	4603      	mov	r3, r0
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_InitTick+0xa4>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	0c9b      	lsrs	r3, r3, #18
 8000610:	3b01      	subs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_InitTick+0xa8>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <HAL_InitTick+0xac>)
 8000618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_InitTick+0xa8>)
 800061c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000620:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_InitTick+0xa8>)
 8000624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000626:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_InitTick+0xa8>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_InitTick+0xa8>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <HAL_InitTick+0xa8>)
 8000636:	f002 f803 	bl	8002640 <HAL_TIM_Base_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d104      	bne.n	800064a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <HAL_InitTick+0xa8>)
 8000642:	f002 f855 	bl	80026f0 <HAL_TIM_Base_Start_IT>
 8000646:	4603      	mov	r3, r0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3730      	adds	r7, #48	; 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	20002328 	.word	0x20002328
 8000660:	40000800 	.word	0x40000800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <DMA1_Channel4_IRQHandler+0x10>)
 8000696:	f000 fe67 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200023b4 	.word	0x200023b4

080006a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <DMA1_Channel5_IRQHandler+0x10>)
 80006aa:	f000 fe5d 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200023f8 	.word	0x200023f8

080006b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <DMA1_Channel6_IRQHandler+0x10>)
 80006be:	f000 fe53 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20002370 	.word	0x20002370

080006cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <DMA1_Channel7_IRQHandler+0x10>)
 80006d2:	f000 fe49 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000243c 	.word	0x2000243c

080006e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <TIM4_IRQHandler+0x10>)
 80006e6:	f002 f855 	bl	8002794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20002328 	.word	0x20002328

080006f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <USART1_IRQHandler+0x10>)
 80006fa:	f002 fb31 	bl	8002d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20002480 	.word	0x20002480

08000708 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <USART2_IRQHandler+0x10>)
 800070e:	f002 fb27 	bl	8002d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200024c4 	.word	0x200024c4

0800071c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SIG_Pin);
 8000720:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000724:	f001 fb20 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART1_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000744:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART1_UART_Init+0x4c>)
 8000770:	f002 f9b0 	bl	8002ad4 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f7ff fedd 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20002480 	.word	0x20002480
 8000788:	40013800 	.word	0x40013800

0800078c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f002 f986 	bl	8002ad4 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f7ff feb3 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200024c4 	.word	0x200024c4
 80007dc:	40004400 	.word	0x40004400

080007e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a8c      	ldr	r2, [pc, #560]	; (8000a2c <HAL_UART_MspInit+0x24c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	f040 8087 	bne.w	8000910 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a8a      	ldr	r2, [pc, #552]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b88      	ldr	r3, [pc, #544]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b85      	ldr	r3, [pc, #532]	; (8000a30 <HAL_UART_MspInit+0x250>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a84      	ldr	r2, [pc, #528]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b82      	ldr	r3, [pc, #520]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX1_Pin;
 8000832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4619      	mov	r1, r3
 8000846:	487b      	ldr	r0, [pc, #492]	; (8000a34 <HAL_UART_MspInit+0x254>)
 8000848:	f001 f8c2 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX1_Pin;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	4619      	mov	r1, r3
 8000860:	4874      	ldr	r0, [pc, #464]	; (8000a34 <HAL_UART_MspInit+0x254>)
 8000862:	f001 f8b5 	bl	80019d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000866:	4b74      	ldr	r3, [pc, #464]	; (8000a38 <HAL_UART_MspInit+0x258>)
 8000868:	4a74      	ldr	r2, [pc, #464]	; (8000a3c <HAL_UART_MspInit+0x25c>)
 800086a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800086c:	4b72      	ldr	r3, [pc, #456]	; (8000a38 <HAL_UART_MspInit+0x258>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000872:	4b71      	ldr	r3, [pc, #452]	; (8000a38 <HAL_UART_MspInit+0x258>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000878:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <HAL_UART_MspInit+0x258>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800087e:	4b6e      	ldr	r3, [pc, #440]	; (8000a38 <HAL_UART_MspInit+0x258>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000884:	4b6c      	ldr	r3, [pc, #432]	; (8000a38 <HAL_UART_MspInit+0x258>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800088a:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <HAL_UART_MspInit+0x258>)
 800088c:	2220      	movs	r2, #32
 800088e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000890:	4b69      	ldr	r3, [pc, #420]	; (8000a38 <HAL_UART_MspInit+0x258>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000896:	4868      	ldr	r0, [pc, #416]	; (8000a38 <HAL_UART_MspInit+0x258>)
 8000898:	f000 fbfc 	bl	8001094 <HAL_DMA_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008a2:	f7ff fe49 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a63      	ldr	r2, [pc, #396]	; (8000a38 <HAL_UART_MspInit+0x258>)
 80008aa:	639a      	str	r2, [r3, #56]	; 0x38
 80008ac:	4a62      	ldr	r2, [pc, #392]	; (8000a38 <HAL_UART_MspInit+0x258>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008b2:	4b63      	ldr	r3, [pc, #396]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008b4:	4a63      	ldr	r2, [pc, #396]	; (8000a44 <HAL_UART_MspInit+0x264>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b8:	4b61      	ldr	r3, [pc, #388]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008ba:	2210      	movs	r2, #16
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008c4:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ca:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008d6:	4b5a      	ldr	r3, [pc, #360]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008dc:	4b58      	ldr	r3, [pc, #352]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008e2:	4857      	ldr	r0, [pc, #348]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008e4:	f000 fbd6 	bl	8001094 <HAL_DMA_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008ee:	f7ff fe23 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a52      	ldr	r2, [pc, #328]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
 80008f8:	4a51      	ldr	r2, [pc, #324]	; (8000a40 <HAL_UART_MspInit+0x260>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	2025      	movs	r0, #37	; 0x25
 8000904:	f000 fb9b 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000908:	2025      	movs	r0, #37	; 0x25
 800090a:	f000 fbb4 	bl	8001076 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800090e:	e089      	b.n	8000a24 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a4c      	ldr	r2, [pc, #304]	; (8000a48 <HAL_UART_MspInit+0x268>)
 8000916:	4293      	cmp	r3, r2
 8000918:	f040 8084 	bne.w	8000a24 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800091c:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <HAL_UART_MspInit+0x250>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4a43      	ldr	r2, [pc, #268]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000926:	61d3      	str	r3, [r2, #28]
 8000928:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <HAL_UART_MspInit+0x250>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <HAL_UART_MspInit+0x250>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <HAL_UART_MspInit+0x250>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX2_Pin;
 800094c:	2304      	movs	r3, #4
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX2_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4619      	mov	r1, r3
 800095e:	4835      	ldr	r0, [pc, #212]	; (8000a34 <HAL_UART_MspInit+0x254>)
 8000960:	f001 f836 	bl	80019d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX2_Pin;
 8000964:	2308      	movs	r3, #8
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX2_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4619      	mov	r1, r3
 8000976:	482f      	ldr	r0, [pc, #188]	; (8000a34 <HAL_UART_MspInit+0x254>)
 8000978:	f001 f82a 	bl	80019d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 800097e:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <HAL_UART_MspInit+0x270>)
 8000980:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000988:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800098e:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 80009a2:	2220      	movs	r2, #32
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009ac:	4827      	ldr	r0, [pc, #156]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 80009ae:	f000 fb71 	bl	8001094 <HAL_DMA_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80009b8:	f7ff fdbe 	bl	8000538 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_UART_MspInit+0x26c>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <HAL_UART_MspInit+0x278>)
 80009cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009d0:	2210      	movs	r2, #16
 80009d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009f8:	4816      	ldr	r0, [pc, #88]	; (8000a54 <HAL_UART_MspInit+0x274>)
 80009fa:	f000 fb4b 	bl	8001094 <HAL_DMA_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a04:	f7ff fd98 	bl	8000538 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <HAL_UART_MspInit+0x274>)
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x274>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2105      	movs	r1, #5
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f000 fb10 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a1e:	2026      	movs	r0, #38	; 0x26
 8000a20:	f000 fb29 	bl	8001076 <HAL_NVIC_EnableIRQ>
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40013800 	.word	0x40013800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800
 8000a38:	200023f8 	.word	0x200023f8
 8000a3c:	40020058 	.word	0x40020058
 8000a40:	200023b4 	.word	0x200023b4
 8000a44:	40020044 	.word	0x40020044
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	20002370 	.word	0x20002370
 8000a50:	4002006c 	.word	0x4002006c
 8000a54:	2000243c 	.word	0x2000243c
 8000a58:	40020080 	.word	0x40020080

08000a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	; (8000a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	; (8000aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a82:	f7ff fe53 	bl	800072c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f008 fadf 	bl	8009048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff fced 	bl	8000468 <main>
  bx lr
 8000a8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000a98:	080095c0 	.word	0x080095c0
  ldr r2, =_sbss
 8000a9c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000aa0:	200030c8 	.word	0x200030c8

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>
	...

08000aa8 <fnd_com_modbus_rtu_init>:
modbus_regs sys_regs;
modbus_slave slaves[2];
int16_t relay[8];

void fnd_com_modbus_rtu_init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    slave_init(&slaves[0], &port[0], 1, &sys_regs);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <fnd_com_modbus_rtu_init+0x20>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4906      	ldr	r1, [pc, #24]	; (8000acc <fnd_com_modbus_rtu_init+0x24>)
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <fnd_com_modbus_rtu_init+0x28>)
 8000ab4:	f007 f8e6 	bl	8007c84 <slave_init>
    slave_init(&slaves[1], &port[1], 2, &sys_regs);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <fnd_com_modbus_rtu_init+0x20>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	4905      	ldr	r1, [pc, #20]	; (8000ad4 <fnd_com_modbus_rtu_init+0x2c>)
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <fnd_com_modbus_rtu_init+0x30>)
 8000ac0:	f007 f8e0 	bl	8007c84 <slave_init>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20002948 	.word	0x20002948
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20002508 	.word	0x20002508
 8000ad4:	20000010 	.word	0x20000010
 8000ad8:	20002728 	.word	0x20002728

08000adc <HAL_UART_TxCpltCallback>:
        slave_uart_idle(&slaves[1]);
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_UART_TxCpltCallback+0x3c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d104      	bne.n	8000afa <HAL_UART_TxCpltCallback+0x1e>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <HAL_UART_TxCpltCallback+0x3c>)
 8000af4:	f007 f8fe 	bl	8007cf4 <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 8000af8:	e00a      	b.n	8000b10 <HAL_UART_TxCpltCallback+0x34>
    else if (huart == slaves[1].uart_port->uart)
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_UART_TxCpltCallback+0x3c>)
 8000afc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d103      	bne.n	8000b10 <HAL_UART_TxCpltCallback+0x34>
        slave_set_tx_rx(&slaves[1], rx);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <HAL_UART_TxCpltCallback+0x40>)
 8000b0c:	f007 f8f2 	bl	8007cf4 <slave_set_tx_rx>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20002508 	.word	0x20002508
 8000b1c:	20002728 	.word	0x20002728

08000b20 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8000b26:	f007 f8fe 	bl	8007d26 <slave_wait_request>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20002508 	.word	0x20002508

08000b34 <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <fnd_com_modbus_rtu_slave2_wait+0x10>)
 8000b3a:	f007 f8f4 	bl	8007d26 <slave_wait_request>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20002728 	.word	0x20002728

08000b48 <ee_init>:
#define _EE_PAGE_OR_SECTOR PAGE

uint8_t ee_ram[_EE_USE_RAM_BYTE];

bool ee_init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 f83d 	bl	8000bd0 <ee_read>
 8000b56:	4603      	mov	r3, r0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <ee_format>:

bool ee_format(bool keepRamData)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    uint32_t error;
    HAL_FLASH_Unlock();
 8000b66:	f000 fda3 	bl	80016b0 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef flashErase;

    flashErase.NbPages = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
    flashErase.PageAddress = _EE_ADDR_INUSE;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <ee_format+0x6c>)
 8000b70:	617b      	str	r3, [r7, #20]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
    flashErase.Banks = _EE_FLASH_BANK;
 8000b76:	2301      	movs	r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
    if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8000b7a:	f107 021c 	add.w	r2, r7, #28
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fe7b 	bl	8001880 <HAL_FLASHEx_Erase>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d114      	bne.n	8000bba <ee_format+0x5e>
    {
        HAL_FLASH_Lock();
 8000b90:	f000 fdb4 	bl	80016fc <HAL_FLASH_Lock>
        if (error != 0xFFFFFFFF)
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9a:	d001      	beq.n	8000ba0 <ee_format+0x44>
            return false;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e00f      	b.n	8000bc0 <ee_format+0x64>
        else
        {
            if (keepRamData == false)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f083 0301 	eor.w	r3, r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d004      	beq.n	8000bb6 <ee_format+0x5a>
            {
                memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	21ff      	movs	r1, #255	; 0xff
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <ee_format+0x70>)
 8000bb2:	f008 fa7d 	bl	80090b0 <memset>
            }
            return true;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e002      	b.n	8000bc0 <ee_format+0x64>
        }
    }
    HAL_FLASH_Lock();
 8000bba:	f000 fd9f 	bl	80016fc <HAL_FLASH_Lock>
    return false;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	0800f000 	.word	0x0800f000
 8000bcc:	20002f58 	.word	0x20002f58

08000bd0 <ee_read>:

bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
    if ((startVirtualAddress + len) > _EE_SIZE)
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4413      	add	r3, r2
 8000be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be6:	d901      	bls.n	8000bec <ee_read+0x1c>
    {
        return false;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e02a      	b.n	8000c42 <ee_read+0x72>
    }
    for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e020      	b.n	8000c34 <ee_read+0x64>
    {
        if (data != NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00b      	beq.n	8000c10 <ee_read+0x40>
        {
            *data = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000bfe:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	701a      	strb	r2, [r3, #0]
            data++;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
        }
        if (i < _EE_USE_RAM_BYTE)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b7f      	cmp	r3, #127	; 0x7f
 8000c14:	d80b      	bhi.n	8000c2e <ee_read+0x5e>
            ee_ram[i] = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c1c:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2d9      	uxtb	r1, r3
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <ee_read+0x7c>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	4413      	add	r3, r2
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3d8      	bcc.n	8000bf2 <ee_read+0x22>
    }
    return true;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20002f58 	.word	0x20002f58

08000c50 <ee_write>:

bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
    if ((startVirtualAddress + len) > _EE_SIZE)
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c66:	d901      	bls.n	8000c6c <ee_write+0x1c>
    {
        return false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e033      	b.n	8000cd4 <ee_write+0x84>
    }
    if (data == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <ee_write+0x26>
    {
        return false;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e02e      	b.n	8000cd4 <ee_write+0x84>
    }
    HAL_FLASH_Unlock();
 8000c76:	f000 fd1b 	bl	80016b0 <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < len; i += 2)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e022      	b.n	8000cc6 <ee_write+0x76>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i + 1] << 8))) != HAL_OK)
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000c8a:	f501 4170 	add.w	r1, r1, #61440	; 0xf000
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	4303      	orrs	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fc8f 	bl	80015d0 <HAL_FLASH_Program>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <ee_write+0x70>
        {
            HAL_FLASH_Lock();
 8000cb8:	f000 fd20 	bl	80016fc <HAL_FLASH_Lock>
            return false;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e009      	b.n	8000cd4 <ee_write+0x84>
    for (uint32_t i = 0; i < len; i += 2)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3d8      	bcc.n	8000c80 <ee_write+0x30>
        }
    }
    HAL_FLASH_Lock();
 8000cce:	f000 fd15 	bl	80016fc <HAL_FLASH_Lock>
    return true;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <ee_commit>:
    memcpy(&ee_ram[startVirtualAddress], data, len);
    return true;
}

bool ee_commit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    if (ee_format(true) == false)
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff ff3b 	bl	8000b5c <ee_format>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f083 0301 	eor.w	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <ee_commit+0x1a>
    {
        return false;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e005      	b.n	8000d02 <ee_commit+0x26>
    }
    return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <ee_commit+0x2c>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ffa8 	bl	8000c50 <ee_write>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20002f58 	.word	0x20002f58

08000d0c <fnd_input_update_value>:
#include "fnd_input.h"
#include "fnd_com.h"

void fnd_input_update_value(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
    uint8_t btn_values[12];
    fnd_input_gpio_read_btns(btn_values);
 8000d12:	463b      	mov	r3, r7
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f81f 	bl	8000d58 <fnd_input_gpio_read_btns>

    for (uint8_t i = 0; i < (INPUT_BTN_END - INPUT_BTN_START + 1); i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e010      	b.n	8000d42 <fnd_input_update_value+0x36>
    {
        sys_regs.inputs[INPUT_BTN_START + i] = btn_values[i];
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f107 0210 	add.w	r2, r7, #16
 8000d26:	4413      	add	r3, r2
 8000d28:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	3364      	adds	r3, #100	; 0x64
 8000d30:	b211      	sxth	r1, r2
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <fnd_input_update_value+0x48>)
 8000d34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (INPUT_BTN_END - INPUT_BTN_START + 1); i++)
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	2b09      	cmp	r3, #9
 8000d46:	d9eb      	bls.n	8000d20 <fnd_input_update_value+0x14>
    }
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20002948 	.word	0x20002948

08000d58 <fnd_input_gpio_read_btns>:
        values[i] = (HAL_GPIO_ReadPin(key_port[i], key_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
    }
}

void fnd_input_gpio_read_btns(uint8_t *values)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 12; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e019      	b.n	8000d9a <fnd_input_gpio_read_btns+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(btn_port[i], btn_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <fnd_input_gpio_read_btns+0x54>)
 8000d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	490f      	ldr	r1, [pc, #60]	; (8000db0 <fnd_input_gpio_read_btns+0x58>)
 8000d72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d76:	4619      	mov	r1, r3
 8000d78:	4610      	mov	r0, r2
 8000d7a:	f000 ffad 	bl	8001cd8 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	bf0c      	ite	eq
 8000d84:	2301      	moveq	r3, #1
 8000d86:	2300      	movne	r3, #0
 8000d88:	b2d9      	uxtb	r1, r3
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	4413      	add	r3, r2
 8000d90:	460a      	mov	r2, r1
 8000d92:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 12; i++)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	2b0b      	cmp	r3, #11
 8000d9e:	d9e2      	bls.n	8000d66 <fnd_input_gpio_read_btns+0xe>
    }
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000001c 	.word	0x2000001c
 8000db0:	2000004c 	.word	0x2000004c

08000db4 <fnd_output_update_value>:
#include "fnd_output.h"
#include "fnd_com.h"

void fnd_output_update_value(int16_t *values)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    uint8_t relay_out_values[8];
    for (uint8_t i = 0; i < (INPUT_RLY_CTRL_END - INPUT_RLY_CTRL_START + 1); i++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	75fb      	strb	r3, [r7, #23]
 8000dc0:	e01d      	b.n	8000dfe <fnd_output_update_value+0x4a>
    {
        sys_regs.inputs[INPUT_RLY_CTRL_START + i] = values[i];
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	441a      	add	r2, r3
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	3396      	adds	r3, #150	; 0x96
 8000dce:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000dd2:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <fnd_output_update_value+0x64>)
 8000dd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        relay_out_values[i] = (uint8_t)sys_regs.inputs[INPUT_RLY_CTRL_START + i];
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	3396      	adds	r3, #150	; 0x96
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <fnd_output_update_value+0x64>)
 8000de2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000de6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000dea:	7dfb      	ldrb	r3, [r7, #23]
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f107 0118 	add.w	r1, r7, #24
 8000df2:	440b      	add	r3, r1
 8000df4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < (INPUT_RLY_CTRL_END - INPUT_RLY_CTRL_START + 1); i++)
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	75fb      	strb	r3, [r7, #23]
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	2b07      	cmp	r3, #7
 8000e02:	d9de      	bls.n	8000dc2 <fnd_output_update_value+0xe>
    }
    fnd_output_gpio_write_relays(relay_out_values);
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f807 	bl	8000e1c <fnd_output_gpio_write_relays>
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20002948 	.word	0x20002948

08000e1c <fnd_output_gpio_write_relays>:

GPIO_TypeDef *relay_port[8] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port, RLY_07_GPIO_Port, RLY_08_GPIO_Port};
uint16_t relay_pin[8] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin, RLY_07_Pin, RLY_08_Pin};

void fnd_output_gpio_write_relays(uint8_t *values)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e016      	b.n	8000e58 <fnd_output_gpio_write_relays+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <fnd_output_gpio_write_relays+0x4c>)
 8000e2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <fnd_output_gpio_write_relays+0x50>)
 8000e36:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f000 ff5a 	bl	8001d06 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	d9e5      	bls.n	8000e2a <fnd_output_gpio_write_relays+0xe>
    }
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000064 	.word	0x20000064
 8000e6c:	20000084 	.word	0x20000084

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x28>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x28>)
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f8d1 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f7ff fb94 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fb5a 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x20>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000098 	.word	0x20000098
 8000ebc:	20002fd8 	.word	0x20002fd8

08000ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	20002fd8 	.word	0x20002fd8

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <__NVIC_EnableIRQ+0x34>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff4f 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff64 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ffb2 	bl	8000fc4 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff81 	bl	8000f70 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff57 	bl	8000f38 <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e043      	b.n	8001132 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_DMA_Init+0xa8>)
 80010b2:	4413      	add	r3, r2
 80010b4:	4a22      	ldr	r2, [pc, #136]	; (8001140 <HAL_DMA_Init+0xac>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	009a      	lsls	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_DMA_Init+0xb0>)
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2202      	movs	r2, #2
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	bffdfff8 	.word	0xbffdfff8
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_DMA_Start_IT+0x20>
 8001164:	2302      	movs	r3, #2
 8001166:	e04a      	b.n	80011fe <HAL_DMA_Start_IT+0xb6>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001176:	2b01      	cmp	r3, #1
 8001178:	d13a      	bne.n	80011f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2202      	movs	r2, #2
 800117e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 f9e8 	bl	8001574 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 020e 	orr.w	r2, r2, #14
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e00f      	b.n	80011de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0204 	bic.w	r2, r2, #4
 80011cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f042 020a 	orr.w	r2, r2, #10
 80011dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0201 	orr.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e005      	b.n	80011fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011f8:	2302      	movs	r3, #2
 80011fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001218:	2b02      	cmp	r3, #2
 800121a:	d008      	beq.n	800122e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e020      	b.n	8001270 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 020e 	bic.w	r2, r2, #14
 800123c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
	...

0800127c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800128e:	2b02      	cmp	r3, #2
 8001290:	d005      	beq.n	800129e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2204      	movs	r2, #4
 8001296:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e051      	b.n	8001342 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_DMA_Abort_IT+0xd0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d029      	beq.n	800131c <HAL_DMA_Abort_IT+0xa0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a20      	ldr	r2, [pc, #128]	; (8001350 <HAL_DMA_Abort_IT+0xd4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d022      	beq.n	8001318 <HAL_DMA_Abort_IT+0x9c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_DMA_Abort_IT+0xd8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d01a      	beq.n	8001312 <HAL_DMA_Abort_IT+0x96>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_DMA_Abort_IT+0xdc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d012      	beq.n	800130c <HAL_DMA_Abort_IT+0x90>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_DMA_Abort_IT+0xe0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00a      	beq.n	8001306 <HAL_DMA_Abort_IT+0x8a>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <HAL_DMA_Abort_IT+0xe4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d102      	bne.n	8001300 <HAL_DMA_Abort_IT+0x84>
 80012fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012fe:	e00e      	b.n	800131e <HAL_DMA_Abort_IT+0xa2>
 8001300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001304:	e00b      	b.n	800131e <HAL_DMA_Abort_IT+0xa2>
 8001306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130a:	e008      	b.n	800131e <HAL_DMA_Abort_IT+0xa2>
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	e005      	b.n	800131e <HAL_DMA_Abort_IT+0xa2>
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	e002      	b.n	800131e <HAL_DMA_Abort_IT+0xa2>
 8001318:	2310      	movs	r3, #16
 800131a:	e000      	b.n	800131e <HAL_DMA_Abort_IT+0xa2>
 800131c:	2301      	movs	r3, #1
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_DMA_Abort_IT+0xe8>)
 8001320:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
    } 
  }
  return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020008 	.word	0x40020008
 8001350:	4002001c 	.word	0x4002001c
 8001354:	40020030 	.word	0x40020030
 8001358:	40020044 	.word	0x40020044
 800135c:	40020058 	.word	0x40020058
 8001360:	4002006c 	.word	0x4002006c
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2204      	movs	r2, #4
 8001386:	409a      	lsls	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d04f      	beq.n	8001430 <HAL_DMA_IRQHandler+0xc8>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d04a      	beq.n	8001430 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a66      	ldr	r2, [pc, #408]	; (8001558 <HAL_DMA_IRQHandler+0x1f0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d029      	beq.n	8001416 <HAL_DMA_IRQHandler+0xae>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a65      	ldr	r2, [pc, #404]	; (800155c <HAL_DMA_IRQHandler+0x1f4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d022      	beq.n	8001412 <HAL_DMA_IRQHandler+0xaa>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_DMA_IRQHandler+0x1f8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01a      	beq.n	800140c <HAL_DMA_IRQHandler+0xa4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a62      	ldr	r2, [pc, #392]	; (8001564 <HAL_DMA_IRQHandler+0x1fc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d012      	beq.n	8001406 <HAL_DMA_IRQHandler+0x9e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a60      	ldr	r2, [pc, #384]	; (8001568 <HAL_DMA_IRQHandler+0x200>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00a      	beq.n	8001400 <HAL_DMA_IRQHandler+0x98>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a5f      	ldr	r2, [pc, #380]	; (800156c <HAL_DMA_IRQHandler+0x204>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d102      	bne.n	80013fa <HAL_DMA_IRQHandler+0x92>
 80013f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f8:	e00e      	b.n	8001418 <HAL_DMA_IRQHandler+0xb0>
 80013fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013fe:	e00b      	b.n	8001418 <HAL_DMA_IRQHandler+0xb0>
 8001400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001404:	e008      	b.n	8001418 <HAL_DMA_IRQHandler+0xb0>
 8001406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140a:	e005      	b.n	8001418 <HAL_DMA_IRQHandler+0xb0>
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	e002      	b.n	8001418 <HAL_DMA_IRQHandler+0xb0>
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	e000      	b.n	8001418 <HAL_DMA_IRQHandler+0xb0>
 8001416:	2304      	movs	r3, #4
 8001418:	4a55      	ldr	r2, [pc, #340]	; (8001570 <HAL_DMA_IRQHandler+0x208>)
 800141a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 8094 	beq.w	800154e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800142e:	e08e      	b.n	800154e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	2202      	movs	r2, #2
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d056      	beq.n	80014ee <HAL_DMA_IRQHandler+0x186>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d051      	beq.n	80014ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10b      	bne.n	8001470 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020a 	bic.w	r2, r2, #10
 8001466:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a38      	ldr	r2, [pc, #224]	; (8001558 <HAL_DMA_IRQHandler+0x1f0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d029      	beq.n	80014ce <HAL_DMA_IRQHandler+0x166>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_DMA_IRQHandler+0x1f4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <HAL_DMA_IRQHandler+0x162>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a35      	ldr	r2, [pc, #212]	; (8001560 <HAL_DMA_IRQHandler+0x1f8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x15c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a34      	ldr	r2, [pc, #208]	; (8001564 <HAL_DMA_IRQHandler+0x1fc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d012      	beq.n	80014be <HAL_DMA_IRQHandler+0x156>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_DMA_IRQHandler+0x200>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00a      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x150>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a31      	ldr	r2, [pc, #196]	; (800156c <HAL_DMA_IRQHandler+0x204>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d102      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x14a>
 80014ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b0:	e00e      	b.n	80014d0 <HAL_DMA_IRQHandler+0x168>
 80014b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b6:	e00b      	b.n	80014d0 <HAL_DMA_IRQHandler+0x168>
 80014b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014bc:	e008      	b.n	80014d0 <HAL_DMA_IRQHandler+0x168>
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	e005      	b.n	80014d0 <HAL_DMA_IRQHandler+0x168>
 80014c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c8:	e002      	b.n	80014d0 <HAL_DMA_IRQHandler+0x168>
 80014ca:	2320      	movs	r3, #32
 80014cc:	e000      	b.n	80014d0 <HAL_DMA_IRQHandler+0x168>
 80014ce:	2302      	movs	r3, #2
 80014d0:	4a27      	ldr	r2, [pc, #156]	; (8001570 <HAL_DMA_IRQHandler+0x208>)
 80014d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d034      	beq.n	800154e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014ec:	e02f      	b.n	800154e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2208      	movs	r2, #8
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d028      	beq.n	8001550 <HAL_DMA_IRQHandler+0x1e8>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d023      	beq.n	8001550 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 020e 	bic.w	r2, r2, #14
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
    }
  }
  return;
 800154e:	bf00      	nop
 8001550:	bf00      	nop
}
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40020008 	.word	0x40020008
 800155c:	4002001c 	.word	0x4002001c
 8001560:	40020030 	.word	0x40020030
 8001564:	40020044 	.word	0x40020044
 8001568:	40020058 	.word	0x40020058
 800156c:	4002006c 	.word	0x4002006c
 8001570:	40020000 	.word	0x40020000

08001574 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d108      	bne.n	80015b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015b2:	e007      	b.n	80015c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	60da      	str	r2, [r3, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_FLASH_Program+0xd8>)
 80015ec:	7e1b      	ldrb	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_FLASH_Program+0x26>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e054      	b.n	80016a0 <HAL_FLASH_Program+0xd0>
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_FLASH_Program+0xd8>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001600:	f000 f8a8 	bl	8001754 <FLASH_WaitForLastOperation>
 8001604:	4603      	mov	r3, r0
 8001606:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d144      	bne.n	8001698 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d102      	bne.n	800161a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001614:	2301      	movs	r3, #1
 8001616:	757b      	strb	r3, [r7, #21]
 8001618:	e007      	b.n	800162a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d102      	bne.n	8001626 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001620:	2302      	movs	r3, #2
 8001622:	757b      	strb	r3, [r7, #21]
 8001624:	e001      	b.n	800162a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001626:	2304      	movs	r3, #4
 8001628:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800162a:	2300      	movs	r3, #0
 800162c:	75bb      	strb	r3, [r7, #22]
 800162e:	e02d      	b.n	800168c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001630:	7dbb      	ldrb	r3, [r7, #22]
 8001632:	005a      	lsls	r2, r3, #1
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	eb02 0c03 	add.w	ip, r2, r3
 800163a:	7dbb      	ldrb	r3, [r7, #22]
 800163c:	0119      	lsls	r1, r3, #4
 800163e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001642:	f1c1 0620 	rsb	r6, r1, #32
 8001646:	f1a1 0020 	sub.w	r0, r1, #32
 800164a:	fa22 f401 	lsr.w	r4, r2, r1
 800164e:	fa03 f606 	lsl.w	r6, r3, r6
 8001652:	4334      	orrs	r4, r6
 8001654:	fa23 f000 	lsr.w	r0, r3, r0
 8001658:	4304      	orrs	r4, r0
 800165a:	fa23 f501 	lsr.w	r5, r3, r1
 800165e:	b2a3      	uxth	r3, r4
 8001660:	4619      	mov	r1, r3
 8001662:	4660      	mov	r0, ip
 8001664:	f000 f85a 	bl	800171c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001668:	f24c 3050 	movw	r0, #50000	; 0xc350
 800166c:	f000 f872 	bl	8001754 <FLASH_WaitForLastOperation>
 8001670:	4603      	mov	r3, r0
 8001672:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_FLASH_Program+0xdc>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_FLASH_Program+0xdc>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d107      	bne.n	8001696 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001686:	7dbb      	ldrb	r3, [r7, #22]
 8001688:	3301      	adds	r3, #1
 800168a:	75bb      	strb	r3, [r7, #22]
 800168c:	7dba      	ldrb	r2, [r7, #22]
 800168e:	7d7b      	ldrb	r3, [r7, #21]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3cd      	bcc.n	8001630 <HAL_FLASH_Program+0x60>
 8001694:	e000      	b.n	8001698 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001696:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_FLASH_Program+0xd8>)
 800169a:	2200      	movs	r2, #0
 800169c:	761a      	strb	r2, [r3, #24]

  return status;
 800169e:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a8:	20002fe0 	.word	0x20002fe0
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_FLASH_Unlock+0x40>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_FLASH_Unlock+0x40>)
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_FLASH_Unlock+0x44>)
 80016ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_FLASH_Unlock+0x40>)
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_FLASH_Unlock+0x48>)
 80016d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_FLASH_Unlock+0x40>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80016e2:	79fb      	ldrb	r3, [r7, #7]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40022000 	.word	0x40022000
 80016f4:	45670123 	.word	0x45670123
 80016f8:	cdef89ab 	.word	0xcdef89ab

080016fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_FLASH_Lock+0x1c>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_FLASH_Lock+0x1c>)
 8001706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800170a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000

0800171c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <FLASH_Program_HalfWord+0x30>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <FLASH_Program_HalfWord+0x34>)
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	4a07      	ldr	r2, [pc, #28]	; (8001750 <FLASH_Program_HalfWord+0x34>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	801a      	strh	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20002fe0 	.word	0x20002fe0
 8001750:	40022000 	.word	0x40022000

08001754 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fbb0 	bl	8000ec0 <HAL_GetTick>
 8001760:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001762:	e010      	b.n	8001786 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d00c      	beq.n	8001786 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <FLASH_WaitForLastOperation+0x2e>
 8001772:	f7ff fba5 	bl	8000ec0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d201      	bcs.n	8001786 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e025      	b.n	80017d2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <FLASH_WaitForLastOperation+0x88>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1e8      	bne.n	8001764 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <FLASH_WaitForLastOperation+0x88>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <FLASH_WaitForLastOperation+0x88>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <FLASH_WaitForLastOperation+0x88>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10b      	bne.n	80017c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <FLASH_WaitForLastOperation+0x88>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d105      	bne.n	80017c8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <FLASH_WaitForLastOperation+0x88>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80017c8:	f000 f80a 	bl	80017e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000

080017e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <FLASH_SetErrorCode+0x98>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <FLASH_SetErrorCode+0x9c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <FLASH_SetErrorCode+0x9c>)
 8001800:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <FLASH_SetErrorCode+0x98>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <FLASH_SetErrorCode+0x9c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	4a17      	ldr	r2, [pc, #92]	; (800187c <FLASH_SetErrorCode+0x9c>)
 8001820:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <FLASH_SetErrorCode+0x98>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <FLASH_SetErrorCode+0x9c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <FLASH_SetErrorCode+0x9c>)
 8001840:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <FLASH_SetErrorCode+0x98>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <FLASH_SetErrorCode+0x98>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f240 1201 	movw	r2, #257	; 0x101
 8001854:	4293      	cmp	r3, r2
 8001856:	d106      	bne.n	8001866 <FLASH_SetErrorCode+0x86>
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <FLASH_SetErrorCode+0x98>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <FLASH_SetErrorCode+0x98>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	61d3      	str	r3, [r2, #28]
}  
 8001864:	e002      	b.n	800186c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <FLASH_SetErrorCode+0x98>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	60d3      	str	r3, [r2, #12]
}  
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000
 800187c:	20002fe0 	.word	0x20002fe0

08001880 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_FLASHEx_Erase+0xd0>)
 8001894:	7e1b      	ldrb	r3, [r3, #24]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_FLASHEx_Erase+0x1e>
 800189a:	2302      	movs	r3, #2
 800189c:	e053      	b.n	8001946 <HAL_FLASHEx_Erase+0xc6>
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_FLASHEx_Erase+0xd0>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d116      	bne.n	80018da <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018b0:	f7ff ff50 	bl	8001754 <FLASH_WaitForLastOperation>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d141      	bne.n	800193e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f000 f84c 	bl	8001958 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018c4:	f7ff ff46 	bl	8001754 <FLASH_WaitForLastOperation>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_FLASHEx_Erase+0xd4>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_FLASHEx_Erase+0xd4>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6113      	str	r3, [r2, #16]
 80018d8:	e031      	b.n	800193e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018de:	f7ff ff39 	bl	8001754 <FLASH_WaitForLastOperation>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d12a      	bne.n	800193e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295
 80018ee:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	e019      	b.n	800192c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80018f8:	68b8      	ldr	r0, [r7, #8]
 80018fa:	f000 f849 	bl	8001990 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001902:	f7ff ff27 	bl	8001754 <FLASH_WaitForLastOperation>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_FLASHEx_Erase+0xd4>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_FLASHEx_Erase+0xd4>)
 8001910:	f023 0302 	bic.w	r3, r3, #2
 8001914:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	601a      	str	r2, [r3, #0]
            break;
 8001922:	e00c      	b.n	800193e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	029a      	lsls	r2, r3, #10
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	d3dc      	bcc.n	80018f8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_FLASHEx_Erase+0xd0>)
 8001940:	2200      	movs	r2, #0
 8001942:	761a      	strb	r2, [r3, #24]

  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20002fe0 	.word	0x20002fe0
 8001954:	40022000 	.word	0x40022000

08001958 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <FLASH_MassErase+0x30>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <FLASH_MassErase+0x34>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <FLASH_MassErase+0x34>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <FLASH_MassErase+0x34>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <FLASH_MassErase+0x34>)
 8001978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20002fe0 	.word	0x20002fe0
 800198c:	40022000 	.word	0x40022000

08001990 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <FLASH_PageErase+0x38>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <FLASH_PageErase+0x3c>)
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <FLASH_PageErase+0x3c>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <FLASH_PageErase+0x3c>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <FLASH_PageErase+0x3c>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <FLASH_PageErase+0x3c>)
 80019b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20002fe0 	.word	0x20002fe0
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b08b      	sub	sp, #44	; 0x2c
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e169      	b.n	8001cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e4:	2201      	movs	r2, #1
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8158 	bne.w	8001cb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a9a      	ldr	r2, [pc, #616]	; (8001c70 <HAL_GPIO_Init+0x2a0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d05e      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a0c:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_GPIO_Init+0x2a0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d875      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a12:	4a98      	ldr	r2, [pc, #608]	; (8001c74 <HAL_GPIO_Init+0x2a4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d058      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a18:	4a96      	ldr	r2, [pc, #600]	; (8001c74 <HAL_GPIO_Init+0x2a4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d86f      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a1e:	4a96      	ldr	r2, [pc, #600]	; (8001c78 <HAL_GPIO_Init+0x2a8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d052      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a24:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_GPIO_Init+0x2a8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d869      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a2a:	4a94      	ldr	r2, [pc, #592]	; (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d04c      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a30:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d863      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a36:	4a92      	ldr	r2, [pc, #584]	; (8001c80 <HAL_GPIO_Init+0x2b0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d046      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a3c:	4a90      	ldr	r2, [pc, #576]	; (8001c80 <HAL_GPIO_Init+0x2b0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d85d      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d82a      	bhi.n	8001a9c <HAL_GPIO_Init+0xcc>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d859      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a4a:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <HAL_GPIO_Init+0x80>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001acb 	.word	0x08001acb
 8001a54:	08001aa5 	.word	0x08001aa5
 8001a58:	08001ab7 	.word	0x08001ab7
 8001a5c:	08001af9 	.word	0x08001af9
 8001a60:	08001aff 	.word	0x08001aff
 8001a64:	08001aff 	.word	0x08001aff
 8001a68:	08001aff 	.word	0x08001aff
 8001a6c:	08001aff 	.word	0x08001aff
 8001a70:	08001aff 	.word	0x08001aff
 8001a74:	08001aff 	.word	0x08001aff
 8001a78:	08001aff 	.word	0x08001aff
 8001a7c:	08001aff 	.word	0x08001aff
 8001a80:	08001aff 	.word	0x08001aff
 8001a84:	08001aff 	.word	0x08001aff
 8001a88:	08001aff 	.word	0x08001aff
 8001a8c:	08001aff 	.word	0x08001aff
 8001a90:	08001aff 	.word	0x08001aff
 8001a94:	08001aad 	.word	0x08001aad
 8001a98:	08001ac1 	.word	0x08001ac1
 8001a9c:	4a79      	ldr	r2, [pc, #484]	; (8001c84 <HAL_GPIO_Init+0x2b4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aa2:	e02c      	b.n	8001afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e029      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e024      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	3308      	adds	r3, #8
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e01f      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	330c      	adds	r3, #12
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e01a      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e013      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	611a      	str	r2, [r3, #16]
          break;
 8001aea:	e009      	b.n	8001b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aec:	2308      	movs	r3, #8
 8001aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	615a      	str	r2, [r3, #20]
          break;
 8001af6:	e003      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          break;
 8001afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d801      	bhi.n	8001b0a <HAL_GPIO_Init+0x13a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_Init+0x13e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d802      	bhi.n	8001b1c <HAL_GPIO_Init+0x14c>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x152>
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	3b08      	subs	r3, #8
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	210f      	movs	r1, #15
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	6a39      	ldr	r1, [r7, #32]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80b1 	beq.w	8001cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a4c      	ldr	r2, [pc, #304]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b68:	4a48      	ldr	r2, [pc, #288]	; (8001c8c <HAL_GPIO_Init+0x2bc>)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d013      	beq.n	8001bbc <HAL_GPIO_Init+0x1ec>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_GPIO_Init+0x2c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_GPIO_Init+0x1e8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a3e      	ldr	r2, [pc, #248]	; (8001c98 <HAL_GPIO_Init+0x2c8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a3d      	ldr	r2, [pc, #244]	; (8001c9c <HAL_GPIO_Init+0x2cc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_GPIO_Init+0x1e0>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bce:	492f      	ldr	r1, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x2bc>)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4928      	ldr	r1, [pc, #160]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4922      	ldr	r1, [pc, #136]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	491e      	ldr	r1, [pc, #120]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4914      	ldr	r1, [pc, #80]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d021      	beq.n	8001ca4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e021      	b.n	8001cb2 <HAL_GPIO_Init+0x2e2>
 8001c6e:	bf00      	nop
 8001c70:	10320000 	.word	0x10320000
 8001c74:	10310000 	.word	0x10310000
 8001c78:	10220000 	.word	0x10220000
 8001c7c:	10210000 	.word	0x10210000
 8001c80:	10120000 	.word	0x10120000
 8001c84:	10110000 	.word	0x10110000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40010800 	.word	0x40010800
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40011400 	.word	0x40011400
 8001ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_GPIO_Init+0x304>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <HAL_GPIO_Init+0x304>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f ae8e 	bne.w	80019e4 <HAL_GPIO_Init+0x14>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	372c      	adds	r7, #44	; 0x2c
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]
 8001d12:	4613      	mov	r3, r2
 8001d14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d16:	787b      	ldrb	r3, [r7, #1]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d48:	887a      	ldrh	r2, [r7, #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	041a      	lsls	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	400b      	ands	r3, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f806 	bl	8001d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e26c      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8087 	beq.w	8001eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dcc:	4b92      	ldr	r3, [pc, #584]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d00c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd8:	4b8f      	ldr	r3, [pc, #572]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d112      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5e>
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d10b      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d06c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x12c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d168      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e246      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x76>
 8001e14:	4b80      	ldr	r3, [pc, #512]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a7f      	ldr	r2, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e02e      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x98>
 8001e2a:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7a      	ldr	r2, [pc, #488]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b78      	ldr	r3, [pc, #480]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a77      	ldr	r2, [pc, #476]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e01d      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0xbc>
 8001e4e:	4b72      	ldr	r3, [pc, #456]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a71      	ldr	r2, [pc, #452]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0xd4>
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b68      	ldr	r3, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a67      	ldr	r2, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff f81a 	bl	8000ec0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff f816 	bl	8000ec0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1fa      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0xe4>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f806 	bl	8000ec0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f802 	bl	8000ec0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1e6      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x10c>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef2:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x18c>
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1ba      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4939      	ldr	r1, [pc, #228]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	e03a      	b.n	8001fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_RCC_OscConfig+0x270>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe ffbb 	bl	8000ec0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7fe ffb7 	bl	8000ec0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e19b      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4927      	ldr	r1, [pc, #156]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_RCC_OscConfig+0x270>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe ff9a 	bl	8000ec0 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f90:	f7fe ff96 	bl	8000ec0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e17a      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d03a      	beq.n	8002030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7fe ff7a 	bl	8000ec0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7fe ff76 	bl	8000ec0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e15a      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 fb08 	bl	8002604 <RCC_Delay>
 8001ff4:	e01c      	b.n	8002030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe ff60 	bl	8000ec0 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe ff5c 	bl	8000ec0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d908      	bls.n	8002024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e140      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	42420000 	.word	0x42420000
 8002020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	4b9e      	ldr	r3, [pc, #632]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e9      	bne.n	8002004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80a6 	beq.w	800218a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b94      	ldr	r3, [pc, #592]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a93      	ldr	r2, [pc, #588]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002076:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a8a      	ldr	r2, [pc, #552]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7fe ff1d 	bl	8000ec0 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208a:	f7fe ff19 	bl	8000ec0 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b64      	cmp	r3, #100	; 0x64
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0fd      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	4b81      	ldr	r3, [pc, #516]	; (80022a4 <HAL_RCC_OscConfig+0x4f8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x312>
 80020b0:	4b7b      	ldr	r3, [pc, #492]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a7a      	ldr	r2, [pc, #488]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e02d      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x334>
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a72      	ldr	r2, [pc, #456]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0304 	bic.w	r3, r3, #4
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	e01c      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_OscConfig+0x356>
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a6c      	ldr	r2, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x36e>
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a66      	ldr	r2, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fecd 	bl	8000ec0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fec9 	bl	8000ec0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ab      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ee      	beq.n	800212a <HAL_RCC_OscConfig+0x37e>
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7fe feb7 	bl	8000ec0 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe feb3 	bl	8000ec0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e095      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a47      	ldr	r2, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8081 	beq.w	8002296 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d061      	beq.n	8002264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d146      	bne.n	8002236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_OscConfig+0x4fc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fe87 	bl	8000ec0 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b6:	f7fe fe83 	bl	8000ec0 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e067      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	492d      	ldr	r1, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a19      	ldr	r1, [r3, #32]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	430b      	orrs	r3, r1
 8002202:	4927      	ldr	r1, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x4fc>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe fe57 	bl	8000ec0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe fe53 	bl	8000ec0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e037      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x46a>
 8002234:	e02f      	b.n	8002296 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_RCC_OscConfig+0x4fc>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe fe40 	bl	8000ec0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fe3c 	bl	8000ec0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e020      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x498>
 8002262:	e018      	b.n	8002296 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e013      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	429a      	cmp	r2, r3
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42420060 	.word	0x42420060

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4965      	ldr	r1, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800232a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d040      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d115      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e073      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4936      	ldr	r1, [pc, #216]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe fd90 	bl	8000ec0 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe fd8c 	bl	8000ec0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e053      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d210      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4922      	ldr	r1, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1cc>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f8aa 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	40021000 	.word	0x40021000
 8002474:	08009334 	.word	0x08009334
 8002478:	20000000 	.word	0x20000000
 800247c:	20000094 	.word	0x20000094

08002480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b490      	push	{r4, r7}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002488:	1d3c      	adds	r4, r7, #4
 800248a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002490:	f240 2301 	movw	r3, #513	; 0x201
 8002494:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x40>
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x46>
 80024be:	e02d      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c2:	623b      	str	r3, [r7, #32]
      break;
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024d2:	4413      	add	r3, r2
 80024d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0c5b      	lsrs	r3, r3, #17
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f2:	4413      	add	r3, r2
 80024f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fe:	fb02 f203 	mul.w	r2, r2, r3
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
 800250a:	e004      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	623b      	str	r3, [r7, #32]
      break;
 800251a:	e002      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251e:	623b      	str	r3, [r7, #32]
      break;
 8002520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002522:	6a3b      	ldr	r3, [r7, #32]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bc90      	pop	{r4, r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	0800927c 	.word	0x0800927c
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200
 800253c:	003d0900 	.word	0x003d0900

08002540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002544:	4b02      	ldr	r3, [pc, #8]	; (8002550 <HAL_RCC_GetHCLKFreq+0x10>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000000 	.word	0x20000000

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002558:	f7ff fff2 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	08009344 	.word	0x08009344

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002580:	f7ff ffde 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0adb      	lsrs	r3, r3, #11
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08009344 	.word	0x08009344

080025a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	220f      	movs	r2, #15
 80025b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_RCC_GetClockConfig+0x58>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_RCC_GetClockConfig+0x58>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_GetClockConfig+0x58>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_GetClockConfig+0x58>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetClockConfig+0x5c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0207 	and.w	r2, r3, #7
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40021000 	.word	0x40021000
 8002600:	40022000 	.word	0x40022000

08002604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <RCC_Delay+0x34>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <RCC_Delay+0x38>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0a5b      	lsrs	r3, r3, #9
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002620:	bf00      	nop
  }
  while (Delay --);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	60fa      	str	r2, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <RCC_Delay+0x1c>
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000000 	.word	0x20000000
 800263c:	10624dd3 	.word	0x10624dd3

08002640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e041      	b.n	80026d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f839 	bl	80026de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 f9b4 	bl	80029ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d001      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e03a      	b.n	800277e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_TIM_Base_Start_IT+0x98>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x58>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d009      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x58>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_TIM_Base_Start_IT+0x9c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x58>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a13      	ldr	r2, [pc, #76]	; (8002790 <HAL_TIM_Base_Start_IT+0xa0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d010      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276a:	e007      	b.n	800277c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800

08002794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0202 	mvn.w	r2, #2
 80027c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8ed 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f8e0 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f8ef 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d122      	bne.n	8002844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d11b      	bne.n	8002844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0204 	mvn.w	r2, #4
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8c3 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f8b6 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8c5 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d122      	bne.n	8002898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b08      	cmp	r3, #8
 800285e:	d11b      	bne.n	8002898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0208 	mvn.w	r2, #8
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f899 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f88c 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f89b 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d122      	bne.n	80028ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d11b      	bne.n	80028ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0210 	mvn.w	r2, #16
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2208      	movs	r2, #8
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f86f 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f862 	bl	80029a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f871 	bl	80029c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0201 	mvn.w	r2, #1
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fd fdfe 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d107      	bne.n	8002944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8bf 	bl	8002ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b40      	cmp	r3, #64	; 0x40
 800295e:	d107      	bne.n	8002970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f835 	bl	80029da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b20      	cmp	r3, #32
 800297c:	d10e      	bne.n	800299c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b20      	cmp	r3, #32
 800298a:	d107      	bne.n	800299c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0220 	mvn.w	r2, #32
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f88a 	bl	8002ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a29      	ldr	r2, [pc, #164]	; (8002aa4 <TIM_Base_SetConfig+0xb8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <TIM_Base_SetConfig+0x30>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d007      	beq.n	8002a1c <TIM_Base_SetConfig+0x30>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <TIM_Base_SetConfig+0xbc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x30>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <TIM_Base_SetConfig+0xc0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <TIM_Base_SetConfig+0xb8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_Base_SetConfig+0x62>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0x62>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <TIM_Base_SetConfig+0xbc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0x62>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a18      	ldr	r2, [pc, #96]	; (8002aac <TIM_Base_SetConfig+0xc0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <TIM_Base_SetConfig+0xb8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	615a      	str	r2, [r3, #20]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800

08002ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e03f      	b.n	8002b66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd fe70 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fdab 	bl	8003674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d153      	bne.n	8002c32 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_UART_Transmit_DMA+0x26>
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e04c      	b.n	8002c34 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_UART_Transmit_DMA+0x38>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e045      	b.n	8002c34 <HAL_UART_Transmit_DMA+0xc4>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2221      	movs	r2, #33	; 0x21
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_UART_Transmit_DMA+0xcc>)
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_UART_Transmit_DMA+0xd0>)
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <HAL_UART_Transmit_DMA+0xd4>)
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3304      	adds	r3, #4
 8002c04:	461a      	mov	r2, r3
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	f7fe fa9e 	bl	8001148 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c14:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c2c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	08003113 	.word	0x08003113
 8002c40:	08003165 	.word	0x08003165
 8002c44:	0800324d 	.word	0x0800324d

08002c48 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d11d      	bne.n	8002c9e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_UART_Receive_DMA+0x26>
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e016      	b.n	8002ca0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Receive_DMA+0x38>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e00f      	b.n	8002ca0 <HAL_UART_Receive_DMA+0x58>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fb23 	bl	80032e0 <UART_Start_Receive_DMA>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	e000      	b.n	8002ca0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b21      	cmp	r3, #33	; 0x21
 8002cd4:	d116      	bne.n	8002d04 <HAL_UART_DMAStop+0x5c>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cea:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fa84 	bl	8001206 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb52 	bl	80033a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b22      	cmp	r3, #34	; 0x22
 8002d24:	d116      	bne.n	8002d54 <HAL_UART_DMAStop+0xac>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fa5c 	bl	8001206 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fb3f 	bl	80033d2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_UART_IRQHandler+0x52>
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fbb8 	bl	8003520 <UART_Receive_IT>
      return;
 8002db0:	e17b      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80b1 	beq.w	8002f1c <HAL_UART_IRQHandler+0x1bc>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x70>
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80a6 	beq.w	8002f1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_UART_IRQHandler+0x90>
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0xb0>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_UART_IRQHandler+0xd0>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00f      	beq.n	8002e5a <HAL_UART_IRQHandler+0xfa>
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <HAL_UART_IRQHandler+0xee>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0208 	orr.w	r2, r3, #8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 811e 	beq.w	80030a0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_UART_IRQHandler+0x11e>
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fb51 	bl	8003520 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x146>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d031      	beq.n	8002f0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa93 	bl	80033d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d023      	beq.n	8002f02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d013      	beq.n	8002efa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	4a76      	ldr	r2, [pc, #472]	; (80030b0 <HAL_UART_IRQHandler+0x350>)
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe f9cc 	bl	800127c <HAL_DMA_Abort_IT>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	e00e      	b.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8f5 	bl	80030ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	e00a      	b.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8f1 	bl	80030ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f08:	e006      	b.n	8002f18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8ed 	bl	80030ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f16:	e0c3      	b.n	80030a0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	bf00      	nop
    return;
 8002f1a:	e0c1      	b.n	80030a0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	f040 80a1 	bne.w	8003068 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 809b 	beq.w	8003068 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8095 	beq.w	8003068 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d04e      	beq.n	8003000 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f6c:	8a3b      	ldrh	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8098 	beq.w	80030a4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f78:	8a3a      	ldrh	r2, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	f080 8092 	bcs.w	80030a4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8a3a      	ldrh	r2, [r7, #16]
 8002f84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d02b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0210 	bic.w	r2, r2, #16
 8002fdc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f90f 	bl	8001206 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f87f 	bl	80030fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ffe:	e051      	b.n	80030a4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003008:	b29b      	uxth	r3, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d047      	beq.n	80030a8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003018:	8a7b      	ldrh	r3, [r7, #18]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d044      	beq.n	80030a8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800302c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0210 	bic.w	r2, r2, #16
 800305a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800305c:	8a7b      	ldrh	r3, [r7, #18]
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f84b 	bl	80030fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003066:	e01f      	b.n	80030a8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_UART_IRQHandler+0x324>
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9e8 	bl	8003452 <UART_Transmit_IT>
    return;
 8003082:	e012      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_UART_IRQHandler+0x34a>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa29 	bl	80034f0 <UART_EndTransmit_IT>
    return;
 800309e:	e004      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
    return;
 80030a0:	bf00      	nop
 80030a2:	e002      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
      return;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <HAL_UART_IRQHandler+0x34a>
      return;
 80030a8:	bf00      	nop
  }
}
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0800342b 	.word	0x0800342b

080030b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003142:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003152:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003154:	e002      	b.n	800315c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7fd fcc0 	bl	8000adc <HAL_UART_TxCpltCallback>
}
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ff9e 	bl	80030b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d12a      	bne.n	80031f2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0210 	bic.w	r2, r2, #16
 80031f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031fe:	4619      	mov	r1, r3
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff ff7b 	bl	80030fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003206:	e002      	b.n	800320e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff ff5c 	bl	80030c6 <HAL_UART_RxCpltCallback>
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	2b01      	cmp	r3, #1
 800322a:	d108      	bne.n	800323e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003230:	085b      	lsrs	r3, r3, #1
 8003232:	b29b      	uxth	r3, r3
 8003234:	4619      	mov	r1, r3
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ff60 	bl	80030fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800323c:	e002      	b.n	8003244 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff ff4a 	bl	80030d8 <HAL_UART_RxHalfCpltCallback>
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d108      	bne.n	8003292 <UART_DMAError+0x46>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800328c:	68b8      	ldr	r0, [r7, #8]
 800328e:	f000 f88b 	bl	80033a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b22      	cmp	r3, #34	; 0x22
 80032b2:	d108      	bne.n	80032c6 <UART_DMAError+0x7a>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80032c0:	68b8      	ldr	r0, [r7, #8]
 80032c2:	f000 f886 	bl	80033d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f043 0210 	orr.w	r2, r3, #16
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	f7ff ff09 	bl	80030ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2222      	movs	r2, #34	; 0x22
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <UART_Start_Receive_DMA+0xbc>)
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <UART_Start_Receive_DMA+0xc0>)
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <UART_Start_Receive_DMA+0xc4>)
 800331e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	2200      	movs	r2, #0
 8003326:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003328:	f107 0308 	add.w	r3, r7, #8
 800332c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	f7fd ff02 	bl	8001148 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003370:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003390:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	08003181 	.word	0x08003181
 80033a0:	08003217 	.word	0x08003217
 80033a4:	0800324d 	.word	0x0800324d

080033a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80033be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d107      	bne.n	8003412 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0210 	bic.w	r2, r2, #16
 8003410:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fe50 	bl	80030ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b21      	cmp	r3, #33	; 0x21
 8003464:	d13e      	bne.n	80034e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	d114      	bne.n	800349a <UART_Transmit_IT+0x48>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d110      	bne.n	800349a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]
 8003498:	e008      	b.n	80034ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6211      	str	r1, [r2, #32]
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4619      	mov	r1, r3
 80034ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10f      	bne.n	80034e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fd fae3 	bl	8000adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b22      	cmp	r3, #34	; 0x22
 8003532:	f040 8099 	bne.w	8003668 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d117      	bne.n	8003570 <UART_Receive_IT+0x50>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	b29a      	uxth	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
 800356e:	e026      	b.n	80035be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d007      	beq.n	8003594 <UART_Receive_IT+0x74>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <UART_Receive_IT+0x82>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e008      	b.n	80035b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4619      	mov	r1, r3
 80035cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d148      	bne.n	8003664 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0220 	bic.w	r2, r2, #32
 80035e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	2b01      	cmp	r3, #1
 8003610:	d123      	bne.n	800365a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0210 	bic.w	r2, r2, #16
 8003626:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b10      	cmp	r3, #16
 8003634:	d10a      	bne.n	800364c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fd52 	bl	80030fc <HAL_UARTEx_RxEventCallback>
 8003658:	e002      	b.n	8003660 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fd33 	bl	80030c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e002      	b.n	800366a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ae:	f023 030c 	bic.w	r3, r3, #12
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2c      	ldr	r2, [pc, #176]	; (8003788 <UART_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d103      	bne.n	80036e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036dc:	f7fe ff4e 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	e002      	b.n	80036ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7fe ff36 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 80036e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009a      	lsls	r2, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <UART_SetConfig+0x118>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	0119      	lsls	r1, r3, #4
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <UART_SetConfig+0x118>)
 8003722:	fba3 0302 	umull	r0, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2064      	movs	r0, #100	; 0x64
 800372a:	fb00 f303 	mul.w	r3, r0, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <UART_SetConfig+0x118>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003740:	4419      	add	r1, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009a      	lsls	r2, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	fbb2 f2f3 	udiv	r2, r2, r3
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <UART_SetConfig+0x118>)
 800375a:	fba3 0302 	umull	r0, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2064      	movs	r0, #100	; 0x64
 8003762:	fb00 f303 	mul.w	r3, r0, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a07      	ldr	r2, [pc, #28]	; (800378c <UART_SetConfig+0x118>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	440a      	add	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40013800 	.word	0x40013800
 800378c:	51eb851f 	.word	0x51eb851f

08003790 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003796:	f3ef 8305 	mrs	r3, IPSR
 800379a:	60bb      	str	r3, [r7, #8]
  return(result);
 800379c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	607b      	str	r3, [r7, #4]
  return(result);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <osKernelInitialize+0x32>
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <osKernelInitialize+0x60>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d109      	bne.n	80037ca <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037b6:	f3ef 8311 	mrs	r3, BASEPRI
 80037ba:	603b      	str	r3, [r7, #0]
  return(result);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037c2:	f06f 0305 	mvn.w	r3, #5
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e00c      	b.n	80037e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <osKernelInitialize+0x60>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <osKernelInitialize+0x60>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e002      	b.n	80037e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037e4:	68fb      	ldr	r3, [r7, #12]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	2000014c 	.word	0x2000014c

080037f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fa:	f3ef 8305 	mrs	r3, IPSR
 80037fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003800:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	607b      	str	r3, [r7, #4]
  return(result);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <osKernelStart+0x32>
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <osKernelStart+0x64>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d109      	bne.n	800382e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800381a:	f3ef 8311 	mrs	r3, BASEPRI
 800381e:	603b      	str	r3, [r7, #0]
  return(result);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003826:	f06f 0305 	mvn.w	r3, #5
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e00e      	b.n	800384c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <osKernelStart+0x64>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <osKernelStart+0x64>)
 8003838:	2202      	movs	r2, #2
 800383a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800383c:	f001 fdea 	bl	8005414 <vTaskStartScheduler>
      stat = osOK;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e002      	b.n	800384c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000014c 	.word	0x2000014c

0800385c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b092      	sub	sp, #72	; 0x48
 8003860:	af04      	add	r7, sp, #16
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800386c:	f3ef 8305 	mrs	r3, IPSR
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 8094 	bne.w	80039a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	623b      	str	r3, [r7, #32]
  return(result);
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 808d 	bne.w	80039a2 <osThreadNew+0x146>
 8003888:	4b48      	ldr	r3, [pc, #288]	; (80039ac <osThreadNew+0x150>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d106      	bne.n	800389e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003890:	f3ef 8311 	mrs	r3, BASEPRI
 8003894:	61fb      	str	r3, [r7, #28]
  return(result);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 8082 	bne.w	80039a2 <osThreadNew+0x146>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d07e      	beq.n	80039a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80038a8:	2318      	movs	r3, #24
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80038ac:	2300      	movs	r3, #0
 80038ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80038b0:	f107 031b 	add.w	r3, r7, #27
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d045      	beq.n	800394e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <osThreadNew+0x74>
        name = attr->name;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <osThreadNew+0x9a>
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	2b38      	cmp	r3, #56	; 0x38
 80038e8:	d805      	bhi.n	80038f6 <osThreadNew+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <osThreadNew+0x9e>
        return (NULL);
 80038f6:	2300      	movs	r3, #0
 80038f8:	e054      	b.n	80039a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <osThreadNew+0xd4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2bbb      	cmp	r3, #187	; 0xbb
 8003918:	d90a      	bls.n	8003930 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <osThreadNew+0xd4>
        mem = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
 800392e:	e010      	b.n	8003952 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <osThreadNew+0xf6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <osThreadNew+0xf6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <osThreadNew+0xf6>
          mem = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
 800394c:	e001      	b.n	8003952 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	2b01      	cmp	r3, #1
 8003956:	d110      	bne.n	800397a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003960:	9202      	str	r2, [sp, #8]
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f001 fb6c 	bl	800504c <xTaskCreateStatic>
 8003974:	4603      	mov	r3, r0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e013      	b.n	80039a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d110      	bne.n	80039a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	b29a      	uxth	r2, r3
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f001 fbb6 	bl	8005104 <xTaskCreate>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <osThreadNew+0x146>
          hTask = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039a2:	697b      	ldr	r3, [r7, #20]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3738      	adds	r7, #56	; 0x38
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000014c 	.word	0x2000014c

080039b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b8:	f3ef 8305 	mrs	r3, IPSR
 80039bc:	613b      	str	r3, [r7, #16]
  return(result);
 80039be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10f      	bne.n	80039e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c4:	f3ef 8310 	mrs	r3, PRIMASK
 80039c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <osDelay+0x34>
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <osDelay+0x58>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d109      	bne.n	80039ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039d8:	f3ef 8311 	mrs	r3, BASEPRI
 80039dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <osDelay+0x3c>
    stat = osErrorISR;
 80039e4:	f06f 0305 	mvn.w	r3, #5
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e007      	b.n	80039fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f001 fcd8 	bl	80053ac <vTaskDelay>
    }
  }

  return (stat);
 80039fc:	697b      	ldr	r3, [r7, #20]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	2000014c 	.word	0x2000014c

08003a0c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f002 fee9 	bl	80067ec <pvTimerGetTimerID>
 8003a1a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <TimerCallback+0x22>
    callb->func (callb->arg);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	6852      	ldr	r2, [r2, #4]
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4798      	blx	r3
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08e      	sub	sp, #56	; 0x38
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4c:	f3ef 8305 	mrs	r3, IPSR
 8003a50:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d16a      	bne.n	8003b2e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a58:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d164      	bne.n	8003b2e <osTimerNew+0xf6>
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <osTimerNew+0x100>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d105      	bne.n	8003a78 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a70:	613b      	str	r3, [r7, #16]
  return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d15a      	bne.n	8003b2e <osTimerNew+0xf6>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d057      	beq.n	8003b2e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003a7e:	2008      	movs	r0, #8
 8003a80:	f003 f8c4 	bl	8006c0c <pvPortMalloc>
 8003a84:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d050      	beq.n	8003b2e <osTimerNew+0xf6>
      callb->func = func;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003a98:	7afb      	ldrb	r3, [r7, #11]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <osTimerNew+0x6c>
        reload = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e001      	b.n	8003aa8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	623b      	str	r3, [r7, #32]
      name = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01c      	beq.n	8003af2 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <osTimerNew+0x8e>
          name = attr->name;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <osTimerNew+0xa4>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b2f      	cmp	r3, #47	; 0x2f
 8003ad4:	d902      	bls.n	8003adc <osTimerNew+0xa4>
          mem = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	e00c      	b.n	8003af6 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d108      	bne.n	8003af6 <osTimerNew+0xbe>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <osTimerNew+0xbe>
            mem = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	e001      	b.n	8003af6 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10c      	bne.n	8003b16 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <osTimerNew+0x104>)
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b0e:	f002 fb34 	bl	800617a <xTimerCreateStatic>
 8003b12:	62b8      	str	r0, [r7, #40]	; 0x28
 8003b14:	e00b      	b.n	8003b2e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <osTimerNew+0x104>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	2101      	movs	r1, #1
 8003b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b28:	f002 fb06 	bl	8006138 <xTimerCreate>
 8003b2c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3730      	adds	r7, #48	; 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	2000014c 	.word	0x2000014c
 8003b3c:	08003a0d 	.word	0x08003a0d

08003b40 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b4e:	f3ef 8305 	mrs	r3, IPSR
 8003b52:	617b      	str	r3, [r7, #20]
  return(result);
 8003b54:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5e:	613b      	str	r3, [r7, #16]
  return(result);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <osTimerStart+0x3a>
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <osTimerStart+0x7c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d109      	bne.n	8003b82 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <osTimerStart+0x42>
    stat = osErrorISR;
 8003b7a:	f06f 0305 	mvn.w	r3, #5
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e017      	b.n	8003bb2 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <osTimerStart+0x50>
    stat = osErrorParameter;
 8003b88:	f06f 0303 	mvn.w	r3, #3
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e010      	b.n	8003bb2 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003b90:	2300      	movs	r3, #0
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	2104      	movs	r1, #4
 8003b9a:	69b8      	ldr	r0, [r7, #24]
 8003b9c:	f002 fb5c 	bl	8006258 <xTimerGenericCommand>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <osTimerStart+0x6c>
      stat = osOK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e002      	b.n	8003bb2 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8003bac:	f06f 0302 	mvn.w	r3, #2
 8003bb0:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8003bb2:	69fb      	ldr	r3, [r7, #28]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000014c 	.word	0x2000014c

08003bc0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd0:	f3ef 8305 	mrs	r3, IPSR
 8003bd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bd6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f040 8086 	bne.w	8003cea <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	617b      	str	r3, [r7, #20]
  return(result);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d17f      	bne.n	8003cea <osSemaphoreNew+0x12a>
 8003bea:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <osSemaphoreNew+0x134>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d105      	bne.n	8003bfe <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bf6:	613b      	str	r3, [r7, #16]
  return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d175      	bne.n	8003cea <osSemaphoreNew+0x12a>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d072      	beq.n	8003cea <osSemaphoreNew+0x12a>
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d86e      	bhi.n	8003cea <osSemaphoreNew+0x12a>
    mem = -1;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <osSemaphoreNew+0x6e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	2b4f      	cmp	r3, #79	; 0x4f
 8003c26:	d902      	bls.n	8003c2e <osSemaphoreNew+0x6e>
        mem = 1;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	e00c      	b.n	8003c48 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <osSemaphoreNew+0x88>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <osSemaphoreNew+0x88>
          mem = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	e001      	b.n	8003c48 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d04c      	beq.n	8003cea <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d128      	bne.n	8003ca8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10a      	bne.n	8003c72 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2203      	movs	r2, #3
 8003c62:	9200      	str	r2, [sp, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2100      	movs	r1, #0
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f000 fa4d 	bl	8004108 <xQueueGenericCreateStatic>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c70:	e005      	b.n	8003c7e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003c72:	2203      	movs	r2, #3
 8003c74:	2100      	movs	r1, #0
 8003c76:	2001      	movs	r0, #1
 8003c78:	f000 fabd 	bl	80041f6 <xQueueGenericCreate>
 8003c7c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d022      	beq.n	8003cca <osSemaphoreNew+0x10a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01f      	beq.n	8003cca <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c92:	f000 fb7b 	bl	800438c <xQueueGenericSend>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d016      	beq.n	8003cca <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c9e:	f001 f805 	bl	8004cac <vQueueDelete>
            hSemaphore = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	e010      	b.n	8003cca <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d108      	bne.n	8003cc0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fafe 	bl	80042b8 <xQueueCreateCountingSemaphoreStatic>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8003cbe:	e004      	b.n	8003cca <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fb2f 	bl	8004326 <xQueueCreateCountingSemaphore>
 8003cc8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <osSemaphoreNew+0x11e>
          name = attr->name;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	e001      	b.n	8003ce2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003ce2:	69f9      	ldr	r1, [r7, #28]
 8003ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce6:	f001 f92b 	bl	8004f40 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000014c 	.word	0x2000014c

08003cf8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003d10:	f06f 0303 	mvn.w	r3, #3
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e04b      	b.n	8003db0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d18:	f3ef 8305 	mrs	r3, IPSR
 8003d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d1e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10f      	bne.n	8003d44 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d24:	f3ef 8310 	mrs	r3, PRIMASK
 8003d28:	613b      	str	r3, [r7, #16]
  return(result);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <osSemaphoreAcquire+0x4c>
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <osSemaphoreAcquire+0xc4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d128      	bne.n	8003d8a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d38:	f3ef 8311 	mrs	r3, BASEPRI
 8003d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d022      	beq.n	8003d8a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003d4a:	f06f 0303 	mvn.w	r3, #3
 8003d4e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d50:	e02d      	b.n	8003dae <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	69b8      	ldr	r0, [r7, #24]
 8003d60:	f000 ff24 	bl	8004bac <xQueueReceiveFromISR>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d003      	beq.n	8003d72 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003d6a:	f06f 0302 	mvn.w	r3, #2
 8003d6e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d70:	e01d      	b.n	8003dae <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <osSemaphoreAcquire+0xb6>
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <osSemaphoreAcquire+0xc8>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003d88:	e011      	b.n	8003dae <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	69b8      	ldr	r0, [r7, #24]
 8003d8e:	f000 fe01 	bl	8004994 <xQueueSemaphoreTake>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d00b      	beq.n	8003db0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003d9e:	f06f 0301 	mvn.w	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e004      	b.n	8003db0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003da6:	f06f 0302 	mvn.w	r3, #2
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e000      	b.n	8003db0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003dae:	bf00      	nop
      }
    }
  }

  return (stat);
 8003db0:	69fb      	ldr	r3, [r7, #28]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3720      	adds	r7, #32
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000014c 	.word	0x2000014c
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003dda:	f06f 0303 	mvn.w	r3, #3
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e03e      	b.n	8003e60 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de2:	f3ef 8305 	mrs	r3, IPSR
 8003de6:	617b      	str	r3, [r7, #20]
  return(result);
 8003de8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dee:	f3ef 8310 	mrs	r3, PRIMASK
 8003df2:	613b      	str	r3, [r7, #16]
  return(result);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <osSemaphoreRelease+0x4a>
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <osSemaphoreRelease+0xa8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d120      	bne.n	8003e44 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e02:	f3ef 8311 	mrs	r3, BASEPRI
 8003e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01a      	beq.n	8003e44 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	4619      	mov	r1, r3
 8003e18:	69b8      	ldr	r0, [r7, #24]
 8003e1a:	f000 fc4d 	bl	80046b8 <xQueueGiveFromISR>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d003      	beq.n	8003e2c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003e24:	f06f 0302 	mvn.w	r3, #2
 8003e28:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e2a:	e018      	b.n	8003e5e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d015      	beq.n	8003e5e <osSemaphoreRelease+0x9a>
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <osSemaphoreRelease+0xac>)
 8003e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e42:	e00c      	b.n	8003e5e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003e44:	2300      	movs	r3, #0
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	69b8      	ldr	r0, [r7, #24]
 8003e4c:	f000 fa9e 	bl	800438c <xQueueGenericSend>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d004      	beq.n	8003e60 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003e56:	f06f 0302 	mvn.w	r3, #2
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e000      	b.n	8003e60 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e5e:	bf00      	nop
    }
  }

  return (stat);
 8003e60:	69fb      	ldr	r3, [r7, #28]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000014c 	.word	0x2000014c
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <vApplicationGetIdleTaskMemory+0x28>)
 8003e84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	601a      	str	r2, [r3, #0]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	20000150 	.word	0x20000150
 8003ea0:	2000020c 	.word	0x2000020c

08003ea4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003eb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4a06      	ldr	r2, [pc, #24]	; (8003ed4 <vApplicationGetTimerTaskMemory+0x30>)
 8003eba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	2000040c 	.word	0x2000040c
 8003ed4:	200004c8 	.word	0x200004c8

08003ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f103 0208 	add.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0208 	add.w	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f103 0208 	add.w	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d103      	bne.n	8003f94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e00c      	b.n	8003fae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3308      	adds	r3, #8
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e002      	b.n	8003fa2 <vListInsert+0x2e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d2f6      	bcs.n	8003f9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6852      	ldr	r2, [r2, #4]
 8004004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d103      	bne.n	8004018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
	...

08004038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004062:	f002 fcd3 	bl	8006a0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	3b01      	subs	r3, #1
 8004094:	68f9      	ldr	r1, [r7, #12]
 8004096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d114      	bne.n	80040e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01a      	beq.n	80040f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3310      	adds	r3, #16
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fc41 	bl	800594c <xTaskRemoveFromEventList>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d012      	beq.n	80040f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <xQueueGenericReset+0xcc>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	e009      	b.n	80040f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3310      	adds	r3, #16
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fef6 	bl	8003ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3324      	adds	r3, #36	; 0x24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fef1 	bl	8003ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040f6:	f002 fcb9 	bl	8006a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	; 0x38
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <xQueueGenericCreateStatic+0x52>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <xQueueGenericCreateStatic+0x56>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueGenericCreateStatic+0x58>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <xQueueGenericCreateStatic+0x7e>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <xQueueGenericCreateStatic+0x82>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <xQueueGenericCreateStatic+0x84>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61fb      	str	r3, [r7, #28]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041a6:	2350      	movs	r3, #80	; 0x50
 80041a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b50      	cmp	r3, #80	; 0x50
 80041ae:	d00a      	beq.n	80041c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61bb      	str	r3, [r7, #24]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f843 	bl	8004272 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3730      	adds	r7, #48	; 0x30
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b08a      	sub	sp, #40	; 0x28
 80041fa:	af02      	add	r7, sp, #8
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xQueueGenericCreate+0x2a>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	613b      	str	r3, [r7, #16]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	e004      	b.n	8004236 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3350      	adds	r3, #80	; 0x50
 800423a:	4618      	mov	r0, r3
 800423c:	f002 fce6 	bl	8006c0c <pvPortMalloc>
 8004240:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00f      	beq.n	8004268 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	3350      	adds	r3, #80	; 0x50
 800424c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004256:	79fa      	ldrb	r2, [r7, #7]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f805 	bl	8004272 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004268:	69bb      	ldr	r3, [r7, #24]
	}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e002      	b.n	8004294 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042a0:	2101      	movs	r1, #1
 80042a2:	69b8      	ldr	r0, [r7, #24]
 80042a4:	f7ff fec8 	bl	8004038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	61bb      	str	r3, [r7, #24]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d90a      	bls.n	80042fe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	617b      	str	r3, [r7, #20]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80042fe:	2302      	movs	r3, #2
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	2100      	movs	r1, #0
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fefd 	bl	8004108 <xQueueGenericCreateStatic>
 800430e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800431c:	69fb      	ldr	r3, [r7, #28]
	}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	613b      	str	r3, [r7, #16]
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d90a      	bls.n	800436a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800436a:	2202      	movs	r2, #2
 800436c:	2100      	movs	r1, #0
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ff41 	bl	80041f6 <xQueueGenericCreate>
 8004374:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004382:	697b      	ldr	r3, [r7, #20]
	}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGenericSend+0x32>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <xQueueGenericSend+0x40>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <xQueueGenericSend+0x44>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <xQueueGenericSend+0x46>
 80043d0:	2300      	movs	r3, #0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <xQueueGenericSend+0x60>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x6e>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <xQueueGenericSend+0x72>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xQueueGenericSend+0x74>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueGenericSend+0x8e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623b      	str	r3, [r7, #32]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800441a:	f001 fc5d 	bl	8005cd8 <xTaskGetSchedulerState>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <xQueueGenericSend+0x9e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <xQueueGenericSend+0xa2>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <xQueueGenericSend+0xa4>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xQueueGenericSend+0xbe>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	61fb      	str	r3, [r7, #28]
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800444a:	f002 fadf 	bl	8006a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <xQueueGenericSend+0xd4>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d129      	bne.n	80044b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004466:	f000 fc5b 	bl	8004d20 <prvCopyDataToQueue>
 800446a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	3324      	adds	r3, #36	; 0x24
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fa67 	bl	800594c <xTaskRemoveFromEventList>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <xQueueGenericSend+0x1f8>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	e00a      	b.n	80044ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <xQueueGenericSend+0x1f8>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044ac:	f002 fade 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e063      	b.n	800457c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ba:	f002 fad7 	bl	8006a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	e05c      	b.n	800457c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 faa1 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044d6:	f002 fac9 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044da:	f001 f80b 	bl	80054f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044de:	f002 fa95 	bl	8006a0c <vPortEnterCritical>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d103      	bne.n	80044f8 <xQueueGenericSend+0x16c>
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fe:	b25b      	sxtb	r3, r3
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d103      	bne.n	800450e <xQueueGenericSend+0x182>
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800450e:	f002 faad 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004512:	1d3a      	adds	r2, r7, #4
 8004514:	f107 0314 	add.w	r3, r7, #20
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fa90 	bl	8005a40 <xTaskCheckForTimeOut>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d124      	bne.n	8004570 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004528:	f000 fcf2 	bl	8004f10 <prvIsQueueFull>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d018      	beq.n	8004564 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	3310      	adds	r3, #16
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f9b6 	bl	80058ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004542:	f000 fc7d 	bl	8004e40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004546:	f000 ffe3 	bl	8005510 <xTaskResumeAll>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	f47f af7c 	bne.w	800444a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <xQueueGenericSend+0x1f8>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	e772      	b.n	800444a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004566:	f000 fc6b 	bl	8004e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800456a:	f000 ffd1 	bl	8005510 <xTaskResumeAll>
 800456e:	e76c      	b.n	800444a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004572:	f000 fc65 	bl	8004e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004576:	f000 ffcb 	bl	8005510 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800457a:	2300      	movs	r3, #0
		}
	}
}
 800457c:	4618      	mov	r0, r3
 800457e:	3738      	adds	r7, #56	; 0x38
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	; 0x38
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <xQueueGenericSendFromISR+0x3c>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <xQueueGenericSendFromISR+0x40>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <xQueueGenericSendFromISR+0x42>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	623b      	str	r3, [r7, #32]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d103      	bne.n	80045f2 <xQueueGenericSendFromISR+0x6a>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <xQueueGenericSendFromISR+0x6e>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <xQueueGenericSendFromISR+0x70>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	61fb      	str	r3, [r7, #28]
}
 800460e:	bf00      	nop
 8004610:	e7fe      	b.n	8004610 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004612:	f002 fabd 	bl	8006b90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004616:	f3ef 8211 	mrs	r2, BASEPRI
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	61ba      	str	r2, [r7, #24]
 800462c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800462e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <xQueueGenericSendFromISR+0xbc>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d12c      	bne.n	800469e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004654:	f000 fb64 	bl	8004d20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004658:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d112      	bne.n	8004688 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d016      	beq.n	8004698 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	4618      	mov	r0, r3
 8004670:	f001 f96c 	bl	800594c <xTaskRemoveFromEventList>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00e      	beq.n	8004698 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e007      	b.n	8004698 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004688:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800468c:	3301      	adds	r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	b25a      	sxtb	r2, r3
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004698:	2301      	movs	r3, #1
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800469c:	e001      	b.n	80046a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3738      	adds	r7, #56	; 0x38
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	; 0x38
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	623b      	str	r3, [r7, #32]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <xQueueGiveFromISR+0x48>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	61fb      	str	r3, [r7, #28]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d103      	bne.n	8004710 <xQueueGiveFromISR+0x58>
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <xQueueGiveFromISR+0x5c>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <xQueueGiveFromISR+0x5e>
 8004714:	2300      	movs	r3, #0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <xQueueGiveFromISR+0x78>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61bb      	str	r3, [r7, #24]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004730:	f002 fa2e 	bl	8006b90 <vPortValidateInterruptPriority>
	__asm volatile
 8004734:	f3ef 8211 	mrs	r2, BASEPRI
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	617a      	str	r2, [r7, #20]
 800474a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800474c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475c:	429a      	cmp	r2, r3
 800475e:	d22b      	bcs.n	80047b8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d112      	bne.n	80047a2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d016      	beq.n	80047b2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	3324      	adds	r3, #36	; 0x24
 8004788:	4618      	mov	r0, r3
 800478a:	f001 f8df 	bl	800594c <xTaskRemoveFromEventList>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00e      	beq.n	80047b2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e007      	b.n	80047b2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a6:	3301      	adds	r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	b25a      	sxtb	r2, r3
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047b2:	2301      	movs	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
 80047b6:	e001      	b.n	80047bc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f383 8811 	msr	BASEPRI, r3
}
 80047c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3738      	adds	r7, #56	; 0x38
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08c      	sub	sp, #48	; 0x30
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <xQueueReceive+0x30>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	623b      	str	r3, [r7, #32]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <xQueueReceive+0x3e>
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <xQueueReceive+0x42>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <xQueueReceive+0x44>
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xQueueReceive+0x5e>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	61fb      	str	r3, [r7, #28]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004832:	f001 fa51 	bl	8005cd8 <xTaskGetSchedulerState>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <xQueueReceive+0x6e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <xQueueReceive+0x72>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <xQueueReceive+0x74>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueReceive+0x8e>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	61bb      	str	r3, [r7, #24]
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004862:	f002 f8d3 	bl	8006a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01f      	beq.n	80048b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004876:	f000 fabd 	bl	8004df4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00f      	beq.n	80048aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	3310      	adds	r3, #16
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f85c 	bl	800594c <xTaskRemoveFromEventList>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800489a:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <xQueueReceive+0x1bc>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048aa:	f002 f8df 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e069      	b.n	8004986 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048b8:	f002 f8d8 	bl	8006a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048bc:	2300      	movs	r3, #0
 80048be:	e062      	b.n	8004986 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048c6:	f107 0310 	add.w	r3, r7, #16
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 f8a2 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048d4:	f002 f8ca 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048d8:	f000 fe0c 	bl	80054f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048dc:	f002 f896 	bl	8006a0c <vPortEnterCritical>
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d103      	bne.n	80048f6 <xQueueReceive+0x122>
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d103      	bne.n	800490c <xQueueReceive+0x138>
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490c:	f002 f8ae 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004910:	1d3a      	adds	r2, r7, #4
 8004912:	f107 0310 	add.w	r3, r7, #16
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f001 f891 	bl	8005a40 <xTaskCheckForTimeOut>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d123      	bne.n	800496c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004926:	f000 fadd 	bl	8004ee4 <prvIsQueueEmpty>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d017      	beq.n	8004960 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	3324      	adds	r3, #36	; 0x24
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f000 ffb7 	bl	80058ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800493e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004940:	f000 fa7e 	bl	8004e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004944:	f000 fde4 	bl	8005510 <xTaskResumeAll>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d189      	bne.n	8004862 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <xQueueReceive+0x1bc>)
 8004950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	e780      	b.n	8004862 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004962:	f000 fa6d 	bl	8004e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004966:	f000 fdd3 	bl	8005510 <xTaskResumeAll>
 800496a:	e77a      	b.n	8004862 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800496c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496e:	f000 fa67 	bl	8004e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004972:	f000 fdcd 	bl	8005510 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004978:	f000 fab4 	bl	8004ee4 <prvIsQueueEmpty>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f43f af6f 	beq.w	8004862 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004984:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004986:	4618      	mov	r0, r3
 8004988:	3730      	adds	r7, #48	; 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	; 0x38
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800499e:	2300      	movs	r3, #0
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	61fb      	str	r3, [r7, #28]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049e4:	f001 f978 	bl	8005cd8 <xTaskGetSchedulerState>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <xQueueSemaphoreTake+0x60>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <xQueueSemaphoreTake+0x64>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <xQueueSemaphoreTake+0x66>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	61bb      	str	r3, [r7, #24]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a14:	f001 fffa 	bl	8006a0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d024      	beq.n	8004a6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a34:	f001 fad0 	bl	8005fd8 <pvTaskIncrementMutexHeldCount>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00f      	beq.n	8004a66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	3310      	adds	r3, #16
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 ff7e 	bl	800594c <xTaskRemoveFromEventList>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a56:	4b54      	ldr	r3, [pc, #336]	; (8004ba8 <xQueueSemaphoreTake+0x214>)
 8004a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a66:	f002 f801 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e097      	b.n	8004b9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d111      	bne.n	8004a98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	617b      	str	r3, [r7, #20]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a90:	f001 ffec 	bl	8006a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e082      	b.n	8004b9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 ffb6 	bl	8005a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aac:	f001 ffde 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ab0:	f000 fd20 	bl	80054f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ab4:	f001 ffaa 	bl	8006a0c <vPortEnterCritical>
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d103      	bne.n	8004ace <xQueueSemaphoreTake+0x13a>
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad4:	b25b      	sxtb	r3, r3
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d103      	bne.n	8004ae4 <xQueueSemaphoreTake+0x150>
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae4:	f001 ffc2 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ae8:	463a      	mov	r2, r7
 8004aea:	f107 030c 	add.w	r3, r7, #12
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 ffa5 	bl	8005a40 <xTaskCheckForTimeOut>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d132      	bne.n	8004b62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004afe:	f000 f9f1 	bl	8004ee4 <prvIsQueueEmpty>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d026      	beq.n	8004b56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b10:	f001 ff7c 	bl	8006a0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 f8fb 	bl	8005d14 <xTaskPriorityInherit>
 8004b1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b20:	f001 ffa4 	bl	8006a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 febd 	bl	80058ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b34:	f000 f984 	bl	8004e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b38:	f000 fcea 	bl	8005510 <xTaskResumeAll>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f47f af68 	bne.w	8004a14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <xQueueSemaphoreTake+0x214>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	e75e      	b.n	8004a14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b58:	f000 f972 	bl	8004e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b5c:	f000 fcd8 	bl	8005510 <xTaskResumeAll>
 8004b60:	e758      	b.n	8004a14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b64:	f000 f96c 	bl	8004e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b68:	f000 fcd2 	bl	8005510 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b6e:	f000 f9b9 	bl	8004ee4 <prvIsQueueEmpty>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f43f af4d 	beq.w	8004a14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004b80:	f001 ff44 	bl	8006a0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b86:	f000 f8b4 	bl	8004cf2 <prvGetDisinheritPriorityAfterTimeout>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 f99a 	bl	8005ecc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b98:	f001 ff68 	bl	8006a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3738      	adds	r7, #56	; 0x38
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08e      	sub	sp, #56	; 0x38
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	623b      	str	r3, [r7, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <xQueueReceiveFromISR+0x3a>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <xQueueReceiveFromISR+0x3e>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <xQueueReceiveFromISR+0x40>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	61fb      	str	r3, [r7, #28]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c06:	f001 ffc3 	bl	8006b90 <vPortValidateInterruptPriority>
	__asm volatile
 8004c0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61ba      	str	r2, [r7, #24]
 8004c20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02f      	beq.n	8004c92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c40:	f000 f8d8 	bl	8004df4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	1e5a      	subs	r2, r3, #1
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d112      	bne.n	8004c7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	3310      	adds	r3, #16
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fe72 	bl	800594c <xTaskRemoveFromEventList>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e007      	b.n	8004c8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c80:	3301      	adds	r3, #1
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	b25a      	sxtb	r2, r3
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c90:	e001      	b.n	8004c96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f383 8811 	msr	BASEPRI, r3
}
 8004ca0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3738      	adds	r7, #56	; 0x38
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vQueueDelete+0x28>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60bb      	str	r3, [r7, #8]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f95b 	bl	8004f90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f002 f855 	bl	8006d94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e001      	b.n	8004d14 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d14:	68fb      	ldr	r3, [r7, #12]
	}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10d      	bne.n	8004d5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d14d      	bne.n	8004de2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 f850 	bl	8005df0 <xTaskPriorityDisinherit>
 8004d50:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	e043      	b.n	8004de2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d119      	bne.n	8004d94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6898      	ldr	r0, [r3, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	f004 f992 	bl	8009094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d32b      	bcc.n	8004de2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	609a      	str	r2, [r3, #8]
 8004d92:	e026      	b.n	8004de2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68d8      	ldr	r0, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	f004 f978 	bl	8009094 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	425b      	negs	r3, r3
 8004dae:	441a      	add	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d207      	bcs.n	8004dd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	425b      	negs	r3, r3
 8004dca:	441a      	add	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d105      	bne.n	8004de2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dea:	697b      	ldr	r3, [r7, #20]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	441a      	add	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d303      	bcc.n	8004e28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68d9      	ldr	r1, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	461a      	mov	r2, r3
 8004e32:	6838      	ldr	r0, [r7, #0]
 8004e34:	f004 f92e 	bl	8009094 <memcpy>
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e48:	f001 fde0 	bl	8006a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e54:	e011      	b.n	8004e7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d012      	beq.n	8004e84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3324      	adds	r3, #36	; 0x24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fd72 	bl	800594c <xTaskRemoveFromEventList>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e6e:	f000 fe49 	bl	8005b04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dce9      	bgt.n	8004e56 <prvUnlockQueue+0x16>
 8004e82:	e000      	b.n	8004e86 <prvUnlockQueue+0x46>
					break;
 8004e84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e8e:	f001 fded 	bl	8006a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e92:	f001 fdbb 	bl	8006a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e9e:	e011      	b.n	8004ec4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3310      	adds	r3, #16
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fd4d 	bl	800594c <xTaskRemoveFromEventList>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004eb8:	f000 fe24 	bl	8005b04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	dce9      	bgt.n	8004ea0 <prvUnlockQueue+0x60>
 8004ecc:	e000      	b.n	8004ed0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ece:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	22ff      	movs	r2, #255	; 0xff
 8004ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ed8:	f001 fdc8 	bl	8006a6c <vPortExitCritical>
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eec:	f001 fd8e 	bl	8006a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e001      	b.n	8004f02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f02:	f001 fdb3 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f18:	f001 fd78 	bl	8006a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d102      	bne.n	8004f2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e001      	b.n	8004f32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f32:	f001 fd9b 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e014      	b.n	8004f7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f50:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <vQueueAddToRegistry+0x4c>)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f5c:	490b      	ldr	r1, [pc, #44]	; (8004f8c <vQueueAddToRegistry+0x4c>)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <vQueueAddToRegistry+0x4c>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f72:	e006      	b.n	8004f82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b07      	cmp	r3, #7
 8004f7e:	d9e7      	bls.n	8004f50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	20003000 	.word	0x20003000

08004f90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e016      	b.n	8004fcc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <vQueueUnregisterQueue+0x50>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d10b      	bne.n	8004fc6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <vQueueUnregisterQueue+0x50>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004fb8:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <vQueueUnregisterQueue+0x50>)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	605a      	str	r2, [r3, #4]
				break;
 8004fc4:	e006      	b.n	8004fd4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b07      	cmp	r3, #7
 8004fd0:	d9e5      	bls.n	8004f9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20003000 	.word	0x20003000

08004fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ff4:	f001 fd0a 	bl	8006a0c <vPortEnterCritical>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <vQueueWaitForMessageRestricted+0x2a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005014:	b25b      	sxtb	r3, r3
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d103      	bne.n	8005024 <vQueueWaitForMessageRestricted+0x40>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	f001 fd22 	bl	8006a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3324      	adds	r3, #36	; 0x24
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fc5b 	bl	80058f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff fefe 	bl	8004e40 <prvUnlockQueue>
	}
 8005044:	bf00      	nop
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af04      	add	r7, sp, #16
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	623b      	str	r3, [r7, #32]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xTaskCreateStatic+0x46>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	61fb      	str	r3, [r7, #28]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005092:	23bc      	movs	r3, #188	; 0xbc
 8005094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2bbc      	cmp	r3, #188	; 0xbc
 800509a:	d00a      	beq.n	80050b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	61bb      	str	r3, [r7, #24]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01e      	beq.n	80050f6 <xTaskCreateStatic+0xaa>
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01b      	beq.n	80050f6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050d0:	2300      	movs	r3, #0
 80050d2:	9303      	str	r3, [sp, #12]
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	9302      	str	r3, [sp, #8]
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f851 	bl	8005190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f0:	f000 f8ec 	bl	80052cc <prvAddNewTaskToReadyList>
 80050f4:	e001      	b.n	80050fa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050fa:	697b      	ldr	r3, [r7, #20]
	}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3728      	adds	r7, #40	; 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	; 0x30
 8005108:	af04      	add	r7, sp, #16
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4618      	mov	r0, r3
 800511a:	f001 fd77 	bl	8006c0c <pvPortMalloc>
 800511e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00e      	beq.n	8005144 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005126:	20bc      	movs	r0, #188	; 0xbc
 8005128:	f001 fd70 	bl	8006c0c <pvPortMalloc>
 800512c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
 800513a:	e005      	b.n	8005148 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800513c:	6978      	ldr	r0, [r7, #20]
 800513e:	f001 fe29 	bl	8006d94 <vPortFree>
 8005142:	e001      	b.n	8005148 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d017      	beq.n	800517e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	2300      	movs	r3, #0
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	9302      	str	r3, [sp, #8]
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f80f 	bl	8005190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005172:	69f8      	ldr	r0, [r7, #28]
 8005174:	f000 f8aa 	bl	80052cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e002      	b.n	8005184 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005184:	69bb      	ldr	r3, [r7, #24]
	}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	461a      	mov	r2, r3
 80051a8:	21a5      	movs	r1, #165	; 0xa5
 80051aa:	f003 ff81 	bl	80090b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	3b01      	subs	r3, #1
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	617b      	str	r3, [r7, #20]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e012      	b.n	8005214 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	7819      	ldrb	r1, [r3, #0]
 80051f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	3334      	adds	r3, #52	; 0x34
 80051fe:	460a      	mov	r2, r1
 8005200:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3301      	adds	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d9e9      	bls.n	80051ee <prvInitialiseNewTask+0x5e>
 800521a:	e000      	b.n	800521e <prvInitialiseNewTask+0x8e>
		{
			break;
 800521c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	2b37      	cmp	r3, #55	; 0x37
 800522a:	d901      	bls.n	8005230 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800522c:	2337      	movs	r3, #55	; 0x37
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005234:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	2200      	movs	r2, #0
 8005240:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	3304      	adds	r3, #4
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fe65 	bl	8003f16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	3318      	adds	r3, #24
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe fe60 	bl	8003f16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	2200      	movs	r2, #0
 8005278:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	3354      	adds	r3, #84	; 0x54
 8005280:	2260      	movs	r2, #96	; 0x60
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f003 ff13 	bl	80090b0 <memset>
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <prvInitialiseNewTask+0x130>)
 800528e:	659a      	str	r2, [r3, #88]	; 0x58
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <prvInitialiseNewTask+0x134>)
 8005294:	65da      	str	r2, [r3, #92]	; 0x5c
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <prvInitialiseNewTask+0x138>)
 800529a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	69b8      	ldr	r0, [r7, #24]
 80052a2:	f001 fac3 	bl	800682c <pxPortInitialiseStack>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b8:	bf00      	nop
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	08009578 	.word	0x08009578
 80052c4:	08009598 	.word	0x08009598
 80052c8:	08009558 	.word	0x08009558

080052cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052d4:	f001 fb9a 	bl	8006a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052d8:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a2c      	ldr	r2, [pc, #176]	; (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052e2:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <prvAddNewTaskToReadyList+0xc8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ea:	4a2a      	ldr	r2, [pc, #168]	; (8005394 <prvAddNewTaskToReadyList+0xc8>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052f0:	4b27      	ldr	r3, [pc, #156]	; (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d110      	bne.n	800531a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052f8:	f000 fc28 	bl	8005b4c <prvInitialiseTaskLists>
 80052fc:	e00d      	b.n	800531a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052fe:	4b26      	ldr	r3, [pc, #152]	; (8005398 <prvAddNewTaskToReadyList+0xcc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005306:	4b23      	ldr	r3, [pc, #140]	; (8005394 <prvAddNewTaskToReadyList+0xc8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	429a      	cmp	r2, r3
 8005312:	d802      	bhi.n	800531a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <prvAddNewTaskToReadyList+0xc8>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <prvAddNewTaskToReadyList+0xd0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a1e      	ldr	r2, [pc, #120]	; (800539c <prvAddNewTaskToReadyList+0xd0>)
 8005322:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005324:	4b1d      	ldr	r3, [pc, #116]	; (800539c <prvAddNewTaskToReadyList+0xd0>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <prvAddNewTaskToReadyList+0xd4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d903      	bls.n	8005340 <prvAddNewTaskToReadyList+0x74>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <prvAddNewTaskToReadyList+0xd4>)
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <prvAddNewTaskToReadyList+0xd8>)
 800534e:	441a      	add	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe fde9 	bl	8003f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800535c:	f001 fb86 	bl	8006a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <prvAddNewTaskToReadyList+0xcc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <prvAddNewTaskToReadyList+0xc8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	429a      	cmp	r2, r3
 8005374:	d207      	bcs.n	8005386 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <prvAddNewTaskToReadyList+0xdc>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000d9c 	.word	0x20000d9c
 8005394:	200008c8 	.word	0x200008c8
 8005398:	20000da8 	.word	0x20000da8
 800539c:	20000db8 	.word	0x20000db8
 80053a0:	20000da4 	.word	0x20000da4
 80053a4:	200008cc 	.word	0x200008cc
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d017      	beq.n	80053ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <vTaskDelay+0x60>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <vTaskDelay+0x30>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053dc:	f000 f88a 	bl	80054f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053e0:	2100      	movs	r1, #0
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fe0c 	bl	8006000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053e8:	f000 f892 	bl	8005510 <xTaskResumeAll>
 80053ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d107      	bne.n	8005404 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <vTaskDelay+0x64>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000dc4 	.word	0x20000dc4
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005422:	463a      	mov	r2, r7
 8005424:	1d39      	adds	r1, r7, #4
 8005426:	f107 0308 	add.w	r3, r7, #8
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fd22 	bl	8003e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	9202      	str	r2, [sp, #8]
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	2300      	movs	r3, #0
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	2300      	movs	r3, #0
 8005440:	460a      	mov	r2, r1
 8005442:	4924      	ldr	r1, [pc, #144]	; (80054d4 <vTaskStartScheduler+0xc0>)
 8005444:	4824      	ldr	r0, [pc, #144]	; (80054d8 <vTaskStartScheduler+0xc4>)
 8005446:	f7ff fe01 	bl	800504c <xTaskCreateStatic>
 800544a:	4603      	mov	r3, r0
 800544c:	4a23      	ldr	r2, [pc, #140]	; (80054dc <vTaskStartScheduler+0xc8>)
 800544e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005450:	4b22      	ldr	r3, [pc, #136]	; (80054dc <vTaskStartScheduler+0xc8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005458:	2301      	movs	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e001      	b.n	8005462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d102      	bne.n	800546e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005468:	f000 fe1e 	bl	80060a8 <xTimerCreateTimerTask>
 800546c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11b      	bne.n	80054ac <vTaskStartScheduler+0x98>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	613b      	str	r3, [r7, #16]
}
 8005486:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <vTaskStartScheduler+0xcc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3354      	adds	r3, #84	; 0x54
 800548e:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <vTaskStartScheduler+0xd0>)
 8005490:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <vTaskStartScheduler+0xd4>)
 8005494:	f04f 32ff 	mov.w	r2, #4294967295
 8005498:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <vTaskStartScheduler+0xd8>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <vTaskStartScheduler+0xdc>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a6:	f001 fa3f 	bl	8006928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054aa:	e00e      	b.n	80054ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d10a      	bne.n	80054ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	60fb      	str	r3, [r7, #12]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <vTaskStartScheduler+0xb4>
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	0800928c 	.word	0x0800928c
 80054d8:	08005b1d 	.word	0x08005b1d
 80054dc:	20000dc0 	.word	0x20000dc0
 80054e0:	200008c8 	.word	0x200008c8
 80054e4:	200000c8 	.word	0x200000c8
 80054e8:	20000dbc 	.word	0x20000dbc
 80054ec:	20000da8 	.word	0x20000da8
 80054f0:	20000da0 	.word	0x20000da0

080054f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <vTaskSuspendAll+0x18>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a03      	ldr	r2, [pc, #12]	; (800550c <vTaskSuspendAll+0x18>)
 8005500:	6013      	str	r3, [r2, #0]
}
 8005502:	bf00      	nop
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000dc4 	.word	0x20000dc4

08005510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800551e:	4b42      	ldr	r3, [pc, #264]	; (8005628 <xTaskResumeAll+0x118>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <xTaskResumeAll+0x2c>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	603b      	str	r3, [r7, #0]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800553c:	f001 fa66 	bl	8006a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005540:	4b39      	ldr	r3, [pc, #228]	; (8005628 <xTaskResumeAll+0x118>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3b01      	subs	r3, #1
 8005546:	4a38      	ldr	r2, [pc, #224]	; (8005628 <xTaskResumeAll+0x118>)
 8005548:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554a:	4b37      	ldr	r3, [pc, #220]	; (8005628 <xTaskResumeAll+0x118>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d162      	bne.n	8005618 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <xTaskResumeAll+0x11c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d05e      	beq.n	8005618 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800555a:	e02f      	b.n	80055bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800555c:	4b34      	ldr	r3, [pc, #208]	; (8005630 <xTaskResumeAll+0x120>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3318      	adds	r3, #24
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fd3b 	bl	8003fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3304      	adds	r3, #4
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fd36 	bl	8003fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <xTaskResumeAll+0x124>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d903      	bls.n	800558c <xTaskResumeAll+0x7c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <xTaskResumeAll+0x124>)
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <xTaskResumeAll+0x128>)
 800559a:	441a      	add	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fe fcc3 	bl	8003f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ac:	4b23      	ldr	r3, [pc, #140]	; (800563c <xTaskResumeAll+0x12c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055b6:	4b22      	ldr	r3, [pc, #136]	; (8005640 <xTaskResumeAll+0x130>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055bc:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <xTaskResumeAll+0x120>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1cb      	bne.n	800555c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ca:	f000 fb61 	bl	8005c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055ce:	4b1d      	ldr	r3, [pc, #116]	; (8005644 <xTaskResumeAll+0x134>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d010      	beq.n	80055fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055da:	f000 f845 	bl	8005668 <xTaskIncrementTick>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <xTaskResumeAll+0x130>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f1      	bne.n	80055da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <xTaskResumeAll+0x134>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055fc:	4b10      	ldr	r3, [pc, #64]	; (8005640 <xTaskResumeAll+0x130>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <xTaskResumeAll+0x138>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005618:	f001 fa28 	bl	8006a6c <vPortExitCritical>

	return xAlreadyYielded;
 800561c:	68bb      	ldr	r3, [r7, #8]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000dc4 	.word	0x20000dc4
 800562c:	20000d9c 	.word	0x20000d9c
 8005630:	20000d5c 	.word	0x20000d5c
 8005634:	20000da4 	.word	0x20000da4
 8005638:	200008cc 	.word	0x200008cc
 800563c:	200008c8 	.word	0x200008c8
 8005640:	20000db0 	.word	0x20000db0
 8005644:	20000dac 	.word	0x20000dac
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005652:	4b04      	ldr	r3, [pc, #16]	; (8005664 <xTaskGetTickCount+0x18>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005658:	687b      	ldr	r3, [r7, #4]
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	20000da0 	.word	0x20000da0

08005668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005672:	4b51      	ldr	r3, [pc, #324]	; (80057b8 <xTaskIncrementTick+0x150>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 808e 	bne.w	8005798 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800567c:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <xTaskIncrementTick+0x154>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005684:	4a4d      	ldr	r2, [pc, #308]	; (80057bc <xTaskIncrementTick+0x154>)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d120      	bne.n	80056d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005690:	4b4b      	ldr	r3, [pc, #300]	; (80057c0 <xTaskIncrementTick+0x158>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	603b      	str	r3, [r7, #0]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <xTaskIncrementTick+0x46>
 80056b0:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <xTaskIncrementTick+0x158>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	4b43      	ldr	r3, [pc, #268]	; (80057c4 <xTaskIncrementTick+0x15c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a41      	ldr	r2, [pc, #260]	; (80057c0 <xTaskIncrementTick+0x158>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	4a41      	ldr	r2, [pc, #260]	; (80057c4 <xTaskIncrementTick+0x15c>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b40      	ldr	r3, [pc, #256]	; (80057c8 <xTaskIncrementTick+0x160>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	4a3f      	ldr	r2, [pc, #252]	; (80057c8 <xTaskIncrementTick+0x160>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	f000 fadf 	bl	8005c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d2:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <xTaskIncrementTick+0x164>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d34e      	bcc.n	800577a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056dc:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <xTaskIncrementTick+0x158>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xTaskIncrementTick+0x82>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xTaskIncrementTick+0x84>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <xTaskIncrementTick+0x164>)
 80056f2:	f04f 32ff 	mov.w	r2, #4294967295
 80056f6:	601a      	str	r2, [r3, #0]
					break;
 80056f8:	e03f      	b.n	800577a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056fa:	4b31      	ldr	r3, [pc, #196]	; (80057c0 <xTaskIncrementTick+0x158>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005712:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <xTaskIncrementTick+0x164>)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6013      	str	r3, [r2, #0]
						break;
 8005718:	e02f      	b.n	800577a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fc60 	bl	8003fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3318      	adds	r3, #24
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fc57 	bl	8003fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <xTaskIncrementTick+0x168>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d903      	bls.n	800574a <xTaskIncrementTick+0xe2>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <xTaskIncrementTick+0x168>)
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <xTaskIncrementTick+0x16c>)
 8005758:	441a      	add	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe fbe4 	bl	8003f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576a:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <xTaskIncrementTick+0x170>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	429a      	cmp	r2, r3
 8005772:	d3b3      	bcc.n	80056dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005778:	e7b0      	b.n	80056dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800577a:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <xTaskIncrementTick+0x170>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	4914      	ldr	r1, [pc, #80]	; (80057d4 <xTaskIncrementTick+0x16c>)
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d907      	bls.n	80057a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005792:	2301      	movs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e004      	b.n	80057a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005798:	4b10      	ldr	r3, [pc, #64]	; (80057dc <xTaskIncrementTick+0x174>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	4a0f      	ldr	r2, [pc, #60]	; (80057dc <xTaskIncrementTick+0x174>)
 80057a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <xTaskIncrementTick+0x178>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80057aa:	2301      	movs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057ae:	697b      	ldr	r3, [r7, #20]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000dc4 	.word	0x20000dc4
 80057bc:	20000da0 	.word	0x20000da0
 80057c0:	20000d54 	.word	0x20000d54
 80057c4:	20000d58 	.word	0x20000d58
 80057c8:	20000db4 	.word	0x20000db4
 80057cc:	20000dbc 	.word	0x20000dbc
 80057d0:	20000da4 	.word	0x20000da4
 80057d4:	200008cc 	.word	0x200008cc
 80057d8:	200008c8 	.word	0x200008c8
 80057dc:	20000dac 	.word	0x20000dac
 80057e0:	20000db0 	.word	0x20000db0

080057e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <vTaskSwitchContext+0xb0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057f2:	4b29      	ldr	r3, [pc, #164]	; (8005898 <vTaskSwitchContext+0xb4>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f8:	e046      	b.n	8005888 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057fa:	4b27      	ldr	r3, [pc, #156]	; (8005898 <vTaskSwitchContext+0xb4>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005800:	4b26      	ldr	r3, [pc, #152]	; (800589c <vTaskSwitchContext+0xb8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e010      	b.n	800582a <vTaskSwitchContext+0x46>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <vTaskSwitchContext+0x40>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <vTaskSwitchContext+0x3e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3b01      	subs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	491d      	ldr	r1, [pc, #116]	; (80058a0 <vTaskSwitchContext+0xbc>)
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0e4      	beq.n	8005808 <vTaskSwitchContext+0x24>
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <vTaskSwitchContext+0xbc>)
 800584a:	4413      	add	r3, r2
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3308      	adds	r3, #8
 8005860:	429a      	cmp	r2, r3
 8005862:	d104      	bne.n	800586e <vTaskSwitchContext+0x8a>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <vTaskSwitchContext+0xc0>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	4a08      	ldr	r2, [pc, #32]	; (800589c <vTaskSwitchContext+0xb8>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <vTaskSwitchContext+0xc0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3354      	adds	r3, #84	; 0x54
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <vTaskSwitchContext+0xc4>)
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000dc4 	.word	0x20000dc4
 8005898:	20000db0 	.word	0x20000db0
 800589c:	20000da4 	.word	0x20000da4
 80058a0:	200008cc 	.word	0x200008cc
 80058a4:	200008c8 	.word	0x200008c8
 80058a8:	200000c8 	.word	0x200000c8

080058ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60fb      	str	r3, [r7, #12]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <vTaskPlaceOnEventList+0x44>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3318      	adds	r3, #24
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fe fb4a 	bl	8003f74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058e0:	2101      	movs	r1, #1
 80058e2:	6838      	ldr	r0, [r7, #0]
 80058e4:	f000 fb8c 	bl	8006000 <prvAddCurrentTaskToDelayedList>
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	200008c8 	.word	0x200008c8

080058f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617b      	str	r3, [r7, #20]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vTaskPlaceOnEventListRestricted+0x54>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3318      	adds	r3, #24
 8005922:	4619      	mov	r1, r3
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7fe fb02 	bl	8003f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005930:	f04f 33ff 	mov.w	r3, #4294967295
 8005934:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f000 fb61 	bl	8006000 <prvAddCurrentTaskToDelayedList>
	}
 800593e:	bf00      	nop
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200008c8 	.word	0x200008c8

0800594c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60fb      	str	r3, [r7, #12]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3318      	adds	r3, #24
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe fb31 	bl	8003fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005982:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <xTaskRemoveFromEventList+0xb0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11d      	bne.n	80059c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fb28 	bl	8003fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <xTaskRemoveFromEventList+0xb4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d903      	bls.n	80059a8 <xTaskRemoveFromEventList+0x5c>
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <xTaskRemoveFromEventList+0xb4>)
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <xTaskRemoveFromEventList+0xb8>)
 80059b6:	441a      	add	r2, r3
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe fab5 	bl	8003f2e <vListInsertEnd>
 80059c4:	e005      	b.n	80059d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3318      	adds	r3, #24
 80059ca:	4619      	mov	r1, r3
 80059cc:	480e      	ldr	r0, [pc, #56]	; (8005a08 <xTaskRemoveFromEventList+0xbc>)
 80059ce:	f7fe faae 	bl	8003f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d6:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <xTaskRemoveFromEventList+0xc0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	429a      	cmp	r2, r3
 80059de:	d905      	bls.n	80059ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059e0:	2301      	movs	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <xTaskRemoveFromEventList+0xc4>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e001      	b.n	80059f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059f0:	697b      	ldr	r3, [r7, #20]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000dc4 	.word	0x20000dc4
 8005a00:	20000da4 	.word	0x20000da4
 8005a04:	200008cc 	.word	0x200008cc
 8005a08:	20000d5c 	.word	0x20000d5c
 8005a0c:	200008c8 	.word	0x200008c8
 8005a10:	20000db0 	.word	0x20000db0

08005a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <vTaskInternalSetTimeOutState+0x24>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <vTaskInternalSetTimeOutState+0x28>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000db4 	.word	0x20000db4
 8005a3c:	20000da0 	.word	0x20000da0

08005a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	613b      	str	r3, [r7, #16]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	60fb      	str	r3, [r7, #12]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a82:	f000 ffc3 	bl	8006a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a86:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <xTaskCheckForTimeOut+0xbc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d102      	bne.n	8005aa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e023      	b.n	8005aee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <xTaskCheckForTimeOut+0xc0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d007      	beq.n	8005ac2 <xTaskCheckForTimeOut+0x82>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	e015      	b.n	8005aee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d20b      	bcs.n	8005ae4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ff9b 	bl	8005a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	e004      	b.n	8005aee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aea:	2301      	movs	r3, #1
 8005aec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aee:	f000 ffbd 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 8005af2:	69fb      	ldr	r3, [r7, #28]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000da0 	.word	0x20000da0
 8005b00:	20000db4 	.word	0x20000db4

08005b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b08:	4b03      	ldr	r3, [pc, #12]	; (8005b18 <vTaskMissedYield+0x14>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000db0 	.word	0x20000db0

08005b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b24:	f000 f852 	bl	8005bcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <prvIdleTask+0x28>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d9f9      	bls.n	8005b24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <prvIdleTask+0x2c>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b40:	e7f0      	b.n	8005b24 <prvIdleTask+0x8>
 8005b42:	bf00      	nop
 8005b44:	200008cc 	.word	0x200008cc
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	e00c      	b.n	8005b72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <prvInitialiseTaskLists+0x60>)
 8005b64:	4413      	add	r3, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe f9b6 	bl	8003ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b37      	cmp	r3, #55	; 0x37
 8005b76:	d9ef      	bls.n	8005b58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b78:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <prvInitialiseTaskLists+0x64>)
 8005b7a:	f7fe f9ad 	bl	8003ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b7e:	480d      	ldr	r0, [pc, #52]	; (8005bb4 <prvInitialiseTaskLists+0x68>)
 8005b80:	f7fe f9aa 	bl	8003ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b84:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <prvInitialiseTaskLists+0x6c>)
 8005b86:	f7fe f9a7 	bl	8003ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b8a:	480c      	ldr	r0, [pc, #48]	; (8005bbc <prvInitialiseTaskLists+0x70>)
 8005b8c:	f7fe f9a4 	bl	8003ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b90:	480b      	ldr	r0, [pc, #44]	; (8005bc0 <prvInitialiseTaskLists+0x74>)
 8005b92:	f7fe f9a1 	bl	8003ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <prvInitialiseTaskLists+0x78>)
 8005b98:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <prvInitialiseTaskLists+0x64>)
 8005b9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <prvInitialiseTaskLists+0x7c>)
 8005b9e:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <prvInitialiseTaskLists+0x68>)
 8005ba0:	601a      	str	r2, [r3, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200008cc 	.word	0x200008cc
 8005bb0:	20000d2c 	.word	0x20000d2c
 8005bb4:	20000d40 	.word	0x20000d40
 8005bb8:	20000d5c 	.word	0x20000d5c
 8005bbc:	20000d70 	.word	0x20000d70
 8005bc0:	20000d88 	.word	0x20000d88
 8005bc4:	20000d54 	.word	0x20000d54
 8005bc8:	20000d58 	.word	0x20000d58

08005bcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bd2:	e019      	b.n	8005c08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bd4:	f000 ff1a 	bl	8006a0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <prvCheckTasksWaitingTermination+0x50>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe f9fd 	bl	8003fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <prvCheckTasksWaitingTermination+0x54>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <prvCheckTasksWaitingTermination+0x54>)
 8005bf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <prvCheckTasksWaitingTermination+0x58>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <prvCheckTasksWaitingTermination+0x58>)
 8005bfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bfe:	f000 ff35 	bl	8006a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f810 	bl	8005c28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <prvCheckTasksWaitingTermination+0x58>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e1      	bne.n	8005bd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000d70 	.word	0x20000d70
 8005c20:	20000d9c 	.word	0x20000d9c
 8005c24:	20000d84 	.word	0x20000d84

08005c28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3354      	adds	r3, #84	; 0x54
 8005c34:	4618      	mov	r0, r3
 8005c36:	f003 fa51 	bl	80090dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d108      	bne.n	8005c56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 f8a3 	bl	8006d94 <vPortFree>
				vPortFree( pxTCB );
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f8a0 	bl	8006d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c54:	e018      	b.n	8005c88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d103      	bne.n	8005c68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f897 	bl	8006d94 <vPortFree>
	}
 8005c66:	e00f      	b.n	8005c88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d00a      	beq.n	8005c88 <prvDeleteTCB+0x60>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <prvDeleteTCB+0x5e>
	}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c96:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <prvResetNextTaskUnblockTime+0x40>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <prvResetNextTaskUnblockTime+0x14>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <prvResetNextTaskUnblockTime+0x16>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <prvResetNextTaskUnblockTime+0x44>)
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cb2:	e008      	b.n	8005cc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <prvResetNextTaskUnblockTime+0x40>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <prvResetNextTaskUnblockTime+0x44>)
 8005cc4:	6013      	str	r3, [r2, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr
 8005cd0:	20000d54 	.word	0x20000d54
 8005cd4:	20000dbc 	.word	0x20000dbc

08005cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <xTaskGetSchedulerState+0x34>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	e008      	b.n	8005cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <xTaskGetSchedulerState+0x38>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	e001      	b.n	8005cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cfe:	687b      	ldr	r3, [r7, #4]
	}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000da8 	.word	0x20000da8
 8005d10:	20000dc4 	.word	0x20000dc4

08005d14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d056      	beq.n	8005dd8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <xTaskPriorityInherit+0xd0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d246      	bcs.n	8005dc6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	db06      	blt.n	8005d4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d40:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <xTaskPriorityInherit+0xd0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6959      	ldr	r1, [r3, #20]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <xTaskPriorityInherit+0xd4>)
 8005d60:	4413      	add	r3, r2
 8005d62:	4299      	cmp	r1, r3
 8005d64:	d101      	bne.n	8005d6a <xTaskPriorityInherit+0x56>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xTaskPriorityInherit+0x58>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d022      	beq.n	8005db6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe f935 	bl	8003fe4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d7a:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <xTaskPriorityInherit+0xd0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	4b18      	ldr	r3, [pc, #96]	; (8005dec <xTaskPriorityInherit+0xd8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d903      	bls.n	8005d98 <xTaskPriorityInherit+0x84>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a15      	ldr	r2, [pc, #84]	; (8005dec <xTaskPriorityInherit+0xd8>)
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <xTaskPriorityInherit+0xd4>)
 8005da6:	441a      	add	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f7fe f8bd 	bl	8003f2e <vListInsertEnd>
 8005db4:	e004      	b.n	8005dc0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <xTaskPriorityInherit+0xd0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e008      	b.n	8005dd8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <xTaskPriorityInherit+0xd0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d201      	bcs.n	8005dd8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	200008c8 	.word	0x200008c8
 8005de8:	200008cc 	.word	0x200008cc
 8005dec:	20000da4 	.word	0x20000da4

08005df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d056      	beq.n	8005eb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e06:	4b2e      	ldr	r3, [pc, #184]	; (8005ec0 <xTaskPriorityDisinherit+0xd0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d00a      	beq.n	8005e26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60bb      	str	r3, [r7, #8]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d02c      	beq.n	8005eb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d128      	bne.n	8005eb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe f8bc 	bl	8003fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <xTaskPriorityDisinherit+0xd4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d903      	bls.n	8005e94 <xTaskPriorityDisinherit+0xa4>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <xTaskPriorityDisinherit+0xd4>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <xTaskPriorityDisinherit+0xd8>)
 8005ea2:	441a      	add	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7fe f83f 	bl	8003f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eb4:	697b      	ldr	r3, [r7, #20]
	}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200008c8 	.word	0x200008c8
 8005ec4:	20000da4 	.word	0x20000da4
 8005ec8:	200008cc 	.word	0x200008cc

08005ecc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d06f      	beq.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	60fb      	str	r3, [r7, #12]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d902      	bls.n	8005f12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	e002      	b.n	8005f18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d050      	beq.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d14b      	bne.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f2c:	4b27      	ldr	r3, [pc, #156]	; (8005fcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d10a      	bne.n	8005f4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	60bb      	str	r3, [r7, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db04      	blt.n	8005f6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6959      	ldr	r1, [r3, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4299      	cmp	r1, r3
 8005f7e:	d101      	bne.n	8005f84 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01c      	beq.n	8005fc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe f828 	bl	8003fe4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d903      	bls.n	8005fa8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	4a0b      	ldr	r2, [pc, #44]	; (8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005fb6:	441a      	add	r2, r3
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fd ffb5 	bl	8003f2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fc4:	bf00      	nop
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200008c8 	.word	0x200008c8
 8005fd0:	200008cc 	.word	0x200008cc
 8005fd4:	20000da4 	.word	0x20000da4

08005fd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fea:	3201      	adds	r2, #1
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005fee:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <pvTaskIncrementMutexHeldCount+0x24>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
	}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	200008c8 	.word	0x200008c8

08006000 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <prvAddCurrentTaskToDelayedList+0x90>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006010:	4b20      	ldr	r3, [pc, #128]	; (8006094 <prvAddCurrentTaskToDelayedList+0x94>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3304      	adds	r3, #4
 8006016:	4618      	mov	r0, r3
 8006018:	f7fd ffe4 	bl	8003fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d10a      	bne.n	800603a <prvAddCurrentTaskToDelayedList+0x3a>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602a:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <prvAddCurrentTaskToDelayedList+0x94>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4819      	ldr	r0, [pc, #100]	; (8006098 <prvAddCurrentTaskToDelayedList+0x98>)
 8006034:	f7fd ff7b 	bl	8003f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006038:	e026      	b.n	8006088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <prvAddCurrentTaskToDelayedList+0x94>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	429a      	cmp	r2, r3
 8006050:	d209      	bcs.n	8006066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <prvAddCurrentTaskToDelayedList+0x94>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fd ff88 	bl	8003f74 <vListInsert>
}
 8006064:	e010      	b.n	8006088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006066:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <prvAddCurrentTaskToDelayedList+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f7fd ff7e 	bl	8003f74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d202      	bcs.n	8006088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006082:	4a08      	ldr	r2, [pc, #32]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6013      	str	r3, [r2, #0]
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000da0 	.word	0x20000da0
 8006094:	200008c8 	.word	0x200008c8
 8006098:	20000d88 	.word	0x20000d88
 800609c:	20000d58 	.word	0x20000d58
 80060a0:	20000d54 	.word	0x20000d54
 80060a4:	20000dbc 	.word	0x20000dbc

080060a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060b2:	f000 fb5b 	bl	800676c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <xTimerCreateTimerTask+0x80>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d021      	beq.n	8006102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060c6:	1d3a      	adds	r2, r7, #4
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	f107 030c 	add.w	r3, r7, #12
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd fee7 	bl	8003ea4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	9202      	str	r2, [sp, #8]
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	2302      	movs	r3, #2
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	460a      	mov	r2, r1
 80060e8:	4910      	ldr	r1, [pc, #64]	; (800612c <xTimerCreateTimerTask+0x84>)
 80060ea:	4811      	ldr	r0, [pc, #68]	; (8006130 <xTimerCreateTimerTask+0x88>)
 80060ec:	f7fe ffae 	bl	800504c <xTaskCreateStatic>
 80060f0:	4603      	mov	r3, r0
 80060f2:	4a10      	ldr	r2, [pc, #64]	; (8006134 <xTimerCreateTimerTask+0x8c>)
 80060f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <xTimerCreateTimerTask+0x8c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060fe:	2301      	movs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	613b      	str	r3, [r7, #16]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800611e:	697b      	ldr	r3, [r7, #20]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000df8 	.word	0x20000df8
 800612c:	08009294 	.word	0x08009294
 8006130:	08006375 	.word	0x08006375
 8006134:	20000dfc 	.word	0x20000dfc

08006138 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006146:	2030      	movs	r0, #48	; 0x30
 8006148:	f000 fd60 	bl	8006c0c <pvPortMalloc>
 800614c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f846 	bl	80061f4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006170:	697b      	ldr	r3, [r7, #20]
	}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800617a:	b580      	push	{r7, lr}
 800617c:	b08a      	sub	sp, #40	; 0x28
 800617e:	af02      	add	r7, sp, #8
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006188:	2330      	movs	r3, #48	; 0x30
 800618a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b30      	cmp	r3, #48	; 0x30
 8006190:	d00a      	beq.n	80061a8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	61bb      	str	r3, [r7, #24]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <xTimerCreateStatic+0x4a>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	617b      	str	r3, [r7, #20]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00d      	beq.n	80061ea <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f809 	bl	80061f4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80061ea:	69fb      	ldr	r3, [r7, #28]
	}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	617b      	str	r3, [r7, #20]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d015      	beq.n	8006250 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006224:	f000 faa2 	bl	800676c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7fd fe63 	bl	8003f16 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006250:	bf00      	nop
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006266:	2300      	movs	r3, #0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	623b      	str	r3, [r7, #32]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <xTimerGenericCommand+0x98>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d02a      	beq.n	80062e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b05      	cmp	r3, #5
 800629e:	dc18      	bgt.n	80062d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062a0:	f7ff fd1a 	bl	8005cd8 <xTaskGetSchedulerState>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d109      	bne.n	80062be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062aa:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <xTimerGenericCommand+0x98>)
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f107 0110 	add.w	r1, r7, #16
 80062b2:	2300      	movs	r3, #0
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	f7fe f869 	bl	800438c <xQueueGenericSend>
 80062ba:	6278      	str	r0, [r7, #36]	; 0x24
 80062bc:	e012      	b.n	80062e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062be:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <xTimerGenericCommand+0x98>)
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f107 0110 	add.w	r1, r7, #16
 80062c6:	2300      	movs	r3, #0
 80062c8:	2200      	movs	r2, #0
 80062ca:	f7fe f85f 	bl	800438c <xQueueGenericSend>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24
 80062d0:	e008      	b.n	80062e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <xTimerGenericCommand+0x98>)
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f107 0110 	add.w	r1, r7, #16
 80062da:	2300      	movs	r3, #0
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	f7fe f953 	bl	8004588 <xQueueGenericSendFromISR>
 80062e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3728      	adds	r7, #40	; 0x28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000df8 	.word	0x20000df8

080062f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062fe:	4b1c      	ldr	r3, [pc, #112]	; (8006370 <prvProcessExpiredTimer+0x7c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	3304      	adds	r3, #4
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd fe69 	bl	8003fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d122      	bne.n	8006360 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	18d1      	adds	r1, r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	6978      	ldr	r0, [r7, #20]
 8006328:	f000 f8c8 	bl	80064bc <prvInsertTimerInActiveList>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006332:	2300      	movs	r3, #0
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	2100      	movs	r1, #0
 800633c:	6978      	ldr	r0, [r7, #20]
 800633e:	f7ff ff8b 	bl	8006258 <xTimerGenericCommand>
 8006342:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60fb      	str	r3, [r7, #12]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	6978      	ldr	r0, [r7, #20]
 8006366:	4798      	blx	r3
}
 8006368:	bf00      	nop
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000df0 	.word	0x20000df0

08006374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800637c:	f107 0308 	add.w	r3, r7, #8
 8006380:	4618      	mov	r0, r3
 8006382:	f000 f857 	bl	8006434 <prvGetNextExpireTime>
 8006386:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4619      	mov	r1, r3
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f803 	bl	8006398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006392:	f000 f8d5 	bl	8006540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006396:	e7f1      	b.n	800637c <prvTimerTask+0x8>

08006398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063a2:	f7ff f8a7 	bl	80054f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 f866 	bl	800647c <prvSampleTimeNow>
 80063b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d130      	bne.n	800641a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <prvProcessTimerOrBlockTask+0x3c>
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d806      	bhi.n	80063d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063c6:	f7ff f8a3 	bl	8005510 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ff91 	bl	80062f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063d2:	e024      	b.n	800641e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <prvProcessTimerOrBlockTask+0x90>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063ec:	4b0f      	ldr	r3, [pc, #60]	; (800642c <prvProcessTimerOrBlockTask+0x94>)
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	f7fe fdf3 	bl	8004fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063fe:	f7ff f887 	bl	8005510 <xTaskResumeAll>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006408:	4b09      	ldr	r3, [pc, #36]	; (8006430 <prvProcessTimerOrBlockTask+0x98>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
}
 8006418:	e001      	b.n	800641e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800641a:	f7ff f879 	bl	8005510 <xTaskResumeAll>
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000df4 	.word	0x20000df4
 800642c:	20000df8 	.word	0x20000df8
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800643c:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <prvGetNextExpireTime+0x44>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf0c      	ite	eq
 8006446:	2301      	moveq	r3, #1
 8006448:	2300      	movne	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d105      	bne.n	8006466 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <prvGetNextExpireTime+0x44>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e001      	b.n	800646a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800646a:	68fb      	ldr	r3, [r7, #12]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000df0 	.word	0x20000df0

0800647c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006484:	f7ff f8e2 	bl	800564c <xTaskGetTickCount>
 8006488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <prvSampleTimeNow+0x3c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d205      	bcs.n	80064a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006494:	f000 f908 	bl	80066a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e002      	b.n	80064a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064a6:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <prvSampleTimeNow+0x3c>)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000e00 	.word	0x20000e00

080064bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d812      	bhi.n	8006508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d302      	bcc.n	80064f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064f0:	2301      	movs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e01b      	b.n	800652e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064f6:	4b10      	ldr	r3, [pc, #64]	; (8006538 <prvInsertTimerInActiveList+0x7c>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fd fd37 	bl	8003f74 <vListInsert>
 8006506:	e012      	b.n	800652e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d206      	bcs.n	800651e <prvInsertTimerInActiveList+0x62>
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e007      	b.n	800652e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800651e:	4b07      	ldr	r3, [pc, #28]	; (800653c <prvInsertTimerInActiveList+0x80>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3304      	adds	r3, #4
 8006526:	4619      	mov	r1, r3
 8006528:	4610      	mov	r0, r2
 800652a:	f7fd fd23 	bl	8003f74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800652e:	697b      	ldr	r3, [r7, #20]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000df4 	.word	0x20000df4
 800653c:	20000df0 	.word	0x20000df0

08006540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006546:	e09d      	b.n	8006684 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	da18      	bge.n	8006580 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800654e:	1d3b      	adds	r3, r7, #4
 8006550:	3304      	adds	r3, #4
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	61fb      	str	r3, [r7, #28]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006576:	6850      	ldr	r0, [r2, #4]
 8006578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657a:	6892      	ldr	r2, [r2, #8]
 800657c:	4611      	mov	r1, r2
 800657e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	db7d      	blt.n	8006682 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	3304      	adds	r3, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fd24 	bl	8003fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800659c:	463b      	mov	r3, r7
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff6c 	bl	800647c <prvSampleTimeNow>
 80065a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b09      	cmp	r3, #9
 80065aa:	d86b      	bhi.n	8006684 <prvProcessReceivedCommands+0x144>
 80065ac:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <prvProcessReceivedCommands+0x74>)
 80065ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b2:	bf00      	nop
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	08006685 	.word	0x08006685
 80065c4:	08006639 	.word	0x08006639
 80065c8:	08006671 	.word	0x08006671
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065dd 	.word	0x080065dd
 80065d4:	08006685 	.word	0x08006685
 80065d8:	08006639 	.word	0x08006639
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	18d1      	adds	r1, r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ea:	f7ff ff67 	bl	80064bc <prvInsertTimerInActiveList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d047      	beq.n	8006684 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d13f      	bne.n	8006684 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	441a      	add	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	2100      	movs	r1, #0
 8006614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006616:	f7ff fe1f 	bl	8006258 <xTimerGenericCommand>
 800661a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d130      	bne.n	8006684 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61bb      	str	r3, [r7, #24]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	617b      	str	r3, [r7, #20]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	699a      	ldr	r2, [r3, #24]
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	18d1      	adds	r1, r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666a:	f7ff ff27 	bl	80064bc <prvInsertTimerInActiveList>
					break;
 800666e:	e009      	b.n	8006684 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800667a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800667c:	f000 fb8a 	bl	8006d94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006680:	e000      	b.n	8006684 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006682:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <prvProcessReceivedCommands+0x164>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	1d39      	adds	r1, r7, #4
 800668a:	2200      	movs	r2, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe f8a1 	bl	80047d4 <xQueueReceive>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	f47f af57 	bne.w	8006548 <prvProcessReceivedCommands+0x8>
	}
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	3730      	adds	r7, #48	; 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20000df8 	.word	0x20000df8

080066a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ae:	e045      	b.n	800673c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066b0:	4b2c      	ldr	r3, [pc, #176]	; (8006764 <prvSwitchTimerLists+0xbc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ba:	4b2a      	ldr	r3, [pc, #168]	; (8006764 <prvSwitchTimerLists+0xbc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fd fc8b 	bl	8003fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d12e      	bne.n	800673c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4413      	add	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d90e      	bls.n	800670e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066fc:	4b19      	ldr	r3, [pc, #100]	; (8006764 <prvSwitchTimerLists+0xbc>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3304      	adds	r3, #4
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7fd fc34 	bl	8003f74 <vListInsert>
 800670c:	e016      	b.n	800673c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800670e:	2300      	movs	r3, #0
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	2300      	movs	r3, #0
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	2100      	movs	r1, #0
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff fd9d 	bl	8006258 <xTimerGenericCommand>
 800671e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	603b      	str	r3, [r7, #0]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvSwitchTimerLists+0xbc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1b4      	bne.n	80066b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <prvSwitchTimerLists+0xbc>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <prvSwitchTimerLists+0xc0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a04      	ldr	r2, [pc, #16]	; (8006764 <prvSwitchTimerLists+0xbc>)
 8006752:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006754:	4a04      	ldr	r2, [pc, #16]	; (8006768 <prvSwitchTimerLists+0xc0>)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6013      	str	r3, [r2, #0]
}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000df0 	.word	0x20000df0
 8006768:	20000df4 	.word	0x20000df4

0800676c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006772:	f000 f94b 	bl	8006a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d120      	bne.n	80067c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800677e:	4814      	ldr	r0, [pc, #80]	; (80067d0 <prvCheckForValidListAndQueue+0x64>)
 8006780:	f7fd fbaa 	bl	8003ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006784:	4813      	ldr	r0, [pc, #76]	; (80067d4 <prvCheckForValidListAndQueue+0x68>)
 8006786:	f7fd fba7 	bl	8003ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800678a:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <prvCheckForValidListAndQueue+0x6c>)
 800678c:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <prvCheckForValidListAndQueue+0x64>)
 800678e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006790:	4b12      	ldr	r3, [pc, #72]	; (80067dc <prvCheckForValidListAndQueue+0x70>)
 8006792:	4a10      	ldr	r2, [pc, #64]	; (80067d4 <prvCheckForValidListAndQueue+0x68>)
 8006794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006796:	2300      	movs	r3, #0
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <prvCheckForValidListAndQueue+0x74>)
 800679c:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <prvCheckForValidListAndQueue+0x78>)
 800679e:	2110      	movs	r1, #16
 80067a0:	200a      	movs	r0, #10
 80067a2:	f7fd fcb1 	bl	8004108 <xQueueGenericCreateStatic>
 80067a6:	4603      	mov	r3, r0
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 80067aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067ac:	4b07      	ldr	r3, [pc, #28]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <prvCheckForValidListAndQueue+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	490b      	ldr	r1, [pc, #44]	; (80067e8 <prvCheckForValidListAndQueue+0x7c>)
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fbc0 	bl	8004f40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067c0:	f000 f954 	bl	8006a6c <vPortExitCritical>
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000df8 	.word	0x20000df8
 80067d0:	20000dc8 	.word	0x20000dc8
 80067d4:	20000ddc 	.word	0x20000ddc
 80067d8:	20000df0 	.word	0x20000df0
 80067dc:	20000df4 	.word	0x20000df4
 80067e0:	20000ea4 	.word	0x20000ea4
 80067e4:	20000e04 	.word	0x20000e04
 80067e8:	0800929c 	.word	0x0800929c

080067ec <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <pvTimerGetTimerID+0x28>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006814:	f000 f8fa 	bl	8006a0c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800681e:	f000 f925 	bl	8006a6c <vPortExitCritical>

	return pvReturn;
 8006822:	693b      	ldr	r3, [r7, #16]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b04      	subs	r3, #4
 800683c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b04      	subs	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b04      	subs	r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800685c:	4a08      	ldr	r2, [pc, #32]	; (8006880 <pxPortInitialiseStack+0x54>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b14      	subs	r3, #20
 8006866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3b20      	subs	r3, #32
 8006872:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006874:	68fb      	ldr	r3, [r7, #12]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr
 8006880:	08006885 	.word	0x08006885

08006884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800688e:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <prvTaskExitError+0x54>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d00a      	beq.n	80068ae <prvTaskExitError+0x2a>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <prvTaskExitError+0x28>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	60bb      	str	r3, [r7, #8]
}
 80068c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068c2:	bf00      	nop
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0fc      	beq.n	80068c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	2000009c 	.word	0x2000009c
 80068dc:	00000000 	.word	0x00000000

080068e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <pxCurrentTCBConst2>)
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068ea:	f380 8809 	msr	PSP, r0
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80068fe:	4770      	bx	lr

08006900 <pxCurrentTCBConst2>:
 8006900:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006908:	4806      	ldr	r0, [pc, #24]	; (8006924 <prvPortStartFirstTask+0x1c>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	b662      	cpsie	i
 8006914:	b661      	cpsie	f
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	df00      	svc	0
 8006920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006922:	bf00      	nop
 8006924:	e000ed08 	.word	0xe000ed08

08006928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800692e:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <xPortStartScheduler+0xd0>)
 8006930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4b2a      	ldr	r3, [pc, #168]	; (80069fc <xPortStartScheduler+0xd4>)
 8006954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006956:	4b2a      	ldr	r3, [pc, #168]	; (8006a00 <xPortStartScheduler+0xd8>)
 8006958:	2207      	movs	r2, #7
 800695a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800695c:	e009      	b.n	8006972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800695e:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <xPortStartScheduler+0xd8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3b01      	subs	r3, #1
 8006964:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <xPortStartScheduler+0xd8>)
 8006966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d0ef      	beq.n	800695e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <xPortStartScheduler+0xd8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1c3 0307 	rsb	r3, r3, #7
 8006986:	2b04      	cmp	r3, #4
 8006988:	d00a      	beq.n	80069a0 <xPortStartScheduler+0x78>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60bb      	str	r3, [r7, #8]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069a0:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <xPortStartScheduler+0xd8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <xPortStartScheduler+0xd8>)
 80069a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069aa:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <xPortStartScheduler+0xd8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069b2:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <xPortStartScheduler+0xd8>)
 80069b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069be:	4b11      	ldr	r3, [pc, #68]	; (8006a04 <xPortStartScheduler+0xdc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <xPortStartScheduler+0xdc>)
 80069c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069ca:	4b0e      	ldr	r3, [pc, #56]	; (8006a04 <xPortStartScheduler+0xdc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a0d      	ldr	r2, [pc, #52]	; (8006a04 <xPortStartScheduler+0xdc>)
 80069d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069d6:	f000 f8b9 	bl	8006b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069da:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <xPortStartScheduler+0xe0>)
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069e0:	f7ff ff92 	bl	8006908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069e4:	f7fe fefe 	bl	80057e4 <vTaskSwitchContext>
	prvTaskExitError();
 80069e8:	f7ff ff4c 	bl	8006884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	e000e400 	.word	0xe000e400
 80069fc:	20000ef4 	.word	0x20000ef4
 8006a00:	20000ef8 	.word	0x20000ef8
 8006a04:	e000ed20 	.word	0xe000ed20
 8006a08:	2000009c 	.word	0x2000009c

08006a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	607b      	str	r3, [r7, #4]
}
 8006a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a26:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <vPortEnterCritical+0x58>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <vPortEnterCritical+0x58>)
 8006a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a30:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <vPortEnterCritical+0x58>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10f      	bne.n	8006a58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a38:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <vPortEnterCritical+0x5c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	603b      	str	r3, [r7, #0]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vPortEnterCritical+0x4a>
	}
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	2000009c 	.word	0x2000009c
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <vPortExitCritical+0x4c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <vPortExitCritical+0x24>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	607b      	str	r3, [r7, #4]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a90:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <vPortExitCritical+0x4c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <vPortExitCritical+0x4c>)
 8006a98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <vPortExitCritical+0x4c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d105      	bne.n	8006aae <vPortExitCritical+0x42>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	f383 8811 	msr	BASEPRI, r3
}
 8006aac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr
 8006ab8:	2000009c 	.word	0x2000009c
 8006abc:	00000000 	.word	0x00000000

08006ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ac0:	f3ef 8009 	mrs	r0, PSP
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <pxCurrentTCBConst>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ad0:	6010      	str	r0, [r2, #0]
 8006ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ada:	f380 8811 	msr	BASEPRI, r0
 8006ade:	f7fe fe81 	bl	80057e4 <vTaskSwitchContext>
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8811 	msr	BASEPRI, r0
 8006aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	6808      	ldr	r0, [r1, #0]
 8006af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006af6:	f380 8809 	msr	PSP, r0
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	4770      	bx	lr

08006b00 <pxCurrentTCBConst>:
 8006b00:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b22:	f7fe fda1 	bl	8005668 <xTaskIncrementTick>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <SysTick_Handler+0x40>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f383 8811 	msr	BASEPRI, r3
}
 8006b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b50:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <vPortSetupTimerInterrupt+0x30>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <vPortSetupTimerInterrupt+0x34>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <vPortSetupTimerInterrupt+0x38>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a09      	ldr	r2, [pc, #36]	; (8006b88 <vPortSetupTimerInterrupt+0x3c>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <vPortSetupTimerInterrupt+0x40>)
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b6e:	4b03      	ldr	r3, [pc, #12]	; (8006b7c <vPortSetupTimerInterrupt+0x30>)
 8006b70:	2207      	movs	r2, #7
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr
 8006b7c:	e000e010 	.word	0xe000e010
 8006b80:	e000e018 	.word	0xe000e018
 8006b84:	20000000 	.word	0x20000000
 8006b88:	10624dd3 	.word	0x10624dd3
 8006b8c:	e000e014 	.word	0xe000e014

08006b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b96:	f3ef 8305 	mrs	r3, IPSR
 8006b9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b0f      	cmp	r3, #15
 8006ba0:	d914      	bls.n	8006bcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ba2:	4a16      	ldr	r2, [pc, #88]	; (8006bfc <vPortValidateInterruptPriority+0x6c>)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bac:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <vPortValidateInterruptPriority+0x70>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	7afa      	ldrb	r2, [r7, #11]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d20a      	bcs.n	8006bcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	607b      	str	r3, [r7, #4]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <vPortValidateInterruptPriority+0x74>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <vPortValidateInterruptPriority+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d90a      	bls.n	8006bf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	603b      	str	r3, [r7, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <vPortValidateInterruptPriority+0x60>
	}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr
 8006bfc:	e000e3f0 	.word	0xe000e3f0
 8006c00:	20000ef4 	.word	0x20000ef4
 8006c04:	e000ed0c 	.word	0xe000ed0c
 8006c08:	20000ef8 	.word	0x20000ef8

08006c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c18:	f7fe fc6c 	bl	80054f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c1c:	4b58      	ldr	r3, [pc, #352]	; (8006d80 <pvPortMalloc+0x174>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c24:	f000 f910 	bl	8006e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c28:	4b56      	ldr	r3, [pc, #344]	; (8006d84 <pvPortMalloc+0x178>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 808e 	bne.w	8006d52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01d      	beq.n	8006c78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4413      	add	r3, r2
 8006c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d014      	beq.n	8006c78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f023 0307 	bic.w	r3, r3, #7
 8006c54:	3308      	adds	r3, #8
 8006c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <pvPortMalloc+0x6c>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	617b      	str	r3, [r7, #20]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d069      	beq.n	8006d52 <pvPortMalloc+0x146>
 8006c7e:	4b42      	ldr	r3, [pc, #264]	; (8006d88 <pvPortMalloc+0x17c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d864      	bhi.n	8006d52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c88:	4b40      	ldr	r3, [pc, #256]	; (8006d8c <pvPortMalloc+0x180>)
 8006c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <pvPortMalloc+0x180>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c92:	e004      	b.n	8006c9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d903      	bls.n	8006cb0 <pvPortMalloc+0xa4>
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f1      	bne.n	8006c94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cb0:	4b33      	ldr	r3, [pc, #204]	; (8006d80 <pvPortMalloc+0x174>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d04b      	beq.n	8006d52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	4413      	add	r3, r2
 8006cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	1ad2      	subs	r2, r2, r3
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d91f      	bls.n	8006d1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <pvPortMalloc+0xf8>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	613b      	str	r3, [r7, #16]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d16:	69b8      	ldr	r0, [r7, #24]
 8006d18:	f000 f8f8 	bl	8006f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <pvPortMalloc+0x17c>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <pvPortMalloc+0x17c>)
 8006d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <pvPortMalloc+0x17c>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <pvPortMalloc+0x184>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d203      	bcs.n	8006d3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <pvPortMalloc+0x17c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <pvPortMalloc+0x184>)
 8006d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <pvPortMalloc+0x178>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d52:	f7fe fbdd 	bl	8005510 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <pvPortMalloc+0x16a>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <pvPortMalloc+0x168>
	return pvReturn;
 8006d76:	69fb      	ldr	r3, [r7, #28]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20002304 	.word	0x20002304
 8006d84:	20002310 	.word	0x20002310
 8006d88:	20002308 	.word	0x20002308
 8006d8c:	200022fc 	.word	0x200022fc
 8006d90:	2000230c 	.word	0x2000230c

08006d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d048      	beq.n	8006e38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006da6:	2308      	movs	r3, #8
 8006da8:	425b      	negs	r3, r3
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4413      	add	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <vPortFree+0xac>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <vPortFree+0x44>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60fb      	str	r3, [r7, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <vPortFree+0x62>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60bb      	str	r3, [r7, #8]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <vPortFree+0xac>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d019      	beq.n	8006e38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d115      	bne.n	8006e38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <vPortFree+0xac>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	401a      	ands	r2, r3
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e1c:	f7fe fb6a 	bl	80054f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <vPortFree+0xb0>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4413      	add	r3, r2
 8006e2a:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <vPortFree+0xb0>)
 8006e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f000 f86c 	bl	8006f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e34:	f7fe fb6c 	bl	8005510 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20002310 	.word	0x20002310
 8006e44:	20002308 	.word	0x20002308

08006e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e54:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <prvHeapInit+0xac>)
 8006e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00c      	beq.n	8006e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3307      	adds	r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <prvHeapInit+0xac>)
 8006e78:	4413      	add	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <prvHeapInit+0xb0>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e86:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <prvHeapInit+0xb0>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e94:	2208      	movs	r2, #8
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0307 	bic.w	r3, r3, #7
 8006ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a15      	ldr	r2, [pc, #84]	; (8006efc <prvHeapInit+0xb4>)
 8006ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <prvHeapInit+0xb4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eb2:	4b12      	ldr	r3, [pc, #72]	; (8006efc <prvHeapInit+0xb4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <prvHeapInit+0xb4>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a0a      	ldr	r2, [pc, #40]	; (8006f00 <prvHeapInit+0xb8>)
 8006ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4a09      	ldr	r2, [pc, #36]	; (8006f04 <prvHeapInit+0xbc>)
 8006ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ee0:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <prvHeapInit+0xc0>)
 8006ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ee6:	601a      	str	r2, [r3, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000efc 	.word	0x20000efc
 8006ef8:	200022fc 	.word	0x200022fc
 8006efc:	20002304 	.word	0x20002304
 8006f00:	2000230c 	.word	0x2000230c
 8006f04:	20002308 	.word	0x20002308
 8006f08:	20002310 	.word	0x20002310

08006f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f14:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <prvInsertBlockIntoFreeList+0xa8>)
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e002      	b.n	8006f20 <prvInsertBlockIntoFreeList+0x14>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d8f7      	bhi.n	8006f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4413      	add	r3, r2
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d108      	bne.n	8006f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d118      	bne.n	8006f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <prvInsertBlockIntoFreeList+0xac>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d00d      	beq.n	8006f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	441a      	add	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	e008      	b.n	8006f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <prvInsertBlockIntoFreeList+0xac>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e003      	b.n	8006f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d002      	beq.n	8006faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr
 8006fb4:	200022fc 	.word	0x200022fc
 8006fb8:	20002304 	.word	0x20002304

08006fbc <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	22ff      	movs	r2, #255	; 0xff
 8006fca:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	22ff      	movs	r2, #255	; 0xff
 8006fd0:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 8006fd2:	e01c      	b.n	800700e <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	799a      	ldrb	r2, [r3, #6]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4053      	eors	r3, r2
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	79da      	ldrb	r2, [r3, #7]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	895b      	ldrh	r3, [r3, #10]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	; (800702c <slave_crc16+0x70>)
 8006ff6:	5c5b      	ldrb	r3, [r3, r1]
 8006ff8:	4053      	eors	r3, r2
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	895b      	ldrh	r3, [r3, #10]
 8007004:	461a      	mov	r2, r3
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <slave_crc16+0x74>)
 8007008:	5c9a      	ldrb	r2, [r3, r2]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	891b      	ldrh	r3, [r3, #8]
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	b291      	uxth	r1, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	8111      	strh	r1, [r2, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1da      	bne.n	8006fd4 <slave_crc16+0x18>
    }
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	0800934c 	.word	0x0800934c
 8007030:	0800944c 	.word	0x0800944c

08007034 <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007042:	2b07      	cmp	r3, #7
 8007044:	d905      	bls.n	8007052 <slave_validate_cmd+0x1e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7b1a      	ldrb	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	791b      	ldrb	r3, [r3, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d002      	beq.n	8007058 <slave_validate_cmd+0x24>
    {
        return osError;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	e026      	b.n	80070a6 <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800705e:	3b02      	subs	r3, #2
 8007060:	b29a      	uxth	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	330c      	adds	r3, #12
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff ffa5 	bl	8006fbc <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	799a      	ldrb	r2, [r3, #6]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800707c:	3b02      	subs	r3, #2
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	440b      	add	r3, r1
 8007082:	7b1b      	ldrb	r3, [r3, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d10a      	bne.n	800709e <slave_validate_cmd+0x6a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	79da      	ldrb	r2, [r3, #7]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007092:	3b01      	subs	r3, #1
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	440b      	add	r3, r1
 8007098:	7b1b      	ldrb	r3, [r3, #12]
 800709a:	429a      	cmp	r2, r3
 800709c:	d002      	beq.n	80070a4 <slave_validate_cmd+0x70>
    {
        return osError;
 800709e:	f04f 33ff 	mov.w	r3, #4294967295
 80070a2:	e000      	b.n	80070a6 <slave_validate_cmd+0x72>
    }
    return osOK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b087      	sub	sp, #28
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7b9b      	ldrb	r3, [r3, #14]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	b29a      	uxth	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7bdb      	ldrb	r3, [r3, #15]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7c1b      	ldrb	r3, [r3, #16]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7c5b      	ldrb	r3, [r3, #17]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4413      	add	r3, r2
 80070dc:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	b291      	uxth	r1, r2
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80070f6:	4619      	mov	r1, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	791a      	ldrb	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	440b      	add	r3, r1
 8007100:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007104:	8a7a      	ldrh	r2, [r7, #18]
 8007106:	8a3b      	ldrh	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710e:	dd20      	ble.n	8007152 <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7b5a      	ldrb	r2, [r3, #13]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800711a:	1c59      	adds	r1, r3, #1
 800711c:	b288      	uxth	r0, r1
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007124:	4619      	mov	r1, r3
 8007126:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800712a:	b2da      	uxtb	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	440b      	add	r3, r1
 8007130:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	b291      	uxth	r1, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007144:	461a      	mov	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	2202      	movs	r2, #2
 800714c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 8007150:	e072      	b.n	8007238 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 8007152:	8a3b      	ldrh	r3, [r7, #16]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <slave_handle_read_discs+0xb8>
 800715e:	8a3b      	ldrh	r3, [r7, #16]
 8007160:	08db      	lsrs	r3, r3, #3
 8007162:	b29b      	uxth	r3, r3
 8007164:	e004      	b.n	8007170 <slave_handle_read_discs+0xc2>
 8007166:	8a3b      	ldrh	r3, [r7, #16]
 8007168:	08db      	lsrs	r3, r3, #3
 800716a:	b29b      	uxth	r3, r3
 800716c:	3301      	adds	r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	b291      	uxth	r1, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007186:	4619      	mov	r1, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7b5a      	ldrb	r2, [r3, #13]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	440b      	add	r3, r1
 8007190:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	b291      	uxth	r1, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80071a4:	4619      	mov	r1, r3
 80071a6:	89fb      	ldrh	r3, [r7, #14]
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	440b      	add	r3, r1
 80071ae:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	82bb      	strh	r3, [r7, #20]
 80071b6:	e03a      	b.n	800722e <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 80071b8:	8abb      	ldrh	r3, [r7, #20]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 80071c4:	2300      	movs	r3, #0
 80071c6:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 80071c8:	8aba      	ldrh	r2, [r7, #20]
 80071ca:	8a3b      	ldrh	r3, [r7, #16]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d214      	bcs.n	80071fa <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80071d6:	8a79      	ldrh	r1, [r7, #18]
 80071d8:	8abb      	ldrh	r3, [r7, #20]
 80071da:	440b      	add	r3, r1
 80071dc:	5cd3      	ldrb	r3, [r2, r3]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d106      	bne.n	80071f0 <slave_handle_read_discs+0x142>
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	e002      	b.n	80071f6 <slave_handle_read_discs+0x148>
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	75fb      	strb	r3, [r7, #23]
 80071f8:	e002      	b.n	8007200 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	085b      	lsrs	r3, r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 8007200:	8abb      	ldrh	r3, [r7, #20]
 8007202:	3301      	adds	r3, #1
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10d      	bne.n	8007228 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	b291      	uxth	r1, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800721c:	461a      	mov	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	7dfa      	ldrb	r2, [r7, #23]
 8007224:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8007228:	8abb      	ldrh	r3, [r7, #20]
 800722a:	3301      	adds	r3, #1
 800722c:	82bb      	strh	r3, [r7, #20]
 800722e:	8aba      	ldrh	r2, [r7, #20]
 8007230:	89fb      	ldrh	r3, [r7, #14]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	429a      	cmp	r2, r3
 8007236:	dbbf      	blt.n	80071b8 <slave_handle_read_discs+0x10a>
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr

08007242 <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 8007242:	b480      	push	{r7}
 8007244:	b087      	sub	sp, #28
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7b9b      	ldrb	r3, [r3, #14]
 800724e:	b29b      	uxth	r3, r3
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7bdb      	ldrb	r3, [r3, #15]
 8007258:	b29b      	uxth	r3, r3
 800725a:	4413      	add	r3, r2
 800725c:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7c1b      	ldrb	r3, [r3, #16]
 8007262:	b29b      	uxth	r3, r3
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	b29a      	uxth	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	7c5b      	ldrb	r3, [r3, #17]
 800726c:	b29b      	uxth	r3, r3
 800726e:	4413      	add	r3, r2
 8007270:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	b291      	uxth	r1, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800728a:	4619      	mov	r1, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	791a      	ldrb	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	440b      	add	r3, r1
 8007294:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007298:	8a7a      	ldrh	r2, [r7, #18]
 800729a:	8a3b      	ldrh	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a2:	dd20      	ble.n	80072e6 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7b5a      	ldrb	r2, [r3, #13]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80072ae:	1c59      	adds	r1, r3, #1
 80072b0:	b288      	uxth	r0, r1
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80072b8:	4619      	mov	r1, r3
 80072ba:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	440b      	add	r3, r1
 80072c4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	b291      	uxth	r1, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 80072e4:	e074      	b.n	80073d0 <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 80072e6:	8a3b      	ldrh	r3, [r7, #16]
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <slave_handle_read_coils+0xb8>
 80072f2:	8a3b      	ldrh	r3, [r7, #16]
 80072f4:	08db      	lsrs	r3, r3, #3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	e004      	b.n	8007304 <slave_handle_read_coils+0xc2>
 80072fa:	8a3b      	ldrh	r3, [r7, #16]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3301      	adds	r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	b291      	uxth	r1, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800731a:	4619      	mov	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7b5a      	ldrb	r2, [r3, #13]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	440b      	add	r3, r1
 8007324:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	b291      	uxth	r1, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007338:	4619      	mov	r1, r3
 800733a:	89fb      	ldrh	r3, [r7, #14]
 800733c:	b2da      	uxtb	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	440b      	add	r3, r1
 8007342:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8007346:	2300      	movs	r3, #0
 8007348:	82bb      	strh	r3, [r7, #20]
 800734a:	e03c      	b.n	80073c6 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 800734c:	8abb      	ldrh	r3, [r7, #20]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 8007358:	2300      	movs	r3, #0
 800735a:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 800735c:	8aba      	ldrh	r2, [r7, #20]
 800735e:	8a3b      	ldrh	r3, [r7, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	d216      	bcs.n	8007392 <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800736a:	8a79      	ldrh	r1, [r7, #18]
 800736c:	8abb      	ldrh	r3, [r7, #20]
 800736e:	440b      	add	r3, r1
 8007370:	4413      	add	r3, r2
 8007372:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8007376:	2b01      	cmp	r3, #1
 8007378:	d106      	bne.n	8007388 <slave_handle_read_coils+0x146>
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e002      	b.n	800738e <slave_handle_read_coils+0x14c>
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	b2db      	uxtb	r3, r3
 800738e:	75fb      	strb	r3, [r7, #23]
 8007390:	e002      	b.n	8007398 <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 8007398:	8abb      	ldrh	r3, [r7, #20]
 800739a:	3301      	adds	r3, #1
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	b291      	uxth	r1, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80073b4:	461a      	mov	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	7dfa      	ldrb	r2, [r7, #23]
 80073bc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 80073c0:	8abb      	ldrh	r3, [r7, #20]
 80073c2:	3301      	adds	r3, #1
 80073c4:	82bb      	strh	r3, [r7, #20]
 80073c6:	8aba      	ldrh	r2, [r7, #20]
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	429a      	cmp	r2, r3
 80073ce:	dbbd      	blt.n	800734c <slave_handle_read_coils+0x10a>
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	7b9b      	ldrb	r3, [r3, #14]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	7bdb      	ldrb	r3, [r3, #15]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	4413      	add	r3, r2
 80073f4:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7c1b      	ldrb	r3, [r3, #16]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7c5b      	ldrb	r3, [r3, #17]
 8007404:	b29b      	uxth	r3, r3
 8007406:	4413      	add	r3, r2
 8007408:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	b291      	uxth	r1, r2
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007422:	4619      	mov	r1, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	791a      	ldrb	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	440b      	add	r3, r1
 800742c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007430:	89ba      	ldrh	r2, [r7, #12]
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	4413      	add	r3, r2
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	dd20      	ble.n	800747e <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7b5a      	ldrb	r2, [r3, #13]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007446:	1c59      	adds	r1, r3, #1
 8007448:	b288      	uxth	r0, r1
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007450:	4619      	mov	r1, r3
 8007452:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	440b      	add	r3, r1
 800745c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	b291      	uxth	r1, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	2202      	movs	r2, #2
 8007478:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 800747c:	e05b      	b.n	8007536 <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	b291      	uxth	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800748e:	4619      	mov	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7b5a      	ldrb	r2, [r3, #13]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	440b      	add	r3, r1
 8007498:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 800749c:	897b      	ldrh	r3, [r7, #10]
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074a6:	1c59      	adds	r1, r3, #1
 80074a8:	b288      	uxth	r0, r1
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80074b0:	4619      	mov	r1, r3
 80074b2:	0053      	lsls	r3, r2, #1
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	440b      	add	r3, r1
 80074ba:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 80074be:	2300      	movs	r3, #0
 80074c0:	81fb      	strh	r3, [r7, #14]
 80074c2:	e034      	b.n	800752e <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80074ca:	89f9      	ldrh	r1, [r7, #14]
 80074cc:	89ba      	ldrh	r2, [r7, #12]
 80074ce:	440a      	add	r2, r1
 80074d0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80074d4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80074d8:	121b      	asrs	r3, r3, #8
 80074da:	b218      	sxth	r0, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	b291      	uxth	r1, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80074ec:	4619      	mov	r1, r3
 80074ee:	b2c2      	uxtb	r2, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	440b      	add	r3, r1
 80074f4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80074fe:	89f9      	ldrh	r1, [r7, #14]
 8007500:	89ba      	ldrh	r2, [r7, #12]
 8007502:	440a      	add	r2, r1
 8007504:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007508:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	b291      	uxth	r1, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800751c:	4619      	mov	r1, r3
 800751e:	b2c2      	uxtb	r2, r0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	440b      	add	r3, r1
 8007524:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	3301      	adds	r3, #1
 800752c:	81fb      	strh	r3, [r7, #14]
 800752e:	89fa      	ldrh	r2, [r7, #14]
 8007530:	897b      	ldrh	r3, [r7, #10]
 8007532:	429a      	cmp	r2, r3
 8007534:	d3c6      	bcc.n	80074c4 <slave_handle_read_input_regs+0xea>
}
 8007536:	bf00      	nop
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7b9b      	ldrb	r3, [r3, #14]
 800754c:	b29b      	uxth	r3, r3
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7bdb      	ldrb	r3, [r3, #15]
 8007556:	b29b      	uxth	r3, r3
 8007558:	4413      	add	r3, r2
 800755a:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7c1b      	ldrb	r3, [r3, #16]
 8007560:	b29b      	uxth	r3, r3
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	b29a      	uxth	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7c5b      	ldrb	r3, [r3, #17]
 800756a:	b29b      	uxth	r3, r3
 800756c:	4413      	add	r3, r2
 800756e:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	b291      	uxth	r1, r2
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007588:	4619      	mov	r1, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791a      	ldrb	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	440b      	add	r3, r1
 8007592:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007596:	89ba      	ldrh	r2, [r7, #12]
 8007598:	897b      	ldrh	r3, [r7, #10]
 800759a:	4413      	add	r3, r2
 800759c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a0:	dd20      	ble.n	80075e4 <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	7b5a      	ldrb	r2, [r3, #13]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80075ac:	1c59      	adds	r1, r3, #1
 80075ae:	b288      	uxth	r0, r1
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80075b6:	4619      	mov	r1, r3
 80075b8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	440b      	add	r3, r1
 80075c2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	b291      	uxth	r1, r2
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4413      	add	r3, r2
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 80075e2:	e05b      	b.n	800769c <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	b291      	uxth	r1, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80075f4:	4619      	mov	r1, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7b5a      	ldrb	r2, [r3, #13]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	440b      	add	r3, r1
 80075fe:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 8007602:	897b      	ldrh	r3, [r7, #10]
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800760c:	1c59      	adds	r1, r3, #1
 800760e:	b288      	uxth	r0, r1
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007616:	4619      	mov	r1, r3
 8007618:	0053      	lsls	r3, r2, #1
 800761a:	b2da      	uxtb	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	440b      	add	r3, r1
 8007620:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8007624:	2300      	movs	r3, #0
 8007626:	81fb      	strh	r3, [r7, #14]
 8007628:	e034      	b.n	8007694 <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007630:	89f9      	ldrh	r1, [r7, #14]
 8007632:	89ba      	ldrh	r2, [r7, #12]
 8007634:	440a      	add	r2, r1
 8007636:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800763a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800763e:	121b      	asrs	r3, r3, #8
 8007640:	b218      	sxth	r0, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	b291      	uxth	r1, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007652:	4619      	mov	r1, r3
 8007654:	b2c2      	uxtb	r2, r0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	440b      	add	r3, r1
 800765a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007664:	89f9      	ldrh	r1, [r7, #14]
 8007666:	89ba      	ldrh	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800766e:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	b291      	uxth	r1, r2
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007682:	4619      	mov	r1, r3
 8007684:	b2c2      	uxtb	r2, r0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	440b      	add	r3, r1
 800768a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 800768e:	89fb      	ldrh	r3, [r7, #14]
 8007690:	3301      	adds	r3, #1
 8007692:	81fb      	strh	r3, [r7, #14]
 8007694:	89fa      	ldrh	r2, [r7, #14]
 8007696:	897b      	ldrh	r3, [r7, #10]
 8007698:	429a      	cmp	r2, r3
 800769a:	d3c6      	bcc.n	800762a <slave_handle_read_holding_regs+0xea>
}
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr

080076a6 <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	b291      	uxth	r1, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076be:	4619      	mov	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7b5a      	ldrb	r2, [r3, #13]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	440b      	add	r3, r1
 80076c8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	b291      	uxth	r1, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076dc:	4619      	mov	r1, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7b9a      	ldrb	r2, [r3, #14]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	440b      	add	r3, r1
 80076e6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	b291      	uxth	r1, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076fa:	4619      	mov	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	7bda      	ldrb	r2, [r3, #15]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	440b      	add	r3, r1
 8007704:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	b291      	uxth	r1, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007718:	4619      	mov	r1, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7c1a      	ldrb	r2, [r3, #16]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	440b      	add	r3, r1
 8007722:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	b291      	uxth	r1, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007736:	4619      	mov	r1, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7c5a      	ldrb	r2, [r3, #17]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	440b      	add	r3, r1
 8007740:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7b9b      	ldrb	r3, [r3, #14]
 800775a:	b29b      	uxth	r3, r3
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7bdb      	ldrb	r3, [r3, #15]
 8007764:	b29b      	uxth	r3, r3
 8007766:	4413      	add	r3, r2
 8007768:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	b291      	uxth	r1, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007782:	4619      	mov	r1, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	791a      	ldrb	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	440b      	add	r3, r1
 800778c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 8007790:	89fb      	ldrh	r3, [r7, #14]
 8007792:	2bff      	cmp	r3, #255	; 0xff
 8007794:	d920      	bls.n	80077d8 <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7b5a      	ldrb	r2, [r3, #13]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80077a0:	1c59      	adds	r1, r3, #1
 80077a2:	b288      	uxth	r0, r1
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80077aa:	4619      	mov	r1, r3
 80077ac:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	440b      	add	r3, r1
 80077b6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	b291      	uxth	r1, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 80077d6:	e011      	b.n	80077fc <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff ff64 	bl	80076a6 <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	bf0c      	ite	eq
 80077e6:	2301      	moveq	r3, #1
 80077e8:	2300      	movne	r3, #0
 80077ea:	b2d9      	uxtb	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	4413      	add	r3, r2
 80077f6:	460a      	mov	r2, r1
 80077f8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7b9b      	ldrb	r3, [r3, #14]
 8007810:	b29b      	uxth	r3, r3
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7bdb      	ldrb	r3, [r3, #15]
 800781a:	b29b      	uxth	r3, r3
 800781c:	4413      	add	r3, r2
 800781e:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7c1b      	ldrb	r3, [r3, #16]
 8007824:	b29b      	uxth	r3, r3
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c5b      	ldrb	r3, [r3, #17]
 800782e:	b29b      	uxth	r3, r3
 8007830:	4413      	add	r3, r2
 8007832:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	b291      	uxth	r1, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800784c:	4619      	mov	r1, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	791a      	ldrb	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	440b      	add	r3, r1
 8007856:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 800785a:	89ba      	ldrh	r2, [r7, #12]
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	4413      	add	r3, r2
 8007860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007864:	dd20      	ble.n	80078a8 <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7b5a      	ldrb	r2, [r3, #13]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007870:	1c59      	adds	r1, r3, #1
 8007872:	b288      	uxth	r0, r1
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800787a:	4619      	mov	r1, r3
 800787c:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007880:	b2da      	uxtb	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	440b      	add	r3, r1
 8007886:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	b291      	uxth	r1, r2
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	2202      	movs	r2, #2
 80078a2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 80078a6:	e027      	b.n	80078f8 <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff fefc 	bl	80076a6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	81fb      	strh	r3, [r7, #14]
 80078b2:	e01d      	b.n	80078f0 <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 80078b4:	89fb      	ldrh	r3, [r7, #14]
 80078b6:	08db      	lsrs	r3, r3, #3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3307      	adds	r3, #7
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	7b1b      	ldrb	r3, [r3, #12]
 80078c2:	461a      	mov	r2, r3
 80078c4:	89fb      	ldrh	r3, [r7, #14]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	fa42 f303 	asr.w	r3, r2, r3
 80078ce:	b2d9      	uxtb	r1, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80078d6:	89b8      	ldrh	r0, [r7, #12]
 80078d8:	89fb      	ldrh	r3, [r7, #14]
 80078da:	4403      	add	r3, r0
 80078dc:	f001 0101 	and.w	r1, r1, #1
 80078e0:	b2c9      	uxtb	r1, r1
 80078e2:	4413      	add	r3, r2
 80078e4:	460a      	mov	r2, r1
 80078e6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	3301      	adds	r3, #1
 80078ee:	81fb      	strh	r3, [r7, #14]
 80078f0:	89fa      	ldrh	r2, [r7, #14]
 80078f2:	897b      	ldrh	r3, [r7, #10]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d3dd      	bcc.n	80078b4 <slave_handle_write_multi_coils+0xb0>
}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7b9b      	ldrb	r3, [r3, #14]
 800790c:	b29b      	uxth	r3, r3
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7bdb      	ldrb	r3, [r3, #15]
 8007916:	b29b      	uxth	r3, r3
 8007918:	4413      	add	r3, r2
 800791a:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	b291      	uxth	r1, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007934:	4619      	mov	r1, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	791a      	ldrb	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	440b      	add	r3, r1
 800793e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 8007942:	89fb      	ldrh	r3, [r7, #14]
 8007944:	2bff      	cmp	r3, #255	; 0xff
 8007946:	d920      	bls.n	800798a <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7b5a      	ldrb	r2, [r3, #13]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007952:	1c59      	adds	r1, r3, #1
 8007954:	b288      	uxth	r0, r1
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800795c:	4619      	mov	r1, r3
 800795e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007962:	b2da      	uxtb	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	440b      	add	r3, r1
 8007968:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	b291      	uxth	r1, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800797c:	461a      	mov	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	2202      	movs	r2, #2
 8007984:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 8007988:	e015      	b.n	80079b6 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fe8b 	bl	80076a6 <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7c1b      	ldrb	r3, [r3, #16]
 8007994:	b29b      	uxth	r3, r3
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	b29a      	uxth	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7c5b      	ldrb	r3, [r3, #17]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4413      	add	r3, r2
 80079a2:	b299      	uxth	r1, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80079aa:	89fa      	ldrh	r2, [r7, #14]
 80079ac:	b209      	sxth	r1, r1
 80079ae:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80079b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7b9b      	ldrb	r3, [r3, #14]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7bdb      	ldrb	r3, [r3, #15]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	4413      	add	r3, r2
 80079d8:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7c1b      	ldrb	r3, [r3, #16]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7c5b      	ldrb	r3, [r3, #17]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	b291      	uxth	r1, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007a06:	4619      	mov	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	791a      	ldrb	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	440b      	add	r3, r1
 8007a10:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007a14:	89ba      	ldrh	r2, [r7, #12]
 8007a16:	897b      	ldrh	r3, [r7, #10]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	dd20      	ble.n	8007a62 <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7b5a      	ldrb	r2, [r3, #13]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007a2a:	1c59      	adds	r1, r3, #1
 8007a2c:	b288      	uxth	r0, r1
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007a34:	4619      	mov	r1, r3
 8007a36:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	440b      	add	r3, r1
 8007a40:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	b291      	uxth	r1, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 8007a60:	e029      	b.n	8007ab6 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fe1f 	bl	80076a6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	81fb      	strh	r3, [r7, #14]
 8007a6c:	e01f      	b.n	8007aae <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 8007a6e:	89fb      	ldrh	r3, [r7, #14]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	3307      	adds	r3, #7
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4413      	add	r3, r2
 8007a78:	7b1b      	ldrb	r3, [r3, #12]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	3304      	adds	r3, #4
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	440b      	add	r3, r1
 8007a8a:	7b1b      	ldrb	r3, [r3, #12]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	4413      	add	r3, r2
 8007a90:	b298      	uxth	r0, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007a98:	89b9      	ldrh	r1, [r7, #12]
 8007a9a:	89fa      	ldrh	r2, [r7, #14]
 8007a9c:	440a      	add	r2, r1
 8007a9e:	b201      	sxth	r1, r0
 8007aa0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007aa4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 8007aa8:	89fb      	ldrh	r3, [r7, #14]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	81fb      	strh	r3, [r7, #14]
 8007aae:	89fa      	ldrh	r2, [r7, #14]
 8007ab0:	897b      	ldrh	r3, [r7, #10]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d3db      	bcc.n	8007a6e <slave_handle_write_multi_holding_regs+0xb0>
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <slave_response>:

static void slave_response(modbus_slave *slave)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fab4 	bl	8007034 <slave_validate_cmd>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 80b2 	bne.w	8007c38 <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	7b5a      	ldrb	r2, [r3, #13]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	795b      	ldrb	r3, [r3, #5]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d103      	bne.n	8007aec <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fae2 	bl	80070ae <slave_handle_read_discs>
 8007aea:	e06a      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	795b      	ldrb	r3, [r3, #5]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d103      	bne.n	8007afc <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fba4 	bl	8007242 <slave_handle_read_coils>
 8007afa:	e062      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	795b      	ldrb	r3, [r3, #5]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d103      	bne.n	8007b0c <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fc68 	bl	80073da <slave_handle_read_input_regs>
 8007b0a:	e05a      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	795b      	ldrb	r3, [r3, #5]
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d103      	bne.n	8007b1c <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff fd13 	bl	8007540 <slave_handle_read_holding_regs>
 8007b1a:	e052      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	795b      	ldrb	r3, [r3, #5]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	d103      	bne.n	8007b2c <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fe12 	bl	800774e <slave_handle_write_single_coil>
 8007b2a:	e04a      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	795b      	ldrb	r3, [r3, #5]
 8007b30:	2b0f      	cmp	r3, #15
 8007b32:	d103      	bne.n	8007b3c <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff fe65 	bl	8007804 <slave_handle_write_multi_coils>
 8007b3a:	e042      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	795b      	ldrb	r3, [r3, #5]
 8007b40:	2b06      	cmp	r3, #6
 8007b42:	d103      	bne.n	8007b4c <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fedb 	bl	8007900 <slave_handle_write_single_holding_reg>
 8007b4a:	e03a      	b.n	8007bc2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	795b      	ldrb	r3, [r3, #5]
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	d103      	bne.n	8007b5c <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff32 	bl	80079be <slave_handle_write_multi_holding_regs>
 8007b5a:	e032      	b.n	8007bc2 <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	b291      	uxth	r1, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007b74:	4619      	mov	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	791a      	ldrb	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	440b      	add	r3, r1
 8007b7e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7b5a      	ldrb	r2, [r3, #13]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007b8c:	1c59      	adds	r1, r3, #1
 8007b8e:	b288      	uxth	r0, r1
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007b96:	4619      	mov	r1, r3
 8007b98:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	440b      	add	r3, r1
 8007ba2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x01;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	b291      	uxth	r1, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4413      	add	r3, r2
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    }
    slave->buff_len = slave->tx_len;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f9f1 	bl	8006fbc <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	b291      	uxth	r1, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007bea:	4619      	mov	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	799a      	ldrb	r2, [r3, #6]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	440b      	add	r3, r1
 8007bf4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	b291      	uxth	r1, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007c08:	4619      	mov	r1, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	79da      	ldrb	r2, [r3, #7]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	440b      	add	r3, r1
 8007c12:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave_set_tx_rx(slave, tx);
 8007c16:	2101      	movs	r1, #1
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f86b 	bl	8007cf4 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f503 7187 	add.w	r1, r3, #270	; 0x10e
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007c30:	461a      	mov	r2, r3
 8007c32:	f7fa ff9d 	bl	8002b70 <HAL_UART_Transmit_DMA>
 8007c36:	e000      	b.n	8007c3a <slave_response+0x17c>
        return;
 8007c38:	bf00      	nop
}
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007c52:	461a      	mov	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d109      	bne.n	8007c7c <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fc f8a4 	bl	8003dc4 <osSemaphoreRelease>
    }
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f7fb ff91 	bl	8003bc0 <osSemaphoreNew>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	2100      	movs	r1, #0
 8007cac:	4810      	ldr	r0, [pc, #64]	; (8007cf0 <slave_init+0x6c>)
 8007cae:	f7fb fec3 	bl	8003a38 <osTimerNew>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    slave->uart_port = port;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0210 	orr.w	r2, r2, #16
 8007ce6:	60da      	str	r2, [r3, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	08007c41 	.word	0x08007c41

08007cf4 <slave_set_tx_rx>:
        osSemaphoreRelease(slave->idle_sem);
    }
}

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6858      	ldr	r0, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	8919      	ldrh	r1, [r3, #8]
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f7f9 fff4 	bl	8001d06 <HAL_GPIO_WritePin>
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 8007d2e:	e024      	b.n	8007d7a <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d107      	bne.n	8007d4a <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d40:	2102      	movs	r1, #2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fb fefc 	bl	8003b40 <osTimerStart>
 8007d48:	e017      	b.n	8007d7a <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d112      	bne.n	8007d7a <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fa ffa4 	bl	8002ca8 <HAL_UART_DMAStop>
            slave_response(slave);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff feac 	bl	8007abe <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d74:	4619      	mov	r1, r3
 8007d76:	f7fa ff67 	bl	8002c48 <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d80:	f04f 31ff 	mov.w	r1, #4294967295
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb ffb7 	bl	8003cf8 <osSemaphoreAcquire>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0cf      	beq.n	8007d30 <slave_wait_request+0xa>
        }
    }
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <motor_function_step>:
#define rtCP_Constant23_Value          rtCP_pooled_i2hU6p9uLH6V
#define rtCP_Constant26_Value          rtCP_pooled_i2hU6p9uLH6V
#define rtCP_Constant29_Value          rtCP_pooled_i2hU6p9uLH6V

void motor_function_step(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b090      	sub	sp, #64	; 0x40
 8007da0:	af08      	add	r7, sp, #32
    int32_T i;
    int16_T rtb_DataStoreRead3_o3[5];
    int16_T rtb_DataStoreRead_o1[2];
    int16_T rtb_DataStoreRead_o2[2];
    int16_T rtb_com_only3;
    sys_regs.inputs[120] = (int16_T)(sys_regs.holdings[18] & 1);
 8007da2:	4b94      	ldr	r3, [pc, #592]	; (8007ff4 <motor_function_step+0x258>)
 8007da4:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	b21a      	sxth	r2, r3
 8007dae:	4b91      	ldr	r3, [pc, #580]	; (8007ff4 <motor_function_step+0x258>)
 8007db0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    sys_regs.inputs[121] = (int16_T)(sys_regs.holdings[0] & 1);
 8007db4:	4b8f      	ldr	r3, [pc, #572]	; (8007ff4 <motor_function_step+0x258>)
 8007db6:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	b21a      	sxth	r2, r3
 8007dc0:	4b8c      	ldr	r3, [pc, #560]	; (8007ff4 <motor_function_step+0x258>)
 8007dc2:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
    sys_regs.inputs[122] = (int16_T)(sys_regs.holdings[6] & 1);
 8007dc6:	4b8b      	ldr	r3, [pc, #556]	; (8007ff4 <motor_function_step+0x258>)
 8007dc8:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	b21a      	sxth	r2, r3
 8007dd2:	4b88      	ldr	r3, [pc, #544]	; (8007ff4 <motor_function_step+0x258>)
 8007dd4:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
    sys_regs.inputs[123] = (int16_T)(sys_regs.holdings[24] & 1);
 8007dd8:	4b86      	ldr	r3, [pc, #536]	; (8007ff4 <motor_function_step+0x258>)
 8007dda:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	b21a      	sxth	r2, r3
 8007de4:	4b83      	ldr	r3, [pc, #524]	; (8007ff4 <motor_function_step+0x258>)
 8007de6:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
    sys_regs.inputs[124] = (int16_T)(sys_regs.holdings[12] & 1);
 8007dea:	4b82      	ldr	r3, [pc, #520]	; (8007ff4 <motor_function_step+0x258>)
 8007dec:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	b21a      	sxth	r2, r3
 8007df6:	4b7f      	ldr	r3, [pc, #508]	; (8007ff4 <motor_function_step+0x258>)
 8007df8:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
    sys_regs.inputs[125] = (int16_T)(sys_regs.holdings[18] >> 1 & 1);
 8007dfc:	4b7d      	ldr	r3, [pc, #500]	; (8007ff4 <motor_function_step+0x258>)
 8007dfe:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007e02:	105b      	asrs	r3, r3, #1
 8007e04:	b21b      	sxth	r3, r3
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	b21a      	sxth	r2, r3
 8007e0c:	4b79      	ldr	r3, [pc, #484]	; (8007ff4 <motor_function_step+0x258>)
 8007e0e:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
    sys_regs.inputs[126] = (int16_T)(sys_regs.holdings[0] >> 1 & 1);
 8007e12:	4b78      	ldr	r3, [pc, #480]	; (8007ff4 <motor_function_step+0x258>)
 8007e14:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007e18:	105b      	asrs	r3, r3, #1
 8007e1a:	b21b      	sxth	r3, r3
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	b21a      	sxth	r2, r3
 8007e22:	4b74      	ldr	r3, [pc, #464]	; (8007ff4 <motor_function_step+0x258>)
 8007e24:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
    sys_regs.inputs[127] = (int16_T)(sys_regs.holdings[6] >> 1 & 1);
 8007e28:	4b72      	ldr	r3, [pc, #456]	; (8007ff4 <motor_function_step+0x258>)
 8007e2a:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007e2e:	105b      	asrs	r3, r3, #1
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	b21a      	sxth	r2, r3
 8007e38:	4b6e      	ldr	r3, [pc, #440]	; (8007ff4 <motor_function_step+0x258>)
 8007e3a:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
    sys_regs.inputs[128] = (int16_T)(sys_regs.holdings[24] >> 1 & 1);
 8007e3e:	4b6d      	ldr	r3, [pc, #436]	; (8007ff4 <motor_function_step+0x258>)
 8007e40:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007e44:	105b      	asrs	r3, r3, #1
 8007e46:	b21b      	sxth	r3, r3
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	b21a      	sxth	r2, r3
 8007e4e:	4b69      	ldr	r3, [pc, #420]	; (8007ff4 <motor_function_step+0x258>)
 8007e50:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
    sys_regs.inputs[129] = (int16_T)(sys_regs.holdings[12] >> 1 & 1);
 8007e54:	4b67      	ldr	r3, [pc, #412]	; (8007ff4 <motor_function_step+0x258>)
 8007e56:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007e5a:	105b      	asrs	r3, r3, #1
 8007e5c:	b21b      	sxth	r3, r3
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	b21a      	sxth	r2, r3
 8007e64:	4b63      	ldr	r3, [pc, #396]	; (8007ff4 <motor_function_step+0x258>)
 8007e66:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
    sys_regs.inputs[130] = (int16_T)(sys_regs.holdings[18] >> 2 & 1);
 8007e6a:	4b62      	ldr	r3, [pc, #392]	; (8007ff4 <motor_function_step+0x258>)
 8007e6c:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007e70:	109b      	asrs	r3, r3, #2
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	b21a      	sxth	r2, r3
 8007e7a:	4b5e      	ldr	r3, [pc, #376]	; (8007ff4 <motor_function_step+0x258>)
 8007e7c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    sys_regs.inputs[131] = (int16_T)(sys_regs.holdings[0] >> 2 & 1);
 8007e80:	4b5c      	ldr	r3, [pc, #368]	; (8007ff4 <motor_function_step+0x258>)
 8007e82:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007e86:	109b      	asrs	r3, r3, #2
 8007e88:	b21b      	sxth	r3, r3
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	b21a      	sxth	r2, r3
 8007e90:	4b58      	ldr	r3, [pc, #352]	; (8007ff4 <motor_function_step+0x258>)
 8007e92:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
    sys_regs.inputs[132] = (int16_T)(sys_regs.holdings[6] >> 2 & 1);
 8007e96:	4b57      	ldr	r3, [pc, #348]	; (8007ff4 <motor_function_step+0x258>)
 8007e98:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007e9c:	109b      	asrs	r3, r3, #2
 8007e9e:	b21b      	sxth	r3, r3
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	b21a      	sxth	r2, r3
 8007ea6:	4b53      	ldr	r3, [pc, #332]	; (8007ff4 <motor_function_step+0x258>)
 8007ea8:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
    sys_regs.inputs[133] = (int16_T)(sys_regs.holdings[24] >> 2 & 1);
 8007eac:	4b51      	ldr	r3, [pc, #324]	; (8007ff4 <motor_function_step+0x258>)
 8007eae:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007eb2:	109b      	asrs	r3, r3, #2
 8007eb4:	b21b      	sxth	r3, r3
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	b21a      	sxth	r2, r3
 8007ebc:	4b4d      	ldr	r3, [pc, #308]	; (8007ff4 <motor_function_step+0x258>)
 8007ebe:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
    sys_regs.inputs[134] = (int16_T)(sys_regs.holdings[12] >> 2 & 1);
 8007ec2:	4b4c      	ldr	r3, [pc, #304]	; (8007ff4 <motor_function_step+0x258>)
 8007ec4:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007ec8:	109b      	asrs	r3, r3, #2
 8007eca:	b21b      	sxth	r3, r3
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	b21a      	sxth	r2, r3
 8007ed2:	4b48      	ldr	r3, [pc, #288]	; (8007ff4 <motor_function_step+0x258>)
 8007ed4:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
    sys_regs.inputs[135] = (int16_T)(sys_regs.holdings[18] >> 3 & 1);
 8007ed8:	4b46      	ldr	r3, [pc, #280]	; (8007ff4 <motor_function_step+0x258>)
 8007eda:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007ede:	10db      	asrs	r3, r3, #3
 8007ee0:	b21b      	sxth	r3, r3
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	b21a      	sxth	r2, r3
 8007ee8:	4b42      	ldr	r3, [pc, #264]	; (8007ff4 <motor_function_step+0x258>)
 8007eea:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
    sys_regs.inputs[136] = (int16_T)(sys_regs.holdings[0] >> 3 & 1);
 8007eee:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <motor_function_step+0x258>)
 8007ef0:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007ef4:	10db      	asrs	r3, r3, #3
 8007ef6:	b21b      	sxth	r3, r3
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	b21a      	sxth	r2, r3
 8007efe:	4b3d      	ldr	r3, [pc, #244]	; (8007ff4 <motor_function_step+0x258>)
 8007f00:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
    sys_regs.inputs[137] = (int16_T)(sys_regs.holdings[6] >> 3 & 1);
 8007f04:	4b3b      	ldr	r3, [pc, #236]	; (8007ff4 <motor_function_step+0x258>)
 8007f06:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007f0a:	10db      	asrs	r3, r3, #3
 8007f0c:	b21b      	sxth	r3, r3
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	b21a      	sxth	r2, r3
 8007f14:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <motor_function_step+0x258>)
 8007f16:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
    sys_regs.inputs[138] = (int16_T)(sys_regs.holdings[24] >> 3 & 1);
 8007f1a:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <motor_function_step+0x258>)
 8007f1c:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007f20:	10db      	asrs	r3, r3, #3
 8007f22:	b21b      	sxth	r3, r3
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	b21a      	sxth	r2, r3
 8007f2a:	4b32      	ldr	r3, [pc, #200]	; (8007ff4 <motor_function_step+0x258>)
 8007f2c:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
    sys_regs.inputs[139] = (int16_T)(sys_regs.holdings[12] >> 3 & 1);
 8007f30:	4b30      	ldr	r3, [pc, #192]	; (8007ff4 <motor_function_step+0x258>)
 8007f32:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007f36:	10db      	asrs	r3, r3, #3
 8007f38:	b21b      	sxth	r3, r3
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	b21a      	sxth	r2, r3
 8007f40:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <motor_function_step+0x258>)
 8007f42:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[100];
 8007f46:	4b2b      	ldr	r3, [pc, #172]	; (8007ff4 <motor_function_step+0x258>)
 8007f48:	f9b3 32c8 	ldrsh.w	r3, [r3, #712]	; 0x2c8
 8007f4c:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 8007f4e:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <motor_function_step+0x258>)
 8007f50:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8007f54:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[101];
 8007f56:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <motor_function_step+0x258>)
 8007f58:	f9b3 32ca 	ldrsh.w	r3, [r3, #714]	; 0x2ca
 8007f5c:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 8007f5e:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <motor_function_step+0x258>)
 8007f60:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 8007f64:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	e010      	b.n	8007f8e <motor_function_step+0x1f2>
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 120];
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	3378      	adds	r3, #120	; 0x78
 8007f70:	4a20      	ldr	r2, [pc, #128]	; (8007ff4 <motor_function_step+0x258>)
 8007f72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007f76:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	f107 0120 	add.w	r1, r7, #32
 8007f82:	440b      	add	r3, r1
 8007f84:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	ddeb      	ble.n	8007f6c <motor_function_step+0x1d0>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 8007f94:	4b17      	ldr	r3, [pc, #92]	; (8007ff4 <motor_function_step+0x258>)
 8007f96:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 8007f9a:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 8007f9c:	f107 0010 	add.w	r0, r7, #16
 8007fa0:	f107 0208 	add.w	r2, r7, #8
 8007fa4:	f107 010c 	add.w	r1, r7, #12
 8007fa8:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <motor_function_step+0x25c>)
 8007faa:	9306      	str	r3, [sp, #24]
 8007fac:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <motor_function_step+0x260>)
 8007fae:	9305      	str	r3, [sp, #20]
 8007fb0:	4b13      	ldr	r3, [pc, #76]	; (8008000 <motor_function_step+0x264>)
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	1dbb      	adds	r3, r7, #6
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	4b12      	ldr	r3, [pc, #72]	; (8008004 <motor_function_step+0x268>)
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	4b11      	ldr	r3, [pc, #68]	; (8008004 <motor_function_step+0x268>)
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	4b10      	ldr	r3, [pc, #64]	; (8008004 <motor_function_step+0x268>)
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	4810      	ldr	r0, [pc, #64]	; (8008008 <motor_function_step+0x26c>)
 8007fc8:	f000 fcc0 	bl	800894c <motor_channel>
                  &rtCP_Constant_Value[0], &rtCP_Constant_Value[0], &rtCP_Constant_Value[0], &rtb_com_only3, &motor_function_B.up_relay,
                  &motor_function_B.down_relay, &(motor_function_DW.Model_InstanceData.rtdw));
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[102];
 8007fcc:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <motor_function_step+0x258>)
 8007fce:	f9b3 32cc 	ldrsh.w	r3, [r3, #716]	; 0x2cc
 8007fd2:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 8007fd4:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <motor_function_step+0x258>)
 8007fd6:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8007fda:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[103];
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <motor_function_step+0x258>)
 8007fde:	f9b3 32ce 	ldrsh.w	r3, [r3, #718]	; 0x2ce
 8007fe2:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 8007fe4:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <motor_function_step+0x258>)
 8007fe6:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 8007fea:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]
 8007ff0:	e01d      	b.n	800802e <motor_function_step+0x292>
 8007ff2:	bf00      	nop
 8007ff4:	20002948 	.word	0x20002948
 8007ff8:	20003040 	.word	0x20003040
 8007ffc:	200030a2 	.word	0x200030a2
 8008000:	200030a0 	.word	0x200030a0
 8008004:	0800954c 	.word	0x0800954c
 8008008:	20003054 	.word	0x20003054
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 125];
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	337d      	adds	r3, #125	; 0x7d
 8008010:	4a6f      	ldr	r2, [pc, #444]	; (80081d0 <motor_function_step+0x434>)
 8008012:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008016:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	f107 0120 	add.w	r1, r7, #32
 8008022:	440b      	add	r3, r1
 8008024:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	3301      	adds	r3, #1
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	2b04      	cmp	r3, #4
 8008032:	ddeb      	ble.n	800800c <motor_function_step+0x270>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 8008034:	4b66      	ldr	r3, [pc, #408]	; (80081d0 <motor_function_step+0x434>)
 8008036:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 800803a:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model1_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 800803c:	f107 0010 	add.w	r0, r7, #16
 8008040:	f107 0208 	add.w	r2, r7, #8
 8008044:	f107 010c 	add.w	r1, r7, #12
 8008048:	4b62      	ldr	r3, [pc, #392]	; (80081d4 <motor_function_step+0x438>)
 800804a:	9306      	str	r3, [sp, #24]
 800804c:	4b62      	ldr	r3, [pc, #392]	; (80081d8 <motor_function_step+0x43c>)
 800804e:	9305      	str	r3, [sp, #20]
 8008050:	4b62      	ldr	r3, [pc, #392]	; (80081dc <motor_function_step+0x440>)
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	1dbb      	adds	r3, r7, #6
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	4b61      	ldr	r3, [pc, #388]	; (80081e0 <motor_function_step+0x444>)
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	4b60      	ldr	r3, [pc, #384]	; (80081e0 <motor_function_step+0x444>)
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <motor_function_step+0x444>)
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	4603      	mov	r3, r0
 8008066:	485f      	ldr	r0, [pc, #380]	; (80081e4 <motor_function_step+0x448>)
 8008068:	f000 fc70 	bl	800894c <motor_channel>
                  &rtCP_Constant23_Value[0], &rtCP_Constant23_Value[0], &rtCP_Constant23_Value[0], &rtb_com_only3,
                  &motor_function_B.up_relay_g, &motor_function_B.down_relay_d, &(motor_function_DW.Model1_InstanceData.rtdw));
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[104];
 800806c:	4b58      	ldr	r3, [pc, #352]	; (80081d0 <motor_function_step+0x434>)
 800806e:	f9b3 32d0 	ldrsh.w	r3, [r3, #720]	; 0x2d0
 8008072:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 8008074:	4b56      	ldr	r3, [pc, #344]	; (80081d0 <motor_function_step+0x434>)
 8008076:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 800807a:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[105];
 800807c:	4b54      	ldr	r3, [pc, #336]	; (80081d0 <motor_function_step+0x434>)
 800807e:	f9b3 32d2 	ldrsh.w	r3, [r3, #722]	; 0x2d2
 8008082:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 8008084:	4b52      	ldr	r3, [pc, #328]	; (80081d0 <motor_function_step+0x434>)
 8008086:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 800808a:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 800808c:	2300      	movs	r3, #0
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	e010      	b.n	80080b4 <motor_function_step+0x318>
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 130];
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	3382      	adds	r3, #130	; 0x82
 8008096:	4a4e      	ldr	r2, [pc, #312]	; (80081d0 <motor_function_step+0x434>)
 8008098:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800809c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	f107 0120 	add.w	r1, r7, #32
 80080a8:	440b      	add	r3, r1
 80080aa:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	3301      	adds	r3, #1
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	ddeb      	ble.n	8008092 <motor_function_step+0x2f6>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 80080ba:	4b45      	ldr	r3, [pc, #276]	; (80081d0 <motor_function_step+0x434>)
 80080bc:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 80080c0:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model2_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 80080c2:	f107 0010 	add.w	r0, r7, #16
 80080c6:	f107 0208 	add.w	r2, r7, #8
 80080ca:	f107 010c 	add.w	r1, r7, #12
 80080ce:	4b46      	ldr	r3, [pc, #280]	; (80081e8 <motor_function_step+0x44c>)
 80080d0:	9306      	str	r3, [sp, #24]
 80080d2:	4b46      	ldr	r3, [pc, #280]	; (80081ec <motor_function_step+0x450>)
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	4b46      	ldr	r3, [pc, #280]	; (80081f0 <motor_function_step+0x454>)
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	1dbb      	adds	r3, r7, #6
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	4b40      	ldr	r3, [pc, #256]	; (80081e0 <motor_function_step+0x444>)
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	4b3f      	ldr	r3, [pc, #252]	; (80081e0 <motor_function_step+0x444>)
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	4b3e      	ldr	r3, [pc, #248]	; (80081e0 <motor_function_step+0x444>)
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	4603      	mov	r3, r0
 80080ec:	4841      	ldr	r0, [pc, #260]	; (80081f4 <motor_function_step+0x458>)
 80080ee:	f000 fc2d 	bl	800894c <motor_channel>
                  &rtCP_Constant26_Value[0], &rtCP_Constant26_Value[0], &rtCP_Constant26_Value[0], &rtb_com_only3,
                  &motor_function_B.up_relay_j, &motor_function_B.down_relay_j, &(motor_function_DW.Model2_InstanceData.rtdw));
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[106];
 80080f2:	4b37      	ldr	r3, [pc, #220]	; (80081d0 <motor_function_step+0x434>)
 80080f4:	f9b3 32d4 	ldrsh.w	r3, [r3, #724]	; 0x2d4
 80080f8:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 80080fa:	4b35      	ldr	r3, [pc, #212]	; (80081d0 <motor_function_step+0x434>)
 80080fc:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8008100:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[107];
 8008102:	4b33      	ldr	r3, [pc, #204]	; (80081d0 <motor_function_step+0x434>)
 8008104:	f9b3 32d6 	ldrsh.w	r3, [r3, #726]	; 0x2d6
 8008108:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 800810a:	4b31      	ldr	r3, [pc, #196]	; (80081d0 <motor_function_step+0x434>)
 800810c:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 8008110:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	e010      	b.n	800813a <motor_function_step+0x39e>
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 135];
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3387      	adds	r3, #135	; 0x87
 800811c:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <motor_function_step+0x434>)
 800811e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008122:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	f107 0120 	add.w	r1, r7, #32
 800812e:	440b      	add	r3, r1
 8008130:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	3301      	adds	r3, #1
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2b04      	cmp	r3, #4
 800813e:	ddeb      	ble.n	8008118 <motor_function_step+0x37c>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 8008140:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <motor_function_step+0x434>)
 8008142:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 8008146:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model3_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 8008148:	f107 0010 	add.w	r0, r7, #16
 800814c:	f107 0208 	add.w	r2, r7, #8
 8008150:	f107 010c 	add.w	r1, r7, #12
 8008154:	4b28      	ldr	r3, [pc, #160]	; (80081f8 <motor_function_step+0x45c>)
 8008156:	9306      	str	r3, [sp, #24]
 8008158:	4b28      	ldr	r3, [pc, #160]	; (80081fc <motor_function_step+0x460>)
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	4b28      	ldr	r3, [pc, #160]	; (8008200 <motor_function_step+0x464>)
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	1dbb      	adds	r3, r7, #6
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <motor_function_step+0x444>)
 8008166:	9302      	str	r3, [sp, #8]
 8008168:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <motor_function_step+0x444>)
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	4b1c      	ldr	r3, [pc, #112]	; (80081e0 <motor_function_step+0x444>)
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	4603      	mov	r3, r0
 8008172:	4824      	ldr	r0, [pc, #144]	; (8008204 <motor_function_step+0x468>)
 8008174:	f000 fbea 	bl	800894c <motor_channel>
                  &rtCP_Constant29_Value[0], &rtCP_Constant29_Value[0], &rtCP_Constant29_Value[0], &rtb_com_only3,
                  &motor_function_B.up_relay_j2, &motor_function_B.down_relay_g, &(motor_function_DW.Model3_InstanceData.rtdw));
    relay[0] = motor_function_B.up_relay;
 8008178:	4b23      	ldr	r3, [pc, #140]	; (8008208 <motor_function_step+0x46c>)
 800817a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800817e:	4b23      	ldr	r3, [pc, #140]	; (800820c <motor_function_step+0x470>)
 8008180:	801a      	strh	r2, [r3, #0]
    relay[1] = motor_function_B.down_relay;
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <motor_function_step+0x46c>)
 8008184:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008188:	4b20      	ldr	r3, [pc, #128]	; (800820c <motor_function_step+0x470>)
 800818a:	805a      	strh	r2, [r3, #2]
    relay[2] = motor_function_B.up_relay_g;
 800818c:	4b1e      	ldr	r3, [pc, #120]	; (8008208 <motor_function_step+0x46c>)
 800818e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008192:	4b1e      	ldr	r3, [pc, #120]	; (800820c <motor_function_step+0x470>)
 8008194:	809a      	strh	r2, [r3, #4]
    relay[3] = motor_function_B.down_relay_d;
 8008196:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <motor_function_step+0x46c>)
 8008198:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800819c:	4b1b      	ldr	r3, [pc, #108]	; (800820c <motor_function_step+0x470>)
 800819e:	80da      	strh	r2, [r3, #6]
    relay[4] = motor_function_B.up_relay_j;
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <motor_function_step+0x46c>)
 80081a2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80081a6:	4b19      	ldr	r3, [pc, #100]	; (800820c <motor_function_step+0x470>)
 80081a8:	811a      	strh	r2, [r3, #8]
    relay[5] = motor_function_B.down_relay_j;
 80081aa:	4b17      	ldr	r3, [pc, #92]	; (8008208 <motor_function_step+0x46c>)
 80081ac:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80081b0:	4b16      	ldr	r3, [pc, #88]	; (800820c <motor_function_step+0x470>)
 80081b2:	815a      	strh	r2, [r3, #10]
    relay[6] = motor_function_B.up_relay_j2;
 80081b4:	4b14      	ldr	r3, [pc, #80]	; (8008208 <motor_function_step+0x46c>)
 80081b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80081ba:	4b14      	ldr	r3, [pc, #80]	; (800820c <motor_function_step+0x470>)
 80081bc:	819a      	strh	r2, [r3, #12]
    relay[7] = motor_function_B.down_relay_g;
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <motor_function_step+0x46c>)
 80081c0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80081c4:	4b11      	ldr	r3, [pc, #68]	; (800820c <motor_function_step+0x470>)
 80081c6:	81da      	strh	r2, [r3, #14]
}
 80081c8:	bf00      	nop
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20002948 	.word	0x20002948
 80081d4:	20003058 	.word	0x20003058
 80081d8:	200030a6 	.word	0x200030a6
 80081dc:	200030a4 	.word	0x200030a4
 80081e0:	0800954c 	.word	0x0800954c
 80081e4:	2000306c 	.word	0x2000306c
 80081e8:	20003070 	.word	0x20003070
 80081ec:	200030aa 	.word	0x200030aa
 80081f0:	200030a8 	.word	0x200030a8
 80081f4:	20003084 	.word	0x20003084
 80081f8:	20003088 	.word	0x20003088
 80081fc:	200030ae 	.word	0x200030ae
 8008200:	200030ac 	.word	0x200030ac
 8008204:	2000309c 	.word	0x2000309c
 8008208:	200030a0 	.word	0x200030a0
 800820c:	20002f48 	.word	0x20002f48

08008210 <motor_function_initialize>:

void motor_function_initialize(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
    motor_function_DW.Model_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model;
 8008214:	4b3e      	ldr	r3, [pc, #248]	; (8008310 <motor_function_initialize+0x100>)
 8008216:	4a3f      	ldr	r2, [pc, #252]	; (8008314 <motor_function_initialize+0x104>)
 8008218:	615a      	str	r2, [r3, #20]
    motor_function_DW.Model1_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model1;
 800821a:	4b3d      	ldr	r3, [pc, #244]	; (8008310 <motor_function_initialize+0x100>)
 800821c:	4a3e      	ldr	r2, [pc, #248]	; (8008318 <motor_function_initialize+0x108>)
 800821e:	62da      	str	r2, [r3, #44]	; 0x2c
    motor_function_DW.Model2_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model2;
 8008220:	4b3b      	ldr	r3, [pc, #236]	; (8008310 <motor_function_initialize+0x100>)
 8008222:	4a3e      	ldr	r2, [pc, #248]	; (800831c <motor_function_initialize+0x10c>)
 8008224:	645a      	str	r2, [r3, #68]	; 0x44
    motor_function_DW.Model3_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model3;
 8008226:	4b3a      	ldr	r3, [pc, #232]	; (8008310 <motor_function_initialize+0x100>)
 8008228:	4a3d      	ldr	r2, [pc, #244]	; (8008320 <motor_function_initialize+0x110>)
 800822a:	65da      	str	r2, [r3, #92]	; 0x5c
    motor_channel_Init(&(motor_function_DW.Model_InstanceData.rtdw));
 800822c:	4838      	ldr	r0, [pc, #224]	; (8008310 <motor_function_initialize+0x100>)
 800822e:	f000 fb7f 	bl	8008930 <motor_channel_Init>
    motor_channel_Init(&(motor_function_DW.Model1_InstanceData.rtdw));
 8008232:	483c      	ldr	r0, [pc, #240]	; (8008324 <motor_function_initialize+0x114>)
 8008234:	f000 fb7c 	bl	8008930 <motor_channel_Init>
    motor_channel_Init(&(motor_function_DW.Model2_InstanceData.rtdw));
 8008238:	483b      	ldr	r0, [pc, #236]	; (8008328 <motor_function_initialize+0x118>)
 800823a:	f000 fb79 	bl	8008930 <motor_channel_Init>
    motor_channel_Init(&(motor_function_DW.Model3_InstanceData.rtdw));
 800823e:	483b      	ldr	r0, [pc, #236]	; (800832c <motor_function_initialize+0x11c>)
 8008240:	f000 fb76 	bl	8008930 <motor_channel_Init>
    motor_function_InstP.InstP_Model.debounce_cnt = sys_regs.holdings[100];
 8008244:	4b3a      	ldr	r3, [pc, #232]	; (8008330 <motor_function_initialize+0x120>)
 8008246:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 800824a:	4b32      	ldr	r3, [pc, #200]	; (8008314 <motor_function_initialize+0x104>)
 800824c:	801a      	strh	r2, [r3, #0]
    motor_function_InstP.InstP_Model.longpress_cnt = sys_regs.holdings[101];
 800824e:	4b38      	ldr	r3, [pc, #224]	; (8008330 <motor_function_initialize+0x120>)
 8008250:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 8008254:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <motor_function_initialize+0x104>)
 8008256:	809a      	strh	r2, [r3, #4]
    motor_function_InstP.InstP_Model2.debounce_cnt = sys_regs.holdings[100];
 8008258:	4b35      	ldr	r3, [pc, #212]	; (8008330 <motor_function_initialize+0x120>)
 800825a:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 800825e:	4b2d      	ldr	r3, [pc, #180]	; (8008314 <motor_function_initialize+0x104>)
 8008260:	829a      	strh	r2, [r3, #20]
    motor_function_InstP.InstP_Model2.longpress_cnt = sys_regs.holdings[101];
 8008262:	4b33      	ldr	r3, [pc, #204]	; (8008330 <motor_function_initialize+0x120>)
 8008264:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 8008268:	4b2a      	ldr	r3, [pc, #168]	; (8008314 <motor_function_initialize+0x104>)
 800826a:	831a      	strh	r2, [r3, #24]
    motor_function_InstP.InstP_Model2.long_cnt = sys_regs.holdings[102];
 800826c:	4b30      	ldr	r3, [pc, #192]	; (8008330 <motor_function_initialize+0x120>)
 800826e:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 8008272:	4b28      	ldr	r3, [pc, #160]	; (8008314 <motor_function_initialize+0x104>)
 8008274:	82da      	strh	r2, [r3, #22]
    motor_function_InstP.InstP_Model2.short_cnt = sys_regs.holdings[36];
 8008276:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <motor_function_initialize+0x120>)
 8008278:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 800827c:	4b25      	ldr	r3, [pc, #148]	; (8008314 <motor_function_initialize+0x104>)
 800827e:	835a      	strh	r2, [r3, #26]
    motor_function_InstP.InstP_Model2.transfer_cnt = sys_regs.holdings[104];
 8008280:	4b2b      	ldr	r3, [pc, #172]	; (8008330 <motor_function_initialize+0x120>)
 8008282:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 8008286:	4b23      	ldr	r3, [pc, #140]	; (8008314 <motor_function_initialize+0x104>)
 8008288:	839a      	strh	r2, [r3, #28]
    motor_function_InstP.InstP_Model3.debounce_cnt = sys_regs.holdings[100];
 800828a:	4b29      	ldr	r3, [pc, #164]	; (8008330 <motor_function_initialize+0x120>)
 800828c:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 8008290:	4b20      	ldr	r3, [pc, #128]	; (8008314 <motor_function_initialize+0x104>)
 8008292:	83da      	strh	r2, [r3, #30]
    motor_function_InstP.InstP_Model3.longpress_cnt = sys_regs.holdings[101];
 8008294:	4b26      	ldr	r3, [pc, #152]	; (8008330 <motor_function_initialize+0x120>)
 8008296:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 800829a:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <motor_function_initialize+0x104>)
 800829c:	845a      	strh	r2, [r3, #34]	; 0x22
    motor_function_InstP.InstP_Model3.long_cnt = sys_regs.holdings[102];
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <motor_function_initialize+0x120>)
 80082a0:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 80082a4:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <motor_function_initialize+0x104>)
 80082a6:	841a      	strh	r2, [r3, #32]
    motor_function_InstP.InstP_Model3.short_cnt = sys_regs.holdings[36];
 80082a8:	4b21      	ldr	r3, [pc, #132]	; (8008330 <motor_function_initialize+0x120>)
 80082aa:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 80082ae:	4b19      	ldr	r3, [pc, #100]	; (8008314 <motor_function_initialize+0x104>)
 80082b0:	849a      	strh	r2, [r3, #36]	; 0x24
    motor_function_InstP.InstP_Model3.transfer_cnt = sys_regs.holdings[104];
 80082b2:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <motor_function_initialize+0x120>)
 80082b4:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <motor_function_initialize+0x104>)
 80082ba:	84da      	strh	r2, [r3, #38]	; 0x26
    motor_function_InstP.InstP_Model.long_cnt = sys_regs.holdings[102];
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <motor_function_initialize+0x120>)
 80082be:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 80082c2:	4b14      	ldr	r3, [pc, #80]	; (8008314 <motor_function_initialize+0x104>)
 80082c4:	805a      	strh	r2, [r3, #2]
    motor_function_InstP.InstP_Model.short_cnt = sys_regs.holdings[36];
 80082c6:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <motor_function_initialize+0x120>)
 80082c8:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 80082cc:	4b11      	ldr	r3, [pc, #68]	; (8008314 <motor_function_initialize+0x104>)
 80082ce:	80da      	strh	r2, [r3, #6]
    motor_function_InstP.InstP_Model.transfer_cnt = sys_regs.holdings[104];
 80082d0:	4b17      	ldr	r3, [pc, #92]	; (8008330 <motor_function_initialize+0x120>)
 80082d2:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <motor_function_initialize+0x104>)
 80082d8:	811a      	strh	r2, [r3, #8]
    motor_function_InstP.InstP_Model1.debounce_cnt = sys_regs.holdings[100];
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <motor_function_initialize+0x120>)
 80082dc:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 80082e0:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <motor_function_initialize+0x104>)
 80082e2:	815a      	strh	r2, [r3, #10]
    motor_function_InstP.InstP_Model1.longpress_cnt = sys_regs.holdings[101];
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <motor_function_initialize+0x120>)
 80082e6:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <motor_function_initialize+0x104>)
 80082ec:	81da      	strh	r2, [r3, #14]
    motor_function_InstP.InstP_Model1.long_cnt = sys_regs.holdings[102];
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <motor_function_initialize+0x120>)
 80082f0:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 80082f4:	4b07      	ldr	r3, [pc, #28]	; (8008314 <motor_function_initialize+0x104>)
 80082f6:	819a      	strh	r2, [r3, #12]
    motor_function_InstP.InstP_Model1.short_cnt = sys_regs.holdings[36];
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <motor_function_initialize+0x120>)
 80082fa:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <motor_function_initialize+0x104>)
 8008300:	821a      	strh	r2, [r3, #16]
    motor_function_InstP.InstP_Model1.transfer_cnt = sys_regs.holdings[104];
 8008302:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <motor_function_initialize+0x120>)
 8008304:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <motor_function_initialize+0x104>)
 800830a:	825a      	strh	r2, [r3, #18]
}
 800830c:	bf00      	nop
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20003040 	.word	0x20003040
 8008314:	200000a0 	.word	0x200000a0
 8008318:	200000aa 	.word	0x200000aa
 800831c:	200000b4 	.word	0x200000b4
 8008320:	200000be 	.word	0x200000be
 8008324:	20003058 	.word	0x20003058
 8008328:	20003070 	.word	0x20003070
 800832c:	20003088 	.word	0x20003088
 8008330:	20002948 	.word	0x20002948

08008334 <motor_param_persist_step>:
#include "motor_param_persist.h"
#include "div_nde_s32_floor.h"

DW_motor_param_persist_T motor_param_persist_DW;
void motor_param_persist_step(void)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b089      	sub	sp, #36	; 0x24
 8008338:	af04      	add	r7, sp, #16
    int16_T rtb_DataStoreRead_o1;
    int16_T rtb_DataStoreRead_o2;
    int16_T rtb_DataStoreRead_o3;
    int16_T rtb_DataStoreRead_o4;
    int16_T rtb_DataStoreRead_o5;
    rtb_DataStoreRead_o1 = sys_regs.holdings[100];
 800833a:	4b4e      	ldr	r3, [pc, #312]	; (8008474 <motor_param_persist_step+0x140>)
 800833c:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 8008340:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2 = sys_regs.holdings[101];
 8008342:	4b4c      	ldr	r3, [pc, #304]	; (8008474 <motor_param_persist_step+0x140>)
 8008344:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 8008348:	817b      	strh	r3, [r7, #10]
    rtb_DataStoreRead_o3 = sys_regs.holdings[102];
 800834a:	4b4a      	ldr	r3, [pc, #296]	; (8008474 <motor_param_persist_step+0x140>)
 800834c:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 8008350:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o4 = sys_regs.holdings[103];
 8008352:	4b48      	ldr	r3, [pc, #288]	; (8008474 <motor_param_persist_step+0x140>)
 8008354:	f9b3 34ce 	ldrsh.w	r3, [r3, #1230]	; 0x4ce
 8008358:	80fb      	strh	r3, [r7, #6]
    rtb_DataStoreRead_o5 = sys_regs.holdings[104];
 800835a:	4b46      	ldr	r3, [pc, #280]	; (8008474 <motor_param_persist_step+0x140>)
 800835c:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008360:	80bb      	strh	r3, [r7, #4]
    change_monitor(&rtb_DataStoreRead_o1, &rtb_DataStoreRead_o2, &rtb_DataStoreRead_o3, &rtb_DataStoreRead_o4, &rtb_DataStoreRead_o5,
 8008362:	1dbc      	adds	r4, r7, #6
 8008364:	f107 0208 	add.w	r2, r7, #8
 8008368:	f107 010a 	add.w	r1, r7, #10
 800836c:	f107 000c 	add.w	r0, r7, #12
 8008370:	4b41      	ldr	r3, [pc, #260]	; (8008478 <motor_param_persist_step+0x144>)
 8008372:	9302      	str	r3, [sp, #8]
 8008374:	f107 030f 	add.w	r3, r7, #15
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	1d3b      	adds	r3, r7, #4
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	4623      	mov	r3, r4
 8008380:	f000 f917 	bl	80085b2 <change_monitor>
                   &rtb_Model, &(motor_param_persist_DW.Model_InstanceData.rtdw));
    if (rtb_Model)
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d06f      	beq.n	800846a <motor_param_persist_step+0x136>
    {
        ee_ram[0] = (uint8_T)(sys_regs.holdings[100] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[100], 256) << 8));
 800838a:	4b3a      	ldr	r3, [pc, #232]	; (8008474 <motor_param_persist_step+0x140>)
 800838c:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 8008390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f8e5 	bl	8008564 <div_nde_s32_floor>
 800839a:	4b36      	ldr	r3, [pc, #216]	; (8008474 <motor_param_persist_step+0x140>)
 800839c:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	4b36      	ldr	r3, [pc, #216]	; (800847c <motor_param_persist_step+0x148>)
 80083a4:	701a      	strb	r2, [r3, #0]
        ee_ram[1] = (uint8_T)(sys_regs.holdings[100] >> 8);
 80083a6:	4b33      	ldr	r3, [pc, #204]	; (8008474 <motor_param_persist_step+0x140>)
 80083a8:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 80083ac:	121b      	asrs	r3, r3, #8
 80083ae:	b21b      	sxth	r3, r3
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	4b32      	ldr	r3, [pc, #200]	; (800847c <motor_param_persist_step+0x148>)
 80083b4:	705a      	strb	r2, [r3, #1]
        ee_ram[2] = (uint8_T)(sys_regs.holdings[101] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[101], 256) << 8));
 80083b6:	4b2f      	ldr	r3, [pc, #188]	; (8008474 <motor_param_persist_step+0x140>)
 80083b8:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 80083bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f8cf 	bl	8008564 <div_nde_s32_floor>
 80083c6:	4b2b      	ldr	r3, [pc, #172]	; (8008474 <motor_param_persist_step+0x140>)
 80083c8:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	4b2b      	ldr	r3, [pc, #172]	; (800847c <motor_param_persist_step+0x148>)
 80083d0:	709a      	strb	r2, [r3, #2]
        ee_ram[3] = (uint8_T)(sys_regs.holdings[101] >> 8);
 80083d2:	4b28      	ldr	r3, [pc, #160]	; (8008474 <motor_param_persist_step+0x140>)
 80083d4:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 80083d8:	121b      	asrs	r3, r3, #8
 80083da:	b21b      	sxth	r3, r3
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	4b27      	ldr	r3, [pc, #156]	; (800847c <motor_param_persist_step+0x148>)
 80083e0:	70da      	strb	r2, [r3, #3]
        ee_ram[4] = (uint8_T)(sys_regs.holdings[102] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[102], 256) << 8));
 80083e2:	4b24      	ldr	r3, [pc, #144]	; (8008474 <motor_param_persist_step+0x140>)
 80083e4:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 80083e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 f8b9 	bl	8008564 <div_nde_s32_floor>
 80083f2:	4b20      	ldr	r3, [pc, #128]	; (8008474 <motor_param_persist_step+0x140>)
 80083f4:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <motor_param_persist_step+0x148>)
 80083fc:	711a      	strb	r2, [r3, #4]
        ee_ram[5] = (uint8_T)(sys_regs.holdings[102] >> 8);
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <motor_param_persist_step+0x140>)
 8008400:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 8008404:	121b      	asrs	r3, r3, #8
 8008406:	b21b      	sxth	r3, r3
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b1c      	ldr	r3, [pc, #112]	; (800847c <motor_param_persist_step+0x148>)
 800840c:	715a      	strb	r2, [r3, #5]
        ee_ram[6] = (uint8_T)(sys_regs.holdings[103] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[103], 256) << 8));
 800840e:	4b19      	ldr	r3, [pc, #100]	; (8008474 <motor_param_persist_step+0x140>)
 8008410:	f9b3 34ce 	ldrsh.w	r3, [r3, #1230]	; 0x4ce
 8008414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f8a3 	bl	8008564 <div_nde_s32_floor>
 800841e:	4b15      	ldr	r3, [pc, #84]	; (8008474 <motor_param_persist_step+0x140>)
 8008420:	f9b3 34ce 	ldrsh.w	r3, [r3, #1230]	; 0x4ce
 8008424:	b2da      	uxtb	r2, r3
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <motor_param_persist_step+0x148>)
 8008428:	719a      	strb	r2, [r3, #6]
        ee_ram[7] = (uint8_T)(sys_regs.holdings[103] >> 8);
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <motor_param_persist_step+0x140>)
 800842c:	f9b3 34ce 	ldrsh.w	r3, [r3, #1230]	; 0x4ce
 8008430:	121b      	asrs	r3, r3, #8
 8008432:	b21b      	sxth	r3, r3
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4b11      	ldr	r3, [pc, #68]	; (800847c <motor_param_persist_step+0x148>)
 8008438:	71da      	strb	r2, [r3, #7]
        ee_ram[8] = (uint8_T)(sys_regs.holdings[104] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[104], 256) << 8));
 800843a:	4b0e      	ldr	r3, [pc, #56]	; (8008474 <motor_param_persist_step+0x140>)
 800843c:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f88d 	bl	8008564 <div_nde_s32_floor>
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <motor_param_persist_step+0x140>)
 800844c:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008450:	b2da      	uxtb	r2, r3
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <motor_param_persist_step+0x148>)
 8008454:	721a      	strb	r2, [r3, #8]
        ee_ram[9] = (uint8_T)(sys_regs.holdings[104] >> 8);
 8008456:	4b07      	ldr	r3, [pc, #28]	; (8008474 <motor_param_persist_step+0x140>)
 8008458:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 800845c:	121b      	asrs	r3, r3, #8
 800845e:	b21b      	sxth	r3, r3
 8008460:	b2da      	uxtb	r2, r3
 8008462:	4b06      	ldr	r3, [pc, #24]	; (800847c <motor_param_persist_step+0x148>)
 8008464:	725a      	strb	r2, [r3, #9]
        ee_commit();
 8008466:	f7f8 fc39 	bl	8000cdc <ee_commit>
    }
}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	bd90      	pop	{r4, r7, pc}
 8008472:	bf00      	nop
 8008474:	20002948 	.word	0x20002948
 8008478:	200030b0 	.word	0x200030b0
 800847c:	20002f58 	.word	0x20002f58

08008480 <motor_param_persist_initialize>:

void motor_param_persist_initialize(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
    sys_regs.holdings[100] = (int16_T)((int16_T)(ee_ram[1] << 8) + ee_ram[0]);
 8008484:	4b35      	ldr	r3, [pc, #212]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	b29a      	uxth	r2, r3
 800848c:	4b33      	ldr	r3, [pc, #204]	; (800855c <motor_param_persist_initialize+0xdc>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	4413      	add	r3, r2
 8008494:	b29b      	uxth	r3, r3
 8008496:	b21a      	sxth	r2, r3
 8008498:	4b31      	ldr	r3, [pc, #196]	; (8008560 <motor_param_persist_initialize+0xe0>)
 800849a:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
    sys_regs.holdings[101] = (int16_T)((int16_T)(ee_ram[3] << 8) + ee_ram[2]);
 800849e:	4b2f      	ldr	r3, [pc, #188]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084a0:	78db      	ldrb	r3, [r3, #3]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	4b2d      	ldr	r3, [pc, #180]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084a8:	789b      	ldrb	r3, [r3, #2]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	4413      	add	r3, r2
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	b21a      	sxth	r2, r3
 80084b2:	4b2b      	ldr	r3, [pc, #172]	; (8008560 <motor_param_persist_initialize+0xe0>)
 80084b4:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
    sys_regs.holdings[102] = (int16_T)((int16_T)(ee_ram[5] << 8) + ee_ram[4]);
 80084b8:	4b28      	ldr	r3, [pc, #160]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084ba:	795b      	ldrb	r3, [r3, #5]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	b29a      	uxth	r2, r3
 80084c0:	4b26      	ldr	r3, [pc, #152]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4413      	add	r3, r2
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	b21a      	sxth	r2, r3
 80084cc:	4b24      	ldr	r3, [pc, #144]	; (8008560 <motor_param_persist_initialize+0xe0>)
 80084ce:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
    sys_regs.holdings[103] = (int16_T)((int16_T)(ee_ram[7] << 8) + ee_ram[6]);
 80084d2:	4b22      	ldr	r3, [pc, #136]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084d4:	79db      	ldrb	r3, [r3, #7]
 80084d6:	021b      	lsls	r3, r3, #8
 80084d8:	b29a      	uxth	r2, r3
 80084da:	4b20      	ldr	r3, [pc, #128]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084dc:	799b      	ldrb	r3, [r3, #6]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4413      	add	r3, r2
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	b21a      	sxth	r2, r3
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <motor_param_persist_initialize+0xe0>)
 80084e8:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
    sys_regs.holdings[104] = (int16_T)((int16_T)(ee_ram[9] << 8) + ee_ram[8]);
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084ee:	7a5b      	ldrb	r3, [r3, #9]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	4b19      	ldr	r3, [pc, #100]	; (800855c <motor_param_persist_initialize+0xdc>)
 80084f6:	7a1b      	ldrb	r3, [r3, #8]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	4413      	add	r3, r2
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	b21a      	sxth	r2, r3
 8008500:	4b17      	ldr	r3, [pc, #92]	; (8008560 <motor_param_persist_initialize+0xe0>)
 8008502:	f8a3 24d0 	strh.w	r2, [r3, #1232]	; 0x4d0
    if (ee_ram[100] != 1)
 8008506:	4b15      	ldr	r3, [pc, #84]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008508:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800850c:	2b01      	cmp	r3, #1
 800850e:	d023      	beq.n	8008558 <motor_param_persist_initialize+0xd8>
    {
        ee_ram[100] = 1U;
 8008510:	4b12      	ldr	r3, [pc, #72]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        ee_ram[0] = 4U;
 8008518:	4b10      	ldr	r3, [pc, #64]	; (800855c <motor_param_persist_initialize+0xdc>)
 800851a:	2204      	movs	r2, #4
 800851c:	701a      	strb	r2, [r3, #0]
        ee_ram[1] = 0U;
 800851e:	4b0f      	ldr	r3, [pc, #60]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008520:	2200      	movs	r2, #0
 8008522:	705a      	strb	r2, [r3, #1]
        ee_ram[2] = 100U;
 8008524:	4b0d      	ldr	r3, [pc, #52]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008526:	2264      	movs	r2, #100	; 0x64
 8008528:	709a      	strb	r2, [r3, #2]
        ee_ram[3] = 0U;
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <motor_param_persist_initialize+0xdc>)
 800852c:	2200      	movs	r2, #0
 800852e:	70da      	strb	r2, [r3, #3]
        ee_ram[4] = 112U;
 8008530:	4b0a      	ldr	r3, [pc, #40]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008532:	2270      	movs	r2, #112	; 0x70
 8008534:	711a      	strb	r2, [r3, #4]
        ee_ram[5] = 23U;
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008538:	2217      	movs	r2, #23
 800853a:	715a      	strb	r2, [r3, #5]
        ee_ram[6] = 20U;
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <motor_param_persist_initialize+0xdc>)
 800853e:	2214      	movs	r2, #20
 8008540:	719a      	strb	r2, [r3, #6]
        ee_ram[7] = 0U;
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008544:	2200      	movs	r2, #0
 8008546:	71da      	strb	r2, [r3, #7]
        ee_ram[8] = 50U;
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <motor_param_persist_initialize+0xdc>)
 800854a:	2232      	movs	r2, #50	; 0x32
 800854c:	721a      	strb	r2, [r3, #8]
        ee_ram[9] = 0U;
 800854e:	4b03      	ldr	r3, [pc, #12]	; (800855c <motor_param_persist_initialize+0xdc>)
 8008550:	2200      	movs	r2, #0
 8008552:	725a      	strb	r2, [r3, #9]
        ee_commit();
 8008554:	f7f8 fbc2 	bl	8000cdc <ee_commit>
    }
}
 8008558:	bf00      	nop
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20002f58 	.word	0x20002f58
 8008560:	20002948 	.word	0x20002948

08008564 <div_nde_s32_floor>:
#include "rtwtypes.h"
#include "div_nde_s32_floor.h"

int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
    return (((numerator < 0) != (denominator < 0)) && (numerator % denominator != 0) ? -1 : 0) + numerator / denominator;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	0fdb      	lsrs	r3, r3, #31
 8008572:	b2da      	uxtb	r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	0fdb      	lsrs	r3, r3, #31
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4053      	eors	r3, r2
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00c      	beq.n	800859c <div_nde_s32_floor+0x38>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	fb93 f2f2 	sdiv	r2, r3, r2
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	fb01 f202 	mul.w	r2, r1, r2
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <div_nde_s32_floor+0x38>
 8008596:	f04f 32ff 	mov.w	r2, #4294967295
 800859a:	e000      	b.n	800859e <div_nde_s32_floor+0x3a>
 800859c:	2200      	movs	r2, #0
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	fb91 f3f3 	sdiv	r3, r1, r3
 80085a6:	4413      	add	r3, r2
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr

080085b2 <change_monitor>:
#include "change_monitor.h"

void change_monitor(const int16_T *rtu_debounce, const int16_T *rtu_longpress, const int16_T *rtu_long, const int16_T *rtu_short, const
                    int16_T *rtu_transfer, boolean_T *rty_changed, DW_change_monitor_f_T *localDW)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b087      	sub	sp, #28
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	603b      	str	r3, [r7, #0]
    boolean_T rtb_FixPtRelationalOperator;
    boolean_T rtb_FixPtRelationalOperator_a;
    boolean_T rtb_FixPtRelationalOperator_e;
    boolean_T rtb_FixPtRelationalOperator_h;
    boolean_T rtb_FixPtRelationalOperator_hh;
    rtb_FixPtRelationalOperator = (*rtu_debounce != localDW->DelayInput1_DSTATE);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	bf14      	ite	ne
 80085d0:	2301      	movne	r3, #1
 80085d2:	2300      	moveq	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	75fb      	strb	r3, [r7, #23]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_e;
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_h = (*rtu_longpress != localDW->DelayInput1_DSTATE);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	bf14      	ite	ne
 80085f2:	2301      	movne	r3, #1
 80085f4:	2300      	moveq	r3, #0
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	75bb      	strb	r3, [r7, #22]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_k;
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_e = (*rtu_long != localDW->DelayInput1_DSTATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f9b3 2000 	ldrsh.w	r2, [r3]
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008610:	429a      	cmp	r2, r3
 8008612:	bf14      	ite	ne
 8008614:	2301      	movne	r3, #1
 8008616:	2300      	moveq	r3, #0
 8008618:	b2db      	uxtb	r3, r3
 800861a:	757b      	strb	r3, [r7, #21]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_m;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_hh = (*rtu_short != localDW->DelayInput1_DSTATE);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	f9b3 2000 	ldrsh.w	r2, [r3]
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008632:	429a      	cmp	r2, r3
 8008634:	bf14      	ite	ne
 8008636:	2301      	movne	r3, #1
 8008638:	2300      	moveq	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	753b      	strb	r3, [r7, #20]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_i;
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_a = (*rtu_transfer != localDW->DelayInput1_DSTATE);
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008654:	429a      	cmp	r2, r3
 8008656:	bf14      	ite	ne
 8008658:	2301      	movne	r3, #1
 800865a:	2300      	moveq	r3, #0
 800865c:	b2db      	uxtb	r3, r3
 800865e:	74fb      	strb	r3, [r7, #19]
    rtb_FixPtRelationalOperator = (rtb_FixPtRelationalOperator || rtb_FixPtRelationalOperator_h || rtb_FixPtRelationalOperator_e ||
        rtb_FixPtRelationalOperator_hh || rtb_FixPtRelationalOperator_a);
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10b      	bne.n	800867e <change_monitor+0xcc>
    rtb_FixPtRelationalOperator = (rtb_FixPtRelationalOperator || rtb_FixPtRelationalOperator_h || rtb_FixPtRelationalOperator_e ||
 8008666:	7dbb      	ldrb	r3, [r7, #22]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d108      	bne.n	800867e <change_monitor+0xcc>
 800866c:	7d7b      	ldrb	r3, [r7, #21]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d105      	bne.n	800867e <change_monitor+0xcc>
 8008672:	7d3b      	ldrb	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <change_monitor+0xcc>
        rtb_FixPtRelationalOperator_hh || rtb_FixPtRelationalOperator_a);
 8008678:	7cfb      	ldrb	r3, [r7, #19]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <change_monitor+0xd0>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <change_monitor+0xd2>
 8008682:	2300      	movs	r3, #0
    rtb_FixPtRelationalOperator = (rtb_FixPtRelationalOperator || rtb_FixPtRelationalOperator_h || rtb_FixPtRelationalOperator_e ||
 8008684:	75fb      	strb	r3, [r7, #23]
    localDW->Delay_DSTATE = (uint8_T)((uint32_T)rtb_FixPtRelationalOperator + localDW->Delay_DSTATE);
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	7a9a      	ldrb	r2, [r3, #10]
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	4413      	add	r3, r2
 800868e:	b2da      	uxtb	r2, r3
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	729a      	strb	r2, [r3, #10]
    if (localDW->Delay_DSTATE >= 100)
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	7a9b      	ldrb	r3, [r3, #10]
 8008698:	2b63      	cmp	r3, #99	; 0x63
 800869a:	d902      	bls.n	80086a2 <change_monitor+0xf0>
    {
        localDW->Delay_DSTATE = 100U;
 800869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869e:	2264      	movs	r2, #100	; 0x64
 80086a0:	729a      	strb	r2, [r3, #10]
    }

    *rty_changed = (rtb_FixPtRelationalOperator && (localDW->Delay_DSTATE >= 2));
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d005      	beq.n	80086b4 <change_monitor+0x102>
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	7a9b      	ldrb	r3, [r3, #10]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d901      	bls.n	80086b4 <change_monitor+0x102>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <change_monitor+0x104>
 80086b4:	2300      	movs	r3, #0
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	701a      	strb	r2, [r3, #0]
    localDW->DelayInput1_DSTATE = *rtu_debounce;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	801a      	strh	r2, [r3, #0]
    localDW->DelayInput1_DSTATE_e = *rtu_longpress;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	805a      	strh	r2, [r3, #2]
    localDW->DelayInput1_DSTATE_k = *rtu_long;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	809a      	strh	r2, [r3, #4]
    localDW->DelayInput1_DSTATE_m = *rtu_short;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	80da      	strh	r2, [r3, #6]
    localDW->DelayInput1_DSTATE_i = *rtu_transfer;
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	811a      	strh	r2, [r3, #8]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <motor_channel_MOTOR>:

static void motor_channel_MOTOR(int16_T *rty_up_relay, int16_T *rty_down_relay, RT_MODEL_motor_channel_T * const motor_channel_M,
    DW_motor_channel_f_T *localDW);
static void motor_channel_MOTOR(int16_T *rty_up_relay, int16_T *rty_down_relay, RT_MODEL_motor_channel_T * const motor_channel_M,
    DW_motor_channel_f_T *localDW)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
    InstP_motor_channel_T *motor_channel_InstP_arg = motor_channel_M->motor_channel_InstP_ref;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	617b      	str	r3, [r7, #20]
    switch (localDW->is_MOTOR)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	7c9b      	ldrb	r3, [r3, #18]
 8008710:	3b01      	subs	r3, #1
 8008712:	2b06      	cmp	r3, #6
 8008714:	f200 8107 	bhi.w	8008926 <motor_channel_MOTOR+0x22e>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <motor_channel_MOTOR+0x28>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	0800873d 	.word	0x0800873d
 8008724:	08008763 	.word	0x08008763
 8008728:	080087bf 	.word	0x080087bf
 800872c:	0800881b 	.word	0x0800881b
 8008730:	080088ad 	.word	0x080088ad
 8008734:	080088cb 	.word	0x080088cb
 8008738:	080088e9 	.word	0x080088e9
    {
      case motor_channel_IN_DOWN_TO_LONGUP:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->transfer_cnt)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	891a      	ldrh	r2, [r3, #8]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008746:	b29b      	uxth	r3, r3
 8008748:	429a      	cmp	r2, r3
 800874a:	f0c0 80df 	bcc.w	800890c <motor_channel_MOTOR+0x214>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_UP;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2203      	movs	r2, #3
 8008752:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	801a      	strh	r2, [r3, #0]
        }
        break;
 8008760:	e0d4      	b.n	800890c <motor_channel_MOTOR+0x214>

      case motor_channel_IN_LONG_DOWN:
        if ((localDW->sfEvent == motor_chan_event_down_key_click) || (localDW->sfEvent == motor_channe_event_up_key_click) ||
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00f      	beq.n	800878a <motor_channel_MOTOR+0x92>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b07      	cmp	r3, #7
 8008770:	d00b      	beq.n	800878a <motor_channel_MOTOR+0x92>
                (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
        if ((localDW->sfEvent == motor_chan_event_down_key_click) || (localDW->sfEvent == motor_channe_event_up_key_click) ||
 8008776:	2b06      	cmp	r3, #6
 8008778:	d007      	beq.n	800878a <motor_channel_MOTOR+0x92>
                (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	891a      	ldrh	r2, [r3, #8]
                motor_channel_InstP_arg->long_cnt))
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 8008784:	b29b      	uxth	r3, r3
 8008786:	429a      	cmp	r2, r3
 8008788:	d306      	bcc.n	8008798 <motor_channel_MOTOR+0xa0>
        {
            *rty_down_relay = 0;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2204      	movs	r2, #4
 8008794:	749a      	strb	r2, [r3, #18]
        {
            *rty_down_relay = 0;
            localDW->is_MOTOR = motor_channel_IN_DOWN_TO_LONGUP;
            localDW->temporalCounter_i3 = 0U;
        }
        break;
 8008796:	e0bb      	b.n	8008910 <motor_channel_MOTOR+0x218>
        else if ((localDW->sfEvent == motor_c_event_up_key_long_press) || (localDW->sfEvent == motor_chann_event_long_up_event))
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d004      	beq.n	80087aa <motor_channel_MOTOR+0xb2>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	f040 80b3 	bne.w	8008910 <motor_channel_MOTOR+0x218>
            *rty_down_relay = 0;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_DOWN_TO_LONGUP;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2201      	movs	r2, #1
 80087b4:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2200      	movs	r2, #0
 80087ba:	811a      	strh	r2, [r3, #8]
        break;
 80087bc:	e0a8      	b.n	8008910 <motor_channel_MOTOR+0x218>

      case motor_channel_IN_LONG_UP:
        if ((localDW->sfEvent == motor_event_down_key_long_press) || (localDW->sfEvent == motor_cha_event_long_down_event))
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d003      	beq.n	80087ce <motor_channel_MOTOR+0xd6>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d109      	bne.n	80087e2 <motor_channel_MOTOR+0xea>
        {
            *rty_up_relay = 0;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_UP_TO_LONGDOWN;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2207      	movs	r2, #7
 80087d8:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2200      	movs	r2, #0
 80087de:	811a      	strh	r2, [r3, #8]
                  motor_channel_InstP_arg->long_cnt))
        {
            *rty_up_relay = 0;
            localDW->is_MOTOR = motor_channel_IN_OFF;
        }
        break;
 80087e0:	e098      	b.n	8008914 <motor_channel_MOTOR+0x21c>
        else if ((localDW->sfEvent == motor_channe_event_up_key_click) || (localDW->sfEvent == motor_chan_event_down_key_click) ||
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b07      	cmp	r3, #7
 80087e8:	d010      	beq.n	800880c <motor_channel_MOTOR+0x114>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <motor_channel_MOTOR+0x114>
                 (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
        else if ((localDW->sfEvent == motor_channe_event_up_key_click) || (localDW->sfEvent == motor_chan_event_down_key_click) ||
 80087f6:	2b06      	cmp	r3, #6
 80087f8:	d008      	beq.n	800880c <motor_channel_MOTOR+0x114>
                 (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	891a      	ldrh	r2, [r3, #8]
                  motor_channel_InstP_arg->long_cnt))
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                 (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 8008804:	b29b      	uxth	r3, r3
 8008806:	429a      	cmp	r2, r3
 8008808:	f0c0 8084 	bcc.w	8008914 <motor_channel_MOTOR+0x21c>
            *rty_up_relay = 0;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2204      	movs	r2, #4
 8008816:	749a      	strb	r2, [r3, #18]
        break;
 8008818:	e07c      	b.n	8008914 <motor_channel_MOTOR+0x21c>

      case motor_channel_IN_OFF:
        if ((localDW->sfEvent == motor_channe_event_up_key_click) || (localDW->sfEvent == motor_chan_event_short_up_event))
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b07      	cmp	r3, #7
 8008820:	d003      	beq.n	800882a <motor_channel_MOTOR+0x132>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b05      	cmp	r3, #5
 8008828:	d109      	bne.n	800883e <motor_channel_MOTOR+0x146>
        {
            localDW->is_MOTOR = motor_channel_IN_SHORT_UP_m;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2206      	movs	r2, #6
 800882e:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e035      	b.n	80088aa <motor_channel_MOTOR+0x1b2>
        }
        else if ((localDW->sfEvent == motor_c_event_up_key_long_press) || (localDW->sfEvent == motor_chann_event_long_up_event))
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b08      	cmp	r3, #8
 8008844:	d003      	beq.n	800884e <motor_channel_MOTOR+0x156>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d109      	bne.n	8008862 <motor_channel_MOTOR+0x16a>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_UP;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2203      	movs	r2, #3
 8008852:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	e023      	b.n	80088aa <motor_channel_MOTOR+0x1b2>
        }
        else if ((localDW->sfEvent == motor_chan_event_down_key_click) || (localDW->sfEvent == motor_ch_event_short_down_event))
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <motor_channel_MOTOR+0x17a>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d109      	bne.n	8008886 <motor_channel_MOTOR+0x18e>
        {
            localDW->is_MOTOR = motor_channel_IN_SHORT_DOWN_f;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2205      	movs	r2, #5
 8008876:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2200      	movs	r2, #0
 800887c:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2201      	movs	r2, #1
 8008882:	801a      	strh	r2, [r3, #0]
 8008884:	e011      	b.n	80088aa <motor_channel_MOTOR+0x1b2>
        }
        else if ((localDW->sfEvent == motor_event_down_key_long_press) || (localDW->sfEvent == motor_cha_event_long_down_event))
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d003      	beq.n	8008896 <motor_channel_MOTOR+0x19e>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d140      	bne.n	8008918 <motor_channel_MOTOR+0x220>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_DOWN;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	2202      	movs	r2, #2
 800889a:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2201      	movs	r2, #1
 80088a6:	801a      	strh	r2, [r3, #0]
        }
        break;
 80088a8:	e036      	b.n	8008918 <motor_channel_MOTOR+0x220>
 80088aa:	e035      	b.n	8008918 <motor_channel_MOTOR+0x220>

      case motor_channel_IN_SHORT_DOWN_f:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	891a      	ldrh	r2, [r3, #8]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d32f      	bcc.n	800891c <motor_channel_MOTOR+0x224>
        {
            *rty_down_relay = 0;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2204      	movs	r2, #4
 80088c6:	749a      	strb	r2, [r3, #18]
        }
        break;
 80088c8:	e028      	b.n	800891c <motor_channel_MOTOR+0x224>

      case motor_channel_IN_SHORT_UP_m:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	891a      	ldrh	r2, [r3, #8]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d322      	bcc.n	8008920 <motor_channel_MOTOR+0x228>
        {
            *rty_up_relay = 0;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2204      	movs	r2, #4
 80088e4:	749a      	strb	r2, [r3, #18]
        }
        break;
 80088e6:	e01b      	b.n	8008920 <motor_channel_MOTOR+0x228>

      case motor_channel_IN_UP_TO_LONGDOWN:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->transfer_cnt)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	891a      	ldrh	r2, [r3, #8]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d315      	bcc.n	8008924 <motor_channel_MOTOR+0x22c>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_DOWN;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2202      	movs	r2, #2
 80088fc:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2201      	movs	r2, #1
 8008908:	801a      	strh	r2, [r3, #0]
        }
        break;
 800890a:	e00b      	b.n	8008924 <motor_channel_MOTOR+0x22c>
        break;
 800890c:	bf00      	nop
 800890e:	e00a      	b.n	8008926 <motor_channel_MOTOR+0x22e>
        break;
 8008910:	bf00      	nop
 8008912:	e008      	b.n	8008926 <motor_channel_MOTOR+0x22e>
        break;
 8008914:	bf00      	nop
 8008916:	e006      	b.n	8008926 <motor_channel_MOTOR+0x22e>
        break;
 8008918:	bf00      	nop
 800891a:	e004      	b.n	8008926 <motor_channel_MOTOR+0x22e>
        break;
 800891c:	bf00      	nop
 800891e:	e002      	b.n	8008926 <motor_channel_MOTOR+0x22e>
        break;
 8008920:	bf00      	nop
 8008922:	e000      	b.n	8008926 <motor_channel_MOTOR+0x22e>
        break;
 8008924:	bf00      	nop
    }
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <motor_channel_Init>:

void motor_channel_Init(DW_motor_channel_f_T *localDW)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
    localDW->sfEvent = motor_channel_CALL_EVENT;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	601a      	str	r2, [r3, #0]
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	bc80      	pop	{r7}
 8008948:	4770      	bx	lr
	...

0800894c <motor_channel>:

void motor_channel(RT_MODEL_motor_channel_T * const motor_channel_M, const int16_T rtu_ch_btns[2], const int16_T rtu_gp_btns[2], const
                   int16_T rtu_ch_coms[5], const int16_T rtu_gp_coms[5], const int16_T rtu_ch_rmts[5], const int16_T rtu_gp_rmts[5], const
                   int16_T *rtu_com_only, int16_T *rty_up_relay, int16_T *rty_down_relay, DW_motor_channel_f_T *localDW)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	; 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
    InstP_motor_channel_T *motor_channel_InstP_arg = motor_channel_M->motor_channel_InstP_ref;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	61bb      	str	r3, [r7, #24]
    boolean_T Switch3;
    boolean_T Switch4;
    boolean_T Switch5;
    boolean_T Switch6;
    boolean_T Switch7;
    if (*rtu_com_only != 0)
 8008960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d056      	beq.n	8008a18 <motor_channel+0xcc>
    {
        Switch1 = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Switch3 = ((rtu_ch_coms[0] != 0) || (rtu_gp_coms[0] != 0));
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <motor_channel+0x36>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <motor_channel+0x3a>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <motor_channel+0x3c>
 8008986:	2300      	movs	r3, #0
 8008988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        Switch4 = ((rtu_ch_coms[1] != 0) || (rtu_gp_coms[1] != 0));
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3302      	adds	r3, #2
 8008990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d105      	bne.n	80089a4 <motor_channel+0x58>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	3302      	adds	r3, #2
 800899c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <motor_channel+0x5c>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <motor_channel+0x5e>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        Switch5 = ((rtu_ch_coms[2] != 0) || (rtu_gp_coms[2] != 0));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	3304      	adds	r3, #4
 80089b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d105      	bne.n	80089c6 <motor_channel+0x7a>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	3304      	adds	r3, #4
 80089be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <motor_channel+0x7e>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <motor_channel+0x80>
 80089ca:	2300      	movs	r3, #0
 80089cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        Switch6 = ((rtu_ch_coms[3] != 0) || (rtu_gp_coms[3] != 0));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	3306      	adds	r3, #6
 80089d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <motor_channel+0x9c>
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	3306      	adds	r3, #6
 80089e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <motor_channel+0xa0>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <motor_channel+0xa2>
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3020 	strb.w	r3, [r7, #32]
        Switch2 = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	84bb      	strh	r3, [r7, #36]	; 0x24
        Switch7 = ((rtu_ch_coms[4] != 0) || (rtu_gp_coms[4] != 0));
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	3308      	adds	r3, #8
 80089fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <motor_channel+0xc2>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	3308      	adds	r3, #8
 8008a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <motor_channel+0xc6>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <motor_channel+0xc8>
 8008a12:	2300      	movs	r3, #0
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e0a9      	b.n	8008b6c <motor_channel+0x220>
    }
    else
    {
        Switch1 = (int16_T)((rtu_ch_btns[0] != 0) || (rtu_gp_btns[0] != 0));
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d104      	bne.n	8008a2c <motor_channel+0xe0>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <motor_channel+0xe4>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <motor_channel+0xe6>
 8008a30:	2300      	movs	r3, #0
 8008a32:	84fb      	strh	r3, [r7, #38]	; 0x26
        Switch3 = ((rtu_ch_coms[0] != 0) || (rtu_gp_coms[0] != 0) || ((rtu_ch_rmts[0] != 0) || (rtu_gp_rmts[0] != 0)));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10e      	bne.n	8008a5c <motor_channel+0x110>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <motor_channel+0x110>
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <motor_channel+0x110>
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <motor_channel+0x114>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e000      	b.n	8008a62 <motor_channel+0x116>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        Switch4 = ((rtu_ch_coms[1] != 0) || (rtu_gp_coms[1] != 0) || ((rtu_ch_rmts[1] != 0) || (rtu_gp_rmts[1] != 0)));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	3302      	adds	r3, #2
 8008a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d111      	bne.n	8008a96 <motor_channel+0x14a>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	3302      	adds	r3, #2
 8008a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <motor_channel+0x14a>
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	3302      	adds	r3, #2
 8008a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d105      	bne.n	8008a96 <motor_channel+0x14a>
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <motor_channel+0x14e>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <motor_channel+0x150>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        Switch5 = ((rtu_ch_coms[2] != 0) || (rtu_gp_coms[2] != 0) || ((rtu_ch_rmts[2] != 0) || (rtu_gp_rmts[2] != 0)));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d111      	bne.n	8008ad0 <motor_channel+0x184>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	3304      	adds	r3, #4
 8008ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <motor_channel+0x184>
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	3304      	adds	r3, #4
 8008abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d105      	bne.n	8008ad0 <motor_channel+0x184>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <motor_channel+0x188>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e000      	b.n	8008ad6 <motor_channel+0x18a>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        Switch6 = ((rtu_ch_coms[3] != 0) || (rtu_gp_coms[3] != 0) || ((rtu_ch_rmts[3] != 0) || (rtu_gp_rmts[3] != 0)));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	3306      	adds	r3, #6
 8008ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d111      	bne.n	8008b0a <motor_channel+0x1be>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	3306      	adds	r3, #6
 8008aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10b      	bne.n	8008b0a <motor_channel+0x1be>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	3306      	adds	r3, #6
 8008af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <motor_channel+0x1be>
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	3306      	adds	r3, #6
 8008b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <motor_channel+0x1c2>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <motor_channel+0x1c4>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f887 3020 	strb.w	r3, [r7, #32]
        Switch2 = (int16_T)((rtu_ch_btns[1] != 0) || (rtu_gp_btns[1] != 0));
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	3302      	adds	r3, #2
 8008b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d105      	bne.n	8008b2c <motor_channel+0x1e0>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3302      	adds	r3, #2
 8008b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <motor_channel+0x1e4>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <motor_channel+0x1e6>
 8008b30:	2300      	movs	r3, #0
 8008b32:	84bb      	strh	r3, [r7, #36]	; 0x24
        Switch7 = ((rtu_ch_coms[4] != 0) || (rtu_gp_coms[4] != 0) || ((rtu_ch_rmts[4] != 0) || (rtu_gp_rmts[4] != 0)));
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	3308      	adds	r3, #8
 8008b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d111      	bne.n	8008b64 <motor_channel+0x218>
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	3308      	adds	r3, #8
 8008b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <motor_channel+0x218>
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	3308      	adds	r3, #8
 8008b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <motor_channel+0x218>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <motor_channel+0x21c>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <motor_channel+0x21e>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	77fb      	strb	r3, [r7, #31]
    }

    localDW->sfEvent = motor_channel_CALL_EVENT;
 8008b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	601a      	str	r2, [r3, #0]
    if (localDW->temporalCounter_i1 < 32767U)
 8008b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b76:	889b      	ldrh	r3, [r3, #4]
 8008b78:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d805      	bhi.n	8008b8c <motor_channel+0x240>
    {
        localDW->temporalCounter_i1++;
 8008b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b82:	889b      	ldrh	r3, [r3, #4]
 8008b84:	3301      	adds	r3, #1
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8a:	809a      	strh	r2, [r3, #4]
    }

    if (localDW->temporalCounter_i2 < 32767U)
 8008b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d805      	bhi.n	8008ba4 <motor_channel+0x258>
    {
        localDW->temporalCounter_i2++;
 8008b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9a:	88db      	ldrh	r3, [r3, #6]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba2:	80da      	strh	r2, [r3, #6]
    }

    if (localDW->temporalCounter_i3 < 32767U)
 8008ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba6:	891b      	ldrh	r3, [r3, #8]
 8008ba8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d805      	bhi.n	8008bbc <motor_channel+0x270>
    {
        localDW->temporalCounter_i3++;
 8008bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb2:	891b      	ldrh	r3, [r3, #8]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bba:	811a      	strh	r2, [r3, #8]
    }

    if (localDW->is_active_c3_motor_channel == 0U)
 8008bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bbe:	7a9b      	ldrb	r3, [r3, #10]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d118      	bne.n	8008bf6 <motor_channel+0x2aa>
    {
        localDW->is_active_c3_motor_channel = 1U;
 8008bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	729a      	strb	r2, [r3, #10]
        localDW->is_c3_motor_channel = motor_channel_IN_MOTOR_CTRL;
 8008bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bcc:	2201      	movs	r2, #1
 8008bce:	72da      	strb	r2, [r3, #11]
        localDW->is_active_COM_CMD = 1U;
 8008bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	735a      	strb	r2, [r3, #13]
        localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd8:	2201      	movs	r2, #1
 8008bda:	731a      	strb	r2, [r3, #12]
        localDW->is_active_KEY_CMD = 1U;
 8008bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bde:	2201      	movs	r2, #1
 8008be0:	73da      	strb	r2, [r3, #15]
        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008be4:	2202      	movs	r2, #2
 8008be6:	739a      	strb	r2, [r3, #14]
        localDW->is_active_MOTOR = 1U;
 8008be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bea:	2201      	movs	r2, #1
 8008bec:	74da      	strb	r2, [r3, #19]
        localDW->is_MOTOR = motor_channel_IN_OFF;
 8008bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	749a      	strb	r2, [r3, #18]
        if (localDW->is_active_MOTOR != 0U)
        {
            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
        }
    }
}
 8008bf4:	e223      	b.n	800903e <motor_channel+0x6f2>
    else if (localDW->is_c3_motor_channel == 1)
 8008bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf8:	7adb      	ldrb	r3, [r3, #11]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	f040 821f 	bne.w	800903e <motor_channel+0x6f2>
        if (localDW->is_active_COM_CMD != 0U)
 8008c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c02:	7b5b      	ldrb	r3, [r3, #13]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80e6 	beq.w	8008dd6 <motor_channel+0x48a>
            switch (localDW->is_COM_CMD)
 8008c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0c:	7b1b      	ldrb	r3, [r3, #12]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b05      	cmp	r3, #5
 8008c12:	f200 80ed 	bhi.w	8008df0 <motor_channel+0x4a4>
 8008c16:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <motor_channel+0x2d0>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008d5f 	.word	0x08008d5f
 8008c24:	08008d77 	.word	0x08008d77
 8008c28:	08008d8f 	.word	0x08008d8f
 8008c2c:	08008da7 	.word	0x08008da7
 8008c30:	08008dbf 	.word	0x08008dbf
                if (Switch7)
 8008c34:	7ffb      	ldrb	r3, [r7, #31]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d019      	beq.n	8008c6e <motor_channel+0x322>
                    localDW->is_COM_CMD = motor_channel_IN_LONG_DOWN;
 8008c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	2200      	movs	r2, #0
 8008c44:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_cha_event_long_down_event;
 8008c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c4e:	2202      	movs	r2, #2
 8008c50:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c54:	7cdb      	ldrb	r3, [r3, #19]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <motor_channel+0x31a>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c62:	f7ff fd49 	bl	80086f8 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	601a      	str	r2, [r3, #0]
                break;
 8008c6c:	e0b5      	b.n	8008dda <motor_channel+0x48e>
                else if (Switch5)
 8008c6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d019      	beq.n	8008caa <motor_channel+0x35e>
                    localDW->is_COM_CMD = motor_channel_IN_STOP;
 8008c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c78:	2206      	movs	r2, #6
 8008c7a:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c7e:	2200      	movs	r2, #0
 8008c80:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_channel_event_stop_event;
 8008c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8a:	2206      	movs	r2, #6
 8008c8c:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c90:	7cdb      	ldrb	r3, [r3, #19]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <motor_channel+0x356>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c9e:	f7ff fd2b 	bl	80086f8 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	601a      	str	r2, [r3, #0]
                break;
 8008ca8:	e097      	b.n	8008dda <motor_channel+0x48e>
                else if (Switch3)
 8008caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d019      	beq.n	8008ce6 <motor_channel+0x39a>
                    localDW->is_COM_CMD = motor_channel_IN_SHORT_UP;
 8008cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb4:	2205      	movs	r2, #5
 8008cb6:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cba:	2200      	movs	r2, #0
 8008cbc:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_chan_event_short_up_event;
 8008cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ccc:	7cdb      	ldrb	r3, [r3, #19]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <motor_channel+0x392>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cd8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008cda:	f7ff fd0d 	bl	80086f8 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	601a      	str	r2, [r3, #0]
                break;
 8008ce4:	e079      	b.n	8008dda <motor_channel+0x48e>
                else if (Switch4)
 8008ce6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d019      	beq.n	8008d22 <motor_channel+0x3d6>
                    localDW->is_COM_CMD = motor_channel_IN_LONG_UP;
 8008cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_chann_event_long_up_event;
 8008d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d02:	2203      	movs	r2, #3
 8008d04:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d08:	7cdb      	ldrb	r3, [r3, #19]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <motor_channel+0x3ce>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008d16:	f7ff fcef 	bl	80086f8 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	601a      	str	r2, [r3, #0]
                break;
 8008d20:	e05b      	b.n	8008dda <motor_channel+0x48e>
                else if (Switch6)
 8008d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d057      	beq.n	8008dda <motor_channel+0x48e>
                    localDW->is_COM_CMD = motor_channel_IN_SHORT_DOWN;
 8008d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d32:	2200      	movs	r2, #0
 8008d34:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_ch_event_short_down_event;
 8008d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3e:	2204      	movs	r2, #4
 8008d40:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d44:	7cdb      	ldrb	r3, [r3, #19]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <motor_channel+0x40a>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d50:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008d52:	f7ff fcd1 	bl	80086f8 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	601a      	str	r2, [r3, #0]
                break;
 8008d5c:	e03d      	b.n	8008dda <motor_channel+0x48e>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d60:	889a      	ldrh	r2, [r3, #4]
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d337      	bcc.n	8008dde <motor_channel+0x492>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d70:	2201      	movs	r2, #1
 8008d72:	731a      	strb	r2, [r3, #12]
                break;
 8008d74:	e033      	b.n	8008dde <motor_channel+0x492>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d78:	889a      	ldrh	r2, [r3, #4]
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d32d      	bcc.n	8008de2 <motor_channel+0x496>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d88:	2201      	movs	r2, #1
 8008d8a:	731a      	strb	r2, [r3, #12]
                break;
 8008d8c:	e029      	b.n	8008de2 <motor_channel+0x496>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d90:	889a      	ldrh	r2, [r3, #4]
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d323      	bcc.n	8008de6 <motor_channel+0x49a>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da0:	2201      	movs	r2, #1
 8008da2:	731a      	strb	r2, [r3, #12]
                break;
 8008da4:	e01f      	b.n	8008de6 <motor_channel+0x49a>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da8:	889a      	ldrh	r2, [r3, #4]
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d319      	bcc.n	8008dea <motor_channel+0x49e>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db8:	2201      	movs	r2, #1
 8008dba:	731a      	strb	r2, [r3, #12]
                break;
 8008dbc:	e015      	b.n	8008dea <motor_channel+0x49e>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc0:	889a      	ldrh	r2, [r3, #4]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d30f      	bcc.n	8008dee <motor_channel+0x4a2>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	731a      	strb	r2, [r3, #12]
                break;
 8008dd4:	e00b      	b.n	8008dee <motor_channel+0x4a2>
        }
 8008dd6:	bf00      	nop
 8008dd8:	e00a      	b.n	8008df0 <motor_channel+0x4a4>
                break;
 8008dda:	bf00      	nop
 8008ddc:	e008      	b.n	8008df0 <motor_channel+0x4a4>
                break;
 8008dde:	bf00      	nop
 8008de0:	e006      	b.n	8008df0 <motor_channel+0x4a4>
                break;
 8008de2:	bf00      	nop
 8008de4:	e004      	b.n	8008df0 <motor_channel+0x4a4>
                break;
 8008de6:	bf00      	nop
 8008de8:	e002      	b.n	8008df0 <motor_channel+0x4a4>
                break;
 8008dea:	bf00      	nop
 8008dec:	e000      	b.n	8008df0 <motor_channel+0x4a4>
                break;
 8008dee:	bf00      	nop
        if (localDW->is_active_KEY_CMD != 0U)
 8008df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df2:	7bdb      	ldrb	r3, [r3, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8111 	beq.w	800901c <motor_channel+0x6d0>
            switch (localDW->is_KEY_CMD)
 8008dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dfc:	7b9b      	ldrb	r3, [r3, #14]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	f000 8099 	beq.w	8008f36 <motor_channel+0x5ea>
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	f300 8110 	bgt.w	800902a <motor_channel+0x6de>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d002      	beq.n	8008e14 <motor_channel+0x4c8>
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d074      	beq.n	8008efc <motor_channel+0x5b0>
 8008e12:	e10a      	b.n	800902a <motor_channel+0x6de>
                switch (localDW->is_DOWN_KEY_PRESSED)
 8008e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e16:	7c1b      	ldrb	r3, [r3, #16]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d05e      	beq.n	8008eda <motor_channel+0x58e>
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	f300 80ff 	bgt.w	8009020 <motor_channel+0x6d4>
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d002      	beq.n	8008e2c <motor_channel+0x4e0>
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d03d      	beq.n	8008ea6 <motor_channel+0x55a>
                break;
 8008e2a:	e0f9      	b.n	8009020 <motor_channel+0x6d4>
                    if (Switch2 != 1)
 8008e2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d019      	beq.n	8008e68 <motor_channel+0x51c>
                        h_previousEvent = localDW->sfEvent;
 8008e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_chan_event_down_key_click;
 8008e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e42:	7cdb      	ldrb	r3, [r3, #19]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <motor_channel+0x508>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e4e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e50:	f7ff fc52 	bl	80086f8 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	601a      	str	r2, [r3, #0]
                        localDW->is_DOWN_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e62:	2202      	movs	r2, #2
 8008e64:	739a      	strb	r2, [r3, #14]
                    break;
 8008e66:	e043      	b.n	8008ef0 <motor_channel+0x5a4>
                    else if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->longpress_cnt)
 8008e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e6a:	88da      	ldrh	r2, [r3, #6]
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d33b      	bcc.n	8008ef0 <motor_channel+0x5a4>
                        localDW->is_DOWN_KEY_PRESSED = motor_channel_IN_DOWN_LONGPRESS;
 8008e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	741a      	strb	r2, [r3, #16]
                        h_previousEvent = localDW->sfEvent;
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_event_down_key_long_press;
 8008e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e86:	2201      	movs	r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e8c:	7cdb      	ldrb	r3, [r3, #19]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <motor_channel+0x552>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e9a:	f7ff fc2d 	bl	80086f8 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	601a      	str	r2, [r3, #0]
                    break;
 8008ea4:	e024      	b.n	8008ef0 <motor_channel+0x5a4>
                    if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->debounce_cnt)
 8008ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea8:	88da      	ldrh	r2, [r3, #6]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d306      	bcc.n	8008ec4 <motor_channel+0x578>
                        localDW->is_DOWN_KEY_PRESSED = motor_channel_IN_DOWN_CLICK;
 8008eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb8:	2201      	movs	r2, #1
 8008eba:	741a      	strb	r2, [r3, #16]
                        localDW->temporalCounter_i2 = 0U;
 8008ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	80da      	strh	r2, [r3, #6]
                    break;
 8008ec2:	e017      	b.n	8008ef4 <motor_channel+0x5a8>
                    else if (Switch2 != 1)
 8008ec4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d013      	beq.n	8008ef4 <motor_channel+0x5a8>
                        localDW->is_DOWN_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ece:	2200      	movs	r2, #0
 8008ed0:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	739a      	strb	r2, [r3, #14]
                    break;
 8008ed8:	e00c      	b.n	8008ef4 <motor_channel+0x5a8>
                    if (Switch2 != 1)
 8008eda:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d00a      	beq.n	8008ef8 <motor_channel+0x5ac>
                        localDW->is_DOWN_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eea:	2202      	movs	r2, #2
 8008eec:	739a      	strb	r2, [r3, #14]
                    break;
 8008eee:	e003      	b.n	8008ef8 <motor_channel+0x5ac>
                    break;
 8008ef0:	bf00      	nop
 8008ef2:	e095      	b.n	8009020 <motor_channel+0x6d4>
                    break;
 8008ef4:	bf00      	nop
 8008ef6:	e093      	b.n	8009020 <motor_channel+0x6d4>
                    break;
 8008ef8:	bf00      	nop
                break;
 8008efa:	e091      	b.n	8009020 <motor_channel+0x6d4>
                if (Switch1 == 1)
 8008efc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d109      	bne.n	8008f18 <motor_channel+0x5cc>
                    localDW->is_KEY_CMD = motor_channel_IN_UP_KEY_PRESSED;
 8008f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f06:	2203      	movs	r2, #3
 8008f08:	739a      	strb	r2, [r3, #14]
                    localDW->is_UP_KEY_PRESSED = motor_channel_IN_UP_DEBOUNCE;
 8008f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	745a      	strb	r2, [r3, #17]
                    localDW->temporalCounter_i2 = 0U;
 8008f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f12:	2200      	movs	r2, #0
 8008f14:	80da      	strh	r2, [r3, #6]
                break;
 8008f16:	e085      	b.n	8009024 <motor_channel+0x6d8>
                else if (Switch2 == 1)
 8008f18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	f040 8081 	bne.w	8009024 <motor_channel+0x6d8>
                    localDW->is_KEY_CMD = motor_chann_IN_DOWN_KEY_PRESSED;
 8008f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f24:	2201      	movs	r2, #1
 8008f26:	739a      	strb	r2, [r3, #14]
                    localDW->is_DOWN_KEY_PRESSED = motor_channel_IN_DOWN_DEBOUNCE;
 8008f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	741a      	strb	r2, [r3, #16]
                    localDW->temporalCounter_i2 = 0U;
 8008f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f30:	2200      	movs	r2, #0
 8008f32:	80da      	strh	r2, [r3, #6]
                break;
 8008f34:	e076      	b.n	8009024 <motor_channel+0x6d8>
                switch (localDW->is_UP_KEY_PRESSED)
 8008f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f38:	7c5b      	ldrb	r3, [r3, #17]
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d05d      	beq.n	8008ffa <motor_channel+0x6ae>
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	dc72      	bgt.n	8009028 <motor_channel+0x6dc>
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d002      	beq.n	8008f4c <motor_channel+0x600>
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d03d      	beq.n	8008fc6 <motor_channel+0x67a>
                break;
 8008f4a:	e06d      	b.n	8009028 <motor_channel+0x6dc>
                    if (Switch1 != 1)
 8008f4c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d019      	beq.n	8008f88 <motor_channel+0x63c>
                        h_previousEvent = localDW->sfEvent;
 8008f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_channe_event_up_key_click;
 8008f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5c:	2207      	movs	r2, #7
 8008f5e:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f62:	7cdb      	ldrb	r3, [r3, #19]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <motor_channel+0x628>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f70:	f7ff fbc2 	bl	80086f8 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	601a      	str	r2, [r3, #0]
                        localDW->is_UP_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f82:	2202      	movs	r2, #2
 8008f84:	739a      	strb	r2, [r3, #14]
                    break;
 8008f86:	e043      	b.n	8009010 <motor_channel+0x6c4>
                    else if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->longpress_cnt)
 8008f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8a:	88da      	ldrh	r2, [r3, #6]
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d33b      	bcc.n	8009010 <motor_channel+0x6c4>
                        localDW->is_UP_KEY_PRESSED = motor_channel_IN_UP_LONGPRESS;
 8008f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	745a      	strb	r2, [r3, #17]
                        h_previousEvent = localDW->sfEvent;
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_c_event_up_key_long_press;
 8008fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fac:	7cdb      	ldrb	r3, [r3, #19]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <motor_channel+0x672>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008fba:	f7ff fb9d 	bl	80086f8 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	601a      	str	r2, [r3, #0]
                    break;
 8008fc4:	e024      	b.n	8009010 <motor_channel+0x6c4>
                    if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->debounce_cnt)
 8008fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc8:	88da      	ldrh	r2, [r3, #6]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d306      	bcc.n	8008fe4 <motor_channel+0x698>
                        localDW->is_UP_KEY_PRESSED = motor_channel_IN_UP_CLICK;
 8008fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd8:	2201      	movs	r2, #1
 8008fda:	745a      	strb	r2, [r3, #17]
                        localDW->temporalCounter_i2 = 0U;
 8008fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fde:	2200      	movs	r2, #0
 8008fe0:	80da      	strh	r2, [r3, #6]
                    break;
 8008fe2:	e017      	b.n	8009014 <motor_channel+0x6c8>
                    else if (Switch1 != 1)
 8008fe4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d013      	beq.n	8009014 <motor_channel+0x6c8>
                        localDW->is_UP_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fee:	2200      	movs	r2, #0
 8008ff0:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	739a      	strb	r2, [r3, #14]
                    break;
 8008ff8:	e00c      	b.n	8009014 <motor_channel+0x6c8>
                    if (Switch1 != 1)
 8008ffa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d00a      	beq.n	8009018 <motor_channel+0x6cc>
                        localDW->is_UP_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8009002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009004:	2200      	movs	r2, #0
 8009006:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8009008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900a:	2202      	movs	r2, #2
 800900c:	739a      	strb	r2, [r3, #14]
                    break;
 800900e:	e003      	b.n	8009018 <motor_channel+0x6cc>
                    break;
 8009010:	bf00      	nop
 8009012:	e009      	b.n	8009028 <motor_channel+0x6dc>
                    break;
 8009014:	bf00      	nop
 8009016:	e007      	b.n	8009028 <motor_channel+0x6dc>
                    break;
 8009018:	bf00      	nop
                break;
 800901a:	e005      	b.n	8009028 <motor_channel+0x6dc>
        }
 800901c:	bf00      	nop
 800901e:	e004      	b.n	800902a <motor_channel+0x6de>
                break;
 8009020:	bf00      	nop
 8009022:	e002      	b.n	800902a <motor_channel+0x6de>
                break;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <motor_channel+0x6de>
                break;
 8009028:	bf00      	nop
        if (localDW->is_active_MOTOR != 0U)
 800902a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800902c:	7cdb      	ldrb	r3, [r3, #19]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <motor_channel+0x6f2>
            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8009032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009038:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800903a:	f7ff fb5d 	bl	80086f8 <motor_channel_MOTOR>
}
 800903e:	bf00      	nop
 8009040:	3728      	adds	r7, #40	; 0x28
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop

08009048 <__libc_init_array>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	2600      	movs	r6, #0
 800904c:	4d0c      	ldr	r5, [pc, #48]	; (8009080 <__libc_init_array+0x38>)
 800904e:	4c0d      	ldr	r4, [pc, #52]	; (8009084 <__libc_init_array+0x3c>)
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	42a6      	cmp	r6, r4
 8009056:	d109      	bne.n	800906c <__libc_init_array+0x24>
 8009058:	f000 f8f4 	bl	8009244 <_init>
 800905c:	2600      	movs	r6, #0
 800905e:	4d0a      	ldr	r5, [pc, #40]	; (8009088 <__libc_init_array+0x40>)
 8009060:	4c0a      	ldr	r4, [pc, #40]	; (800908c <__libc_init_array+0x44>)
 8009062:	1b64      	subs	r4, r4, r5
 8009064:	10a4      	asrs	r4, r4, #2
 8009066:	42a6      	cmp	r6, r4
 8009068:	d105      	bne.n	8009076 <__libc_init_array+0x2e>
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009070:	4798      	blx	r3
 8009072:	3601      	adds	r6, #1
 8009074:	e7ee      	b.n	8009054 <__libc_init_array+0xc>
 8009076:	f855 3b04 	ldr.w	r3, [r5], #4
 800907a:	4798      	blx	r3
 800907c:	3601      	adds	r6, #1
 800907e:	e7f2      	b.n	8009066 <__libc_init_array+0x1e>
 8009080:	080095b8 	.word	0x080095b8
 8009084:	080095b8 	.word	0x080095b8
 8009088:	080095b8 	.word	0x080095b8
 800908c:	080095bc 	.word	0x080095bc

08009090 <__retarget_lock_acquire_recursive>:
 8009090:	4770      	bx	lr

08009092 <__retarget_lock_release_recursive>:
 8009092:	4770      	bx	lr

08009094 <memcpy>:
 8009094:	440a      	add	r2, r1
 8009096:	4291      	cmp	r1, r2
 8009098:	f100 33ff 	add.w	r3, r0, #4294967295
 800909c:	d100      	bne.n	80090a0 <memcpy+0xc>
 800909e:	4770      	bx	lr
 80090a0:	b510      	push	{r4, lr}
 80090a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a6:	4291      	cmp	r1, r2
 80090a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ac:	d1f9      	bne.n	80090a2 <memcpy+0xe>
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <memset>:
 80090b0:	4603      	mov	r3, r0
 80090b2:	4402      	add	r2, r0
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d100      	bne.n	80090ba <memset+0xa>
 80090b8:	4770      	bx	lr
 80090ba:	f803 1b01 	strb.w	r1, [r3], #1
 80090be:	e7f9      	b.n	80090b4 <memset+0x4>

080090c0 <cleanup_glue>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	460c      	mov	r4, r1
 80090c4:	6809      	ldr	r1, [r1, #0]
 80090c6:	4605      	mov	r5, r0
 80090c8:	b109      	cbz	r1, 80090ce <cleanup_glue+0xe>
 80090ca:	f7ff fff9 	bl	80090c0 <cleanup_glue>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4628      	mov	r0, r5
 80090d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d6:	f000 b869 	b.w	80091ac <_free_r>
	...

080090dc <_reclaim_reent>:
 80090dc:	4b2c      	ldr	r3, [pc, #176]	; (8009190 <_reclaim_reent+0xb4>)
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4604      	mov	r4, r0
 80090e4:	4283      	cmp	r3, r0
 80090e6:	d051      	beq.n	800918c <_reclaim_reent+0xb0>
 80090e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090ea:	b143      	cbz	r3, 80090fe <_reclaim_reent+0x22>
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d14a      	bne.n	8009188 <_reclaim_reent+0xac>
 80090f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f4:	6819      	ldr	r1, [r3, #0]
 80090f6:	b111      	cbz	r1, 80090fe <_reclaim_reent+0x22>
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f857 	bl	80091ac <_free_r>
 80090fe:	6961      	ldr	r1, [r4, #20]
 8009100:	b111      	cbz	r1, 8009108 <_reclaim_reent+0x2c>
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f852 	bl	80091ac <_free_r>
 8009108:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800910a:	b111      	cbz	r1, 8009112 <_reclaim_reent+0x36>
 800910c:	4620      	mov	r0, r4
 800910e:	f000 f84d 	bl	80091ac <_free_r>
 8009112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009114:	b111      	cbz	r1, 800911c <_reclaim_reent+0x40>
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f848 	bl	80091ac <_free_r>
 800911c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800911e:	b111      	cbz	r1, 8009126 <_reclaim_reent+0x4a>
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f843 	bl	80091ac <_free_r>
 8009126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009128:	b111      	cbz	r1, 8009130 <_reclaim_reent+0x54>
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f83e 	bl	80091ac <_free_r>
 8009130:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009132:	b111      	cbz	r1, 800913a <_reclaim_reent+0x5e>
 8009134:	4620      	mov	r0, r4
 8009136:	f000 f839 	bl	80091ac <_free_r>
 800913a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800913c:	b111      	cbz	r1, 8009144 <_reclaim_reent+0x68>
 800913e:	4620      	mov	r0, r4
 8009140:	f000 f834 	bl	80091ac <_free_r>
 8009144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009146:	b111      	cbz	r1, 800914e <_reclaim_reent+0x72>
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f82f 	bl	80091ac <_free_r>
 800914e:	69a3      	ldr	r3, [r4, #24]
 8009150:	b1e3      	cbz	r3, 800918c <_reclaim_reent+0xb0>
 8009152:	4620      	mov	r0, r4
 8009154:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009156:	4798      	blx	r3
 8009158:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800915a:	b1b9      	cbz	r1, 800918c <_reclaim_reent+0xb0>
 800915c:	4620      	mov	r0, r4
 800915e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009162:	f7ff bfad 	b.w	80090c0 <cleanup_glue>
 8009166:	5949      	ldr	r1, [r1, r5]
 8009168:	b941      	cbnz	r1, 800917c <_reclaim_reent+0xa0>
 800916a:	3504      	adds	r5, #4
 800916c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800916e:	2d80      	cmp	r5, #128	; 0x80
 8009170:	68d9      	ldr	r1, [r3, #12]
 8009172:	d1f8      	bne.n	8009166 <_reclaim_reent+0x8a>
 8009174:	4620      	mov	r0, r4
 8009176:	f000 f819 	bl	80091ac <_free_r>
 800917a:	e7ba      	b.n	80090f2 <_reclaim_reent+0x16>
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	4620      	mov	r0, r4
 8009180:	f000 f814 	bl	80091ac <_free_r>
 8009184:	4631      	mov	r1, r6
 8009186:	e7ef      	b.n	8009168 <_reclaim_reent+0x8c>
 8009188:	2500      	movs	r5, #0
 800918a:	e7ef      	b.n	800916c <_reclaim_reent+0x90>
 800918c:	bd70      	pop	{r4, r5, r6, pc}
 800918e:	bf00      	nop
 8009190:	200000c8 	.word	0x200000c8

08009194 <__malloc_lock>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__malloc_lock+0x8>)
 8009196:	f7ff bf7b 	b.w	8009090 <__retarget_lock_acquire_recursive>
 800919a:	bf00      	nop
 800919c:	200030c0 	.word	0x200030c0

080091a0 <__malloc_unlock>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__malloc_unlock+0x8>)
 80091a2:	f7ff bf76 	b.w	8009092 <__retarget_lock_release_recursive>
 80091a6:	bf00      	nop
 80091a8:	200030c0 	.word	0x200030c0

080091ac <_free_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4605      	mov	r5, r0
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d043      	beq.n	800923c <_free_r+0x90>
 80091b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b8:	1f0c      	subs	r4, r1, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfb8      	it	lt
 80091be:	18e4      	addlt	r4, r4, r3
 80091c0:	f7ff ffe8 	bl	8009194 <__malloc_lock>
 80091c4:	4a1e      	ldr	r2, [pc, #120]	; (8009240 <_free_r+0x94>)
 80091c6:	6813      	ldr	r3, [r2, #0]
 80091c8:	4610      	mov	r0, r2
 80091ca:	b933      	cbnz	r3, 80091da <_free_r+0x2e>
 80091cc:	6063      	str	r3, [r4, #4]
 80091ce:	6014      	str	r4, [r2, #0]
 80091d0:	4628      	mov	r0, r5
 80091d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d6:	f7ff bfe3 	b.w	80091a0 <__malloc_unlock>
 80091da:	42a3      	cmp	r3, r4
 80091dc:	d90a      	bls.n	80091f4 <_free_r+0x48>
 80091de:	6821      	ldr	r1, [r4, #0]
 80091e0:	1862      	adds	r2, r4, r1
 80091e2:	4293      	cmp	r3, r2
 80091e4:	bf01      	itttt	eq
 80091e6:	681a      	ldreq	r2, [r3, #0]
 80091e8:	685b      	ldreq	r3, [r3, #4]
 80091ea:	1852      	addeq	r2, r2, r1
 80091ec:	6022      	streq	r2, [r4, #0]
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	6004      	str	r4, [r0, #0]
 80091f2:	e7ed      	b.n	80091d0 <_free_r+0x24>
 80091f4:	461a      	mov	r2, r3
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	b10b      	cbz	r3, 80091fe <_free_r+0x52>
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	d9fa      	bls.n	80091f4 <_free_r+0x48>
 80091fe:	6811      	ldr	r1, [r2, #0]
 8009200:	1850      	adds	r0, r2, r1
 8009202:	42a0      	cmp	r0, r4
 8009204:	d10b      	bne.n	800921e <_free_r+0x72>
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	4401      	add	r1, r0
 800920a:	1850      	adds	r0, r2, r1
 800920c:	4283      	cmp	r3, r0
 800920e:	6011      	str	r1, [r2, #0]
 8009210:	d1de      	bne.n	80091d0 <_free_r+0x24>
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4401      	add	r1, r0
 8009218:	6011      	str	r1, [r2, #0]
 800921a:	6053      	str	r3, [r2, #4]
 800921c:	e7d8      	b.n	80091d0 <_free_r+0x24>
 800921e:	d902      	bls.n	8009226 <_free_r+0x7a>
 8009220:	230c      	movs	r3, #12
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	e7d4      	b.n	80091d0 <_free_r+0x24>
 8009226:	6820      	ldr	r0, [r4, #0]
 8009228:	1821      	adds	r1, r4, r0
 800922a:	428b      	cmp	r3, r1
 800922c:	bf01      	itttt	eq
 800922e:	6819      	ldreq	r1, [r3, #0]
 8009230:	685b      	ldreq	r3, [r3, #4]
 8009232:	1809      	addeq	r1, r1, r0
 8009234:	6021      	streq	r1, [r4, #0]
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	6054      	str	r4, [r2, #4]
 800923a:	e7c9      	b.n	80091d0 <_free_r+0x24>
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	20002314 	.word	0x20002314

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
