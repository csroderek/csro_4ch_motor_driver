
csro_4ch_motor_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009244  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b0  080096b0  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  080096b0  080096b0  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096b0  080096b0  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  080096b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f98  20000130  080097e4  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200030c8  080097e4  000230c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000254df  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005291  00000000  00000000  00045634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  0004a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  0004c078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bff4  00000000  00000000  0004d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec7d  00000000  00000000  000695cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c39  00000000  00000000  00088249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011de82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  0011ded8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000130 	.word	0x20000130
 800012c:	00000000 	.word	0x00000000
 8000130:	0800933c 	.word	0x0800933c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000134 	.word	0x20000134
 800014c:	0800933c 	.word	0x0800933c

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b18      	ldr	r3, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 ff87 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 ffa0 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 ff7f 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 ff98 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 ff77 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 ff90 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 ff6f 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 ff88 	bl	80010be <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 80001c0:	f000 fc76 	bl	8000ab0 <fnd_com_modbus_rtu_init>
  ee_init();
 80001c4:	f000 fce4 	bl	8000b90 <ee_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <MX_FREERTOS_Init+0x50>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4810      	ldr	r0, [pc, #64]	; (8000210 <MX_FREERTOS_Init+0x54>)
 80001ce:	f003 fb69 	bl	80038a4 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a0f      	ldr	r2, [pc, #60]	; (8000214 <MX_FREERTOS_Init+0x58>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <MX_FREERTOS_Init+0x5c>)
 80001da:	2100      	movs	r1, #0
 80001dc:	480f      	ldr	r0, [pc, #60]	; (800021c <MX_FREERTOS_Init+0x60>)
 80001de:	f003 fb61 	bl	80038a4 <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <MX_FREERTOS_Init+0x64>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <MX_FREERTOS_Init+0x68>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <MX_FREERTOS_Init+0x6c>)
 80001ee:	f003 fb59 	bl	80038a4 <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <MX_FREERTOS_Init+0x70>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <MX_FREERTOS_Init+0x74>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <MX_FREERTOS_Init+0x78>)
 80001fe:	f003 fb51 	bl	80038a4 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <MX_FREERTOS_Init+0x7c>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	0800939c 	.word	0x0800939c
 8000210:	0800023d 	.word	0x0800023d
 8000214:	20002320 	.word	0x20002320
 8000218:	080093c0 	.word	0x080093c0
 800021c:	0800024b 	.word	0x0800024b
 8000220:	20002318 	.word	0x20002318
 8000224:	080093e4 	.word	0x080093e4
 8000228:	08000259 	.word	0x08000259
 800022c:	20002324 	.word	0x20002324
 8000230:	08009408 	.word	0x08009408
 8000234:	08000285 	.word	0x08000285
 8000238:	2000231c 	.word	0x2000231c

0800023c <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 8000244:	f000 fc90 	bl	8000b68 <fnd_com_modbus_rtu_slave1_wait>
 8000248:	e7fc      	b.n	8000244 <StartTask01+0x8>

0800024a <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 8000252:	f000 fc93 	bl	8000b7c <fnd_com_modbus_rtu_slave2_wait>
 8000256:	e7fc      	b.n	8000252 <StartTask02+0x8>

08000258 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  motor_param_persist_initialize();
 8000260:	f008 f98a 	bl	8008578 <motor_param_persist_initialize>
  motor_function_initialize();
 8000264:	f008 f850 	bl	8008308 <motor_function_initialize>
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 8000268:	200a      	movs	r0, #10
 800026a:	f003 fbc5 	bl	80039f8 <osDelay>
    fnd_input_update_value();
 800026e:	f000 fd71 	bl	8000d54 <fnd_input_update_value>
    motor_function_step();
 8000272:	f007 fdfb 	bl	8007e6c <motor_function_step>
    fnd_output_update_value(relay);
 8000276:	4802      	ldr	r0, [pc, #8]	; (8000280 <StartTask03+0x28>)
 8000278:	f000 fdc0 	bl	8000dfc <fnd_output_update_value>
    osDelay(10);
 800027c:	e7f4      	b.n	8000268 <StartTask03+0x10>
 800027e:	bf00      	nop
 8000280:	20002f48 	.word	0x20002f48

08000284 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  uint8_t count = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for (;;)
  {
    osDelay(200);
 8000290:	20c8      	movs	r0, #200	; 0xc8
 8000292:	f003 fbb1 	bl	80039f8 <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 8000296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <StartTask04+0x44>)
 800029c:	f001 fd6f 	bl	8001d7e <HAL_GPIO_TogglePin>
    count = (count + 1) % 50;
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	3301      	adds	r3, #1
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <StartTask04+0x48>)
 80002a6:	fb82 1203 	smull	r1, r2, r2, r3
 80002aa:	1111      	asrs	r1, r2, #4
 80002ac:	17da      	asrs	r2, r3, #31
 80002ae:	1a8a      	subs	r2, r1, r2
 80002b0:	2132      	movs	r1, #50	; 0x32
 80002b2:	fb01 f202 	mul.w	r2, r1, r2
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	4613      	mov	r3, r2
 80002ba:	73fb      	strb	r3, [r7, #15]
    if (count == 0)
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1e6      	bne.n	8000290 <StartTask04+0xc>
    {
      motor_param_persist_step();
 80002c2:	f008 f8b3 	bl	800842c <motor_param_persist_step>
    osDelay(200);
 80002c6:	e7e3      	b.n	8000290 <StartTask04+0xc>
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	51eb851f 	.word	0x51eb851f

080002d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	; 0x28
 80002d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	4b59      	ldr	r3, [pc, #356]	; (800044c <MX_GPIO_Init+0x17c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a58      	ldr	r2, [pc, #352]	; (800044c <MX_GPIO_Init+0x17c>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b56      	ldr	r3, [pc, #344]	; (800044c <MX_GPIO_Init+0x17c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	613b      	str	r3, [r7, #16]
 80002fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	4b53      	ldr	r3, [pc, #332]	; (800044c <MX_GPIO_Init+0x17c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <MX_GPIO_Init+0x17c>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b50      	ldr	r3, [pc, #320]	; (800044c <MX_GPIO_Init+0x17c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0320 	and.w	r3, r3, #32
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	4b4d      	ldr	r3, [pc, #308]	; (800044c <MX_GPIO_Init+0x17c>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a4c      	ldr	r2, [pc, #304]	; (800044c <MX_GPIO_Init+0x17c>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b4a      	ldr	r3, [pc, #296]	; (800044c <MX_GPIO_Init+0x17c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0304 	and.w	r3, r3, #4
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032c:	4b47      	ldr	r3, [pc, #284]	; (800044c <MX_GPIO_Init+0x17c>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a46      	ldr	r2, [pc, #280]	; (800044c <MX_GPIO_Init+0x17c>)
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b44      	ldr	r3, [pc, #272]	; (800044c <MX_GPIO_Init+0x17c>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0308 	and.w	r3, r3, #8
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800034a:	4841      	ldr	r0, [pc, #260]	; (8000450 <MX_GPIO_Init+0x180>)
 800034c:	f001 fcff 	bl	8001d4e <HAL_GPIO_WritePin>
                          |RLY_05_Pin|RS485_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 8000350:	2200      	movs	r2, #0
 8000352:	f244 4107 	movw	r1, #17415	; 0x4407
 8000356:	483f      	ldr	r0, [pc, #252]	; (8000454 <MX_GPIO_Init+0x184>)
 8000358:	f001 fcf9 	bl	8001d4e <HAL_GPIO_WritePin>
                          |LED_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_02_Pin|BTN_01_Pin|KEY_04_Pin;
 800035c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	4619      	mov	r1, r3
 8000370:	4839      	ldr	r0, [pc, #228]	; (8000458 <MX_GPIO_Init+0x188>)
 8000372:	f001 fb51 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = KEY_03_Pin|KEY_02_Pin;
 8000376:	2303      	movs	r3, #3
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	4619      	mov	r1, r3
 8000388:	4834      	ldr	r0, [pc, #208]	; (800045c <MX_GPIO_Init+0x18c>)
 800038a:	f001 fb45 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_01_Pin|BTN_12_Pin|BTN_11_Pin|BTN_10_Pin;
 800038e:	f649 0301 	movw	r3, #38913	; 0x9801
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4619      	mov	r1, r3
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <MX_GPIO_Init+0x180>)
 80003a4:	f001 fb38 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 80003a8:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80003ac:	617b      	str	r3, [r7, #20]
                          |RLY_05_Pin|RS485_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	4619      	mov	r1, r3
 80003c0:	4823      	ldr	r0, [pc, #140]	; (8000450 <MX_GPIO_Init+0x180>)
 80003c2:	f001 fb29 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 80003c6:	f244 4307 	movw	r3, #17415	; 0x4407
 80003ca:	617b      	str	r3, [r7, #20]
                          |LED_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2302      	movs	r3, #2
 80003d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	4619      	mov	r1, r3
 80003de:	481d      	ldr	r0, [pc, #116]	; (8000454 <MX_GPIO_Init+0x184>)
 80003e0:	f001 fb1a 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SIG_Pin;
 80003e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ea:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_GPIO_Init+0x190>)
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_SIG_GPIO_Port, &GPIO_InitStruct);
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	4619      	mov	r1, r3
 80003f8:	4816      	ldr	r0, [pc, #88]	; (8000454 <MX_GPIO_Init+0x184>)
 80003fa:	f001 fb0d 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_09_Pin|BTN_08_Pin|BTN_07_Pin|BTN_06_Pin
 80003fe:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000402:	617b      	str	r3, [r7, #20]
                          |BTN_05_Pin|BTN_04_Pin|BTN_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	4810      	ldr	r0, [pc, #64]	; (8000454 <MX_GPIO_Init+0x184>)
 8000414:	f001 fb00 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x194>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
 8000426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <MX_GPIO_Init+0x194>)
 8000430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000432:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2105      	movs	r1, #5
 8000438:	2028      	movs	r0, #40	; 0x28
 800043a:	f000 fe24 	bl	8001086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043e:	2028      	movs	r0, #40	; 0x28
 8000440:	f000 fe3d 	bl	80010be <HAL_NVIC_EnableIRQ>

}
 8000444:	bf00      	nop
 8000446:	3728      	adds	r7, #40	; 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	40010c00 	.word	0x40010c00
 8000458:	40011000 	.word	0x40011000
 800045c:	40011400 	.word	0x40011400
 8000460:	10110000 	.word	0x10110000
 8000464:	40010000 	.word	0x40010000

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 fd24 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f80f 	bl	8000492 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f7ff ff2c 	bl	80002d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000478:	f7ff fe6a 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800047c:	f000 f960 	bl	8000740 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000480:	f000 f988 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000484:	f003 f9a8 	bl	80037d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000488:	f7ff fe98 	bl	80001bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800048c:	f003 f9d6 	bl	800383c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x28>

08000492 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b090      	sub	sp, #64	; 0x40
 8000496:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	2228      	movs	r2, #40	; 0x28
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f008 fe81 	bl	80091a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	2310      	movs	r3, #16
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	2302      	movs	r3, #2
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004c4:	2300      	movs	r3, #0
 80004c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004c8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fc8e 	bl	8001df4 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004de:	f000 f82b 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2302      	movs	r3, #2
 80004e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2102      	movs	r1, #2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 fef9 	bl	80022f4 <HAL_RCC_ClockConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000508:	f000 f816 	bl	8000538 <Error_Handler>
  }
}
 800050c:	bf00      	nop
 800050e:	3740      	adds	r7, #64	; 0x40
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000526:	f000 fcdd 	bl	8000ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40000800 	.word	0x40000800

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>
	...

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 fd80 	bl	8001086 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	201e      	movs	r0, #30
 80005ca:	f000 fd5c 	bl	8001086 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005ce:	201e      	movs	r0, #30
 80005d0:	f000 fd75 	bl	80010be <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <HAL_InitTick+0xa0>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <HAL_InitTick+0xa0>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_InitTick+0xa0>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005ec:	f107 0210 	add.w	r2, r7, #16
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fff8 	bl	80025ec <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005fc:	f001 ffce 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8000600:	4603      	mov	r3, r0
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_InitTick+0xa4>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	0c9b      	lsrs	r3, r3, #18
 8000610:	3b01      	subs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_InitTick+0xa8>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <HAL_InitTick+0xac>)
 8000618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_InitTick+0xa8>)
 800061c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000620:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_InitTick+0xa8>)
 8000624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000626:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_InitTick+0xa8>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_InitTick+0xa8>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <HAL_InitTick+0xa8>)
 8000636:	f002 f827 	bl	8002688 <HAL_TIM_Base_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d104      	bne.n	800064a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <HAL_InitTick+0xa8>)
 8000642:	f002 f879 	bl	8002738 <HAL_TIM_Base_Start_IT>
 8000646:	4603      	mov	r3, r0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3730      	adds	r7, #48	; 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	20002328 	.word	0x20002328
 8000660:	40000800 	.word	0x40000800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <DMA1_Channel4_IRQHandler+0x10>)
 8000696:	f000 fe8b 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200023b4 	.word	0x200023b4

080006a4 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <DMA1_Channel5_IRQHandler+0x10>)
 80006aa:	f000 fe81 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200023f8 	.word	0x200023f8

080006b8 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <DMA1_Channel6_IRQHandler+0x10>)
 80006be:	f000 fe77 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20002370 	.word	0x20002370

080006cc <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <DMA1_Channel7_IRQHandler+0x10>)
 80006d2:	f000 fe6d 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000243c 	.word	0x2000243c

080006e0 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <TIM4_IRQHandler+0x10>)
 80006e6:	f002 f879 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20002328 	.word	0x20002328

080006f4 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <USART1_IRQHandler+0x14>)
 80006fa:	f000 f9f3 	bl	8000ae4 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <USART1_IRQHandler+0x14>)
 8000700:	f002 fb52 	bl	8002da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20002480 	.word	0x20002480

0800070c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <USART2_IRQHandler+0x14>)
 8000712:	f000 f9e7 	bl	8000ae4 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <USART2_IRQHandler+0x14>)
 8000718:	f002 fb46 	bl	8002da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200024c4 	.word	0x200024c4

08000724 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SIG_Pin);
 8000728:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800072c:	f001 fb40 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART1_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800074c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000778:	f002 f9d0 	bl	8002b1c <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f7ff fed9 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20002480 	.word	0x20002480
 8000790:	40013800 	.word	0x40013800

08000794 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f002 f9a6 	bl	8002b1c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f7ff feaf 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200024c4 	.word	0x200024c4
 80007e4:	40004400 	.word	0x40004400

080007e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a8c      	ldr	r2, [pc, #560]	; (8000a34 <HAL_UART_MspInit+0x24c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	f040 8087 	bne.w	8000918 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800080a:	4b8b      	ldr	r3, [pc, #556]	; (8000a38 <HAL_UART_MspInit+0x250>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a8a      	ldr	r2, [pc, #552]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b88      	ldr	r3, [pc, #544]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b85      	ldr	r3, [pc, #532]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a84      	ldr	r2, [pc, #528]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b82      	ldr	r3, [pc, #520]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX1_Pin;
 800083a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	4619      	mov	r1, r3
 800084e:	487b      	ldr	r0, [pc, #492]	; (8000a3c <HAL_UART_MspInit+0x254>)
 8000850:	f001 f8e2 	bl	8001a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX1_Pin;
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	4619      	mov	r1, r3
 8000868:	4874      	ldr	r0, [pc, #464]	; (8000a3c <HAL_UART_MspInit+0x254>)
 800086a:	f001 f8d5 	bl	8001a18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <HAL_UART_MspInit+0x258>)
 8000870:	4a74      	ldr	r2, [pc, #464]	; (8000a44 <HAL_UART_MspInit+0x25c>)
 8000872:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000874:	4b72      	ldr	r3, [pc, #456]	; (8000a40 <HAL_UART_MspInit+0x258>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087a:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <HAL_UART_MspInit+0x258>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000880:	4b6f      	ldr	r3, [pc, #444]	; (8000a40 <HAL_UART_MspInit+0x258>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000886:	4b6e      	ldr	r3, [pc, #440]	; (8000a40 <HAL_UART_MspInit+0x258>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088c:	4b6c      	ldr	r3, [pc, #432]	; (8000a40 <HAL_UART_MspInit+0x258>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000892:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <HAL_UART_MspInit+0x258>)
 8000894:	2220      	movs	r2, #32
 8000896:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <HAL_UART_MspInit+0x258>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800089e:	4868      	ldr	r0, [pc, #416]	; (8000a40 <HAL_UART_MspInit+0x258>)
 80008a0:	f000 fc1c 	bl	80010dc <HAL_DMA_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008aa:	f7ff fe45 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a63      	ldr	r2, [pc, #396]	; (8000a40 <HAL_UART_MspInit+0x258>)
 80008b2:	639a      	str	r2, [r3, #56]	; 0x38
 80008b4:	4a62      	ldr	r2, [pc, #392]	; (8000a40 <HAL_UART_MspInit+0x258>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008ba:	4b63      	ldr	r3, [pc, #396]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008bc:	4a63      	ldr	r2, [pc, #396]	; (8000a4c <HAL_UART_MspInit+0x264>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c0:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008c2:	2210      	movs	r2, #16
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c6:	4b60      	ldr	r3, [pc, #384]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008cc:	4b5e      	ldr	r3, [pc, #376]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d2:	4b5d      	ldr	r3, [pc, #372]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d8:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e4:	4b58      	ldr	r3, [pc, #352]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008ea:	4857      	ldr	r0, [pc, #348]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008ec:	f000 fbf6 	bl	80010dc <HAL_DMA_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008f6:	f7ff fe1f 	bl	8000538 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a52      	ldr	r2, [pc, #328]	; (8000a48 <HAL_UART_MspInit+0x260>)
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000900:	4a51      	ldr	r2, [pc, #324]	; (8000a48 <HAL_UART_MspInit+0x260>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	2025      	movs	r0, #37	; 0x25
 800090c:	f000 fbbb 	bl	8001086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000910:	2025      	movs	r0, #37	; 0x25
 8000912:	f000 fbd4 	bl	80010be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000916:	e089      	b.n	8000a2c <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a4c      	ldr	r2, [pc, #304]	; (8000a50 <HAL_UART_MspInit+0x268>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f040 8084 	bne.w	8000a2c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000924:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a43      	ldr	r2, [pc, #268]	; (8000a38 <HAL_UART_MspInit+0x250>)
 800092a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092e:	61d3      	str	r3, [r2, #28]
 8000930:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <HAL_UART_MspInit+0x250>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a3d      	ldr	r2, [pc, #244]	; (8000a38 <HAL_UART_MspInit+0x250>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <HAL_UART_MspInit+0x250>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX2_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX2_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4619      	mov	r1, r3
 8000966:	4835      	ldr	r0, [pc, #212]	; (8000a3c <HAL_UART_MspInit+0x254>)
 8000968:	f001 f856 	bl	8001a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX2_Pin;
 800096c:	2308      	movs	r3, #8
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	4619      	mov	r1, r3
 800097e:	482f      	ldr	r0, [pc, #188]	; (8000a3c <HAL_UART_MspInit+0x254>)
 8000980:	f001 f84a 	bl	8001a18 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <HAL_UART_MspInit+0x270>)
 8000988:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 80009aa:	2220      	movs	r2, #32
 80009ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009b4:	4827      	ldr	r0, [pc, #156]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 80009b6:	f000 fb91 	bl	80010dc <HAL_DMA_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80009c0:	f7ff fdba 	bl	8000538 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_UART_MspInit+0x26c>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <HAL_UART_MspInit+0x278>)
 80009d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009d8:	2210      	movs	r2, #16
 80009da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x274>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0x274>)
 8000a02:	f000 fb6b 	bl	80010dc <HAL_DMA_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a0c:	f7ff fd94 	bl	8000538 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_UART_MspInit+0x274>)
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x274>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2105      	movs	r1, #5
 8000a20:	2026      	movs	r0, #38	; 0x26
 8000a22:	f000 fb30 	bl	8001086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a26:	2026      	movs	r0, #38	; 0x26
 8000a28:	f000 fb49 	bl	80010be <HAL_NVIC_EnableIRQ>
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013800 	.word	0x40013800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	200023f8 	.word	0x200023f8
 8000a44:	40020058 	.word	0x40020058
 8000a48:	200023b4 	.word	0x200023b4
 8000a4c:	40020044 	.word	0x40020044
 8000a50:	40004400 	.word	0x40004400
 8000a54:	20002370 	.word	0x20002370
 8000a58:	4002006c 	.word	0x4002006c
 8000a5c:	2000243c 	.word	0x2000243c
 8000a60:	40020080 	.word	0x40020080

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8a:	f7ff fe53 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f008 fb57 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fce9 	bl	8000468 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000aa0:	080096b8 	.word	0x080096b8
  ldr r2, =_sbss
 8000aa4:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000aa8:	200030c8 	.word	0x200030c8

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <fnd_com_modbus_rtu_init>:
modbus_regs sys_regs;
modbus_slave slaves[2];
int16_t relay[8];

void fnd_com_modbus_rtu_init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    slave_init(&slaves[0], &port[0], 1, &sys_regs);
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <fnd_com_modbus_rtu_init+0x20>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <fnd_com_modbus_rtu_init+0x24>)
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <fnd_com_modbus_rtu_init+0x28>)
 8000abc:	f007 f90a 	bl	8007cd4 <slave_init>
    slave_init(&slaves[1], &port[1], 2, &sys_regs);
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <fnd_com_modbus_rtu_init+0x20>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4905      	ldr	r1, [pc, #20]	; (8000adc <fnd_com_modbus_rtu_init+0x2c>)
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <fnd_com_modbus_rtu_init+0x30>)
 8000ac8:	f007 f904 	bl	8007cd4 <slave_init>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20002948 	.word	0x20002948
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20002508 	.word	0x20002508
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	20002728 	.word	0x20002728

08000ae4 <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <fnd_com_modbus_rtu_uart_idle_irq+0x38>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d103      	bne.n	8000b00 <fnd_com_modbus_rtu_uart_idle_irq+0x1c>
    {
        slave_uart_idle(&slaves[0]);
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <fnd_com_modbus_rtu_uart_idle_irq+0x38>)
 8000afa:	f007 f923 	bl	8007d44 <slave_uart_idle>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_uart_idle(&slaves[1]);
    }
}
 8000afe:	e009      	b.n	8000b14 <fnd_com_modbus_rtu_uart_idle_irq+0x30>
    else if (huart == slaves[1].uart_port->uart)
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <fnd_com_modbus_rtu_uart_idle_irq+0x38>)
 8000b02:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d102      	bne.n	8000b14 <fnd_com_modbus_rtu_uart_idle_irq+0x30>
        slave_uart_idle(&slaves[1]);
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <fnd_com_modbus_rtu_uart_idle_irq+0x3c>)
 8000b10:	f007 f918 	bl	8007d44 <slave_uart_idle>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20002508 	.word	0x20002508
 8000b20:	20002728 	.word	0x20002728

08000b24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_UART_TxCpltCallback+0x3c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d104      	bne.n	8000b42 <HAL_UART_TxCpltCallback+0x1e>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <HAL_UART_TxCpltCallback+0x3c>)
 8000b3c:	f007 f942 	bl	8007dc4 <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 8000b40:	e00a      	b.n	8000b58 <HAL_UART_TxCpltCallback+0x34>
    else if (huart == slaves[1].uart_port->uart)
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_UART_TxCpltCallback+0x3c>)
 8000b44:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d103      	bne.n	8000b58 <HAL_UART_TxCpltCallback+0x34>
        slave_set_tx_rx(&slaves[1], rx);
 8000b50:	2100      	movs	r1, #0
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <HAL_UART_TxCpltCallback+0x40>)
 8000b54:	f007 f936 	bl	8007dc4 <slave_set_tx_rx>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20002508 	.word	0x20002508
 8000b64:	20002728 	.word	0x20002728

08000b68 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8000b6e:	f007 f942 	bl	8007df6 <slave_wait_request>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20002508 	.word	0x20002508

08000b7c <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <fnd_com_modbus_rtu_slave2_wait+0x10>)
 8000b82:	f007 f938 	bl	8007df6 <slave_wait_request>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20002728 	.word	0x20002728

08000b90 <ee_init>:
#define _EE_PAGE_OR_SECTOR PAGE

uint8_t ee_ram[_EE_USE_RAM_BYTE];

bool ee_init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2180      	movs	r1, #128	; 0x80
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f83d 	bl	8000c18 <ee_read>
 8000b9e:	4603      	mov	r3, r0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <ee_format>:

bool ee_format(bool keepRamData)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
    uint32_t error;
    HAL_FLASH_Unlock();
 8000bae:	f000 fda3 	bl	80016f8 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef flashErase;

    flashErase.NbPages = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
    flashErase.PageAddress = _EE_ADDR_INUSE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <ee_format+0x6c>)
 8000bb8:	617b      	str	r3, [r7, #20]
    flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
    flashErase.Banks = _EE_FLASH_BANK;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
    if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8000bc2:	f107 021c 	add.w	r2, r7, #28
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fe7b 	bl	80018c8 <HAL_FLASHEx_Erase>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d114      	bne.n	8000c02 <ee_format+0x5e>
    {
        HAL_FLASH_Lock();
 8000bd8:	f000 fdb4 	bl	8001744 <HAL_FLASH_Lock>
        if (error != 0xFFFFFFFF)
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d001      	beq.n	8000be8 <ee_format+0x44>
            return false;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e00f      	b.n	8000c08 <ee_format+0x64>
        else
        {
            if (keepRamData == false)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <ee_format+0x5a>
            {
                memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	21ff      	movs	r1, #255	; 0xff
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <ee_format+0x70>)
 8000bfa:	f008 fad5 	bl	80091a8 <memset>
            }
            return true;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e002      	b.n	8000c08 <ee_format+0x64>
        }
    }
    HAL_FLASH_Lock();
 8000c02:	f000 fd9f 	bl	8001744 <HAL_FLASH_Lock>
    return false;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	0800f000 	.word	0x0800f000
 8000c14:	20002f58 	.word	0x20002f58

08000c18 <ee_read>:

bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
    if ((startVirtualAddress + len) > _EE_SIZE)
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	4413      	add	r3, r2
 8000c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2e:	d901      	bls.n	8000c34 <ee_read+0x1c>
    {
        return false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e02a      	b.n	8000c8a <ee_read+0x72>
    }
    for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e020      	b.n	8000c7c <ee_read+0x64>
    {
        if (data != NULL)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00b      	beq.n	8000c58 <ee_read+0x40>
        {
            *data = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c46:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	701a      	strb	r2, [r3, #0]
            data++;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3301      	adds	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
        }
        if (i < _EE_USE_RAM_BYTE)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5c:	d80b      	bhi.n	8000c76 <ee_read+0x5e>
            ee_ram[i] = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000c64:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2d9      	uxtb	r1, r3
 8000c6c:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <ee_read+0x7c>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	4413      	add	r3, r2
 8000c72:	460a      	mov	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3d8      	bcc.n	8000c3a <ee_read+0x22>
    }
    return true;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20002f58 	.word	0x20002f58

08000c98 <ee_write>:

bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
    if ((startVirtualAddress + len) > _EE_SIZE)
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	4413      	add	r3, r2
 8000caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cae:	d901      	bls.n	8000cb4 <ee_write+0x1c>
    {
        return false;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e033      	b.n	8000d1c <ee_write+0x84>
    }
    if (data == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <ee_write+0x26>
    {
        return false;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e02e      	b.n	8000d1c <ee_write+0x84>
    }
    HAL_FLASH_Unlock();
 8000cbe:	f000 fd1b 	bl	80016f8 <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < len; i += 2)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e022      	b.n	8000d0e <ee_write+0x76>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i + 1] << 8))) != HAL_OK)
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000cd2:	f501 4170 	add.w	r1, r1, #61440	; 0xf000
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	4303      	orrs	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 fc8f 	bl	8001618 <HAL_FLASH_Program>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <ee_write+0x70>
        {
            HAL_FLASH_Lock();
 8000d00:	f000 fd20 	bl	8001744 <HAL_FLASH_Lock>
            return false;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e009      	b.n	8000d1c <ee_write+0x84>
    for (uint32_t i = 0; i < len; i += 2)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3d8      	bcc.n	8000cc8 <ee_write+0x30>
        }
    }
    HAL_FLASH_Lock();
 8000d16:	f000 fd15 	bl	8001744 <HAL_FLASH_Lock>
    return true;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <ee_commit>:
    memcpy(&ee_ram[startVirtualAddress], data, len);
    return true;
}

bool ee_commit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    if (ee_format(true) == false)
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ff3b 	bl	8000ba4 <ee_format>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <ee_commit+0x1a>
    {
        return false;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e005      	b.n	8000d4a <ee_commit+0x26>
    }
    return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <ee_commit+0x2c>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ffa8 	bl	8000c98 <ee_write>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20002f58 	.word	0x20002f58

08000d54 <fnd_input_update_value>:
#include "fnd_input.h"
#include "fnd_com.h"

void fnd_input_update_value(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
    uint8_t btn_values[12];
    fnd_input_gpio_read_btns(btn_values);
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f81f 	bl	8000da0 <fnd_input_gpio_read_btns>

    for (uint8_t i = 0; i < (INPUT_BTN_END - INPUT_BTN_START + 1); i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e010      	b.n	8000d8a <fnd_input_update_value+0x36>
    {
        sys_regs.inputs[INPUT_BTN_START + i] = btn_values[i];
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	f107 0210 	add.w	r2, r7, #16
 8000d6e:	4413      	add	r3, r2
 8000d70:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	3364      	adds	r3, #100	; 0x64
 8000d78:	b211      	sxth	r1, r2
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <fnd_input_update_value+0x48>)
 8000d7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (INPUT_BTN_END - INPUT_BTN_START + 1); i++)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	3301      	adds	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d9eb      	bls.n	8000d68 <fnd_input_update_value+0x14>
    }
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20002948 	.word	0x20002948

08000da0 <fnd_input_gpio_read_btns>:
        values[i] = (HAL_GPIO_ReadPin(key_port[i], key_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
    }
}

void fnd_input_gpio_read_btns(uint8_t *values)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 12; i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e019      	b.n	8000de2 <fnd_input_gpio_read_btns+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(btn_port[i], btn_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <fnd_input_gpio_read_btns+0x54>)
 8000db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	490f      	ldr	r1, [pc, #60]	; (8000df8 <fnd_input_gpio_read_btns+0x58>)
 8000dba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	f000 ffad 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	460a      	mov	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 12; i++)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	3301      	adds	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	2b0b      	cmp	r3, #11
 8000de6:	d9e2      	bls.n	8000dae <fnd_input_gpio_read_btns+0xe>
    }
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000001c 	.word	0x2000001c
 8000df8:	2000004c 	.word	0x2000004c

08000dfc <fnd_output_update_value>:
#include "fnd_output.h"
#include "fnd_com.h"

void fnd_output_update_value(int16_t *values)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    uint8_t relay_out_values[8];
    for (uint8_t i = 0; i < (INPUT_RLY_CTRL_END - INPUT_RLY_CTRL_START + 1); i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	75fb      	strb	r3, [r7, #23]
 8000e08:	e01d      	b.n	8000e46 <fnd_output_update_value+0x4a>
    {
        sys_regs.inputs[INPUT_RLY_CTRL_START + i] = values[i];
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	441a      	add	r2, r3
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	3396      	adds	r3, #150	; 0x96
 8000e16:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <fnd_output_update_value+0x64>)
 8000e1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        relay_out_values[i] = (uint8_t)sys_regs.inputs[INPUT_RLY_CTRL_START + i];
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	3396      	adds	r3, #150	; 0x96
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <fnd_output_update_value+0x64>)
 8000e2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e2e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	f107 0118 	add.w	r1, r7, #24
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < (INPUT_RLY_CTRL_END - INPUT_RLY_CTRL_START + 1); i++)
 8000e40:	7dfb      	ldrb	r3, [r7, #23]
 8000e42:	3301      	adds	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	d9de      	bls.n	8000e0a <fnd_output_update_value+0xe>
    }
    fnd_output_gpio_write_relays(relay_out_values);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f807 	bl	8000e64 <fnd_output_gpio_write_relays>
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20002948 	.word	0x20002948

08000e64 <fnd_output_gpio_write_relays>:

GPIO_TypeDef *relay_port[8] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port, RLY_07_GPIO_Port, RLY_08_GPIO_Port};
uint16_t relay_pin[8] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin, RLY_07_Pin, RLY_08_Pin};

void fnd_output_gpio_write_relays(uint8_t *values)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e016      	b.n	8000ea0 <fnd_output_gpio_write_relays+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <fnd_output_gpio_write_relays+0x4c>)
 8000e76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <fnd_output_gpio_write_relays+0x50>)
 8000e7e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf14      	ite	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	2300      	moveq	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	f000 ff5a 	bl	8001d4e <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d9e5      	bls.n	8000e72 <fnd_output_gpio_write_relays+0xe>
    }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000064 	.word	0x20000064
 8000eb4:	20000084 	.word	0x20000084

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f8d1 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f7ff fb70 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fb36 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000098 	.word	0x20000098
 8000f04:	20002fd8 	.word	0x20002fd8

08000f08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20002fd8 	.word	0x20002fd8

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <__NVIC_EnableIRQ+0x34>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff4f 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff64 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ffb2 	bl	800100c <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff81 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff57 	bl	8000f80 <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e043      	b.n	800117a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_DMA_Init+0xa8>)
 80010fa:	4413      	add	r3, r2
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <HAL_DMA_Init+0xac>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	009a      	lsls	r2, r3, #2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_DMA_Init+0xb0>)
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001126:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800112a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	bffdfff8 	.word	0xbffdfff8
 8001188:	cccccccd 	.word	0xcccccccd
 800118c:	40020000 	.word	0x40020000

08001190 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_DMA_Start_IT+0x20>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e04a      	b.n	8001246 <HAL_DMA_Start_IT+0xb6>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d13a      	bne.n	8001238 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2202      	movs	r2, #2
 80011c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f9e8 	bl	80015bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 020e 	orr.w	r2, r2, #14
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e00f      	b.n	8001226 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0204 	bic.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 020a 	orr.w	r2, r2, #10
 8001224:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0201 	orr.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e005      	b.n	8001244 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001240:	2302      	movs	r3, #2
 8001242:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001244:	7dfb      	ldrb	r3, [r7, #23]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001260:	2b02      	cmp	r3, #2
 8001262:	d008      	beq.n	8001276 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2204      	movs	r2, #4
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e020      	b.n	80012b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020e 	bic.w	r2, r2, #14
 8001284:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d005      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2204      	movs	r2, #4
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e051      	b.n	800138a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020e 	bic.w	r2, r2, #14
 80012f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <HAL_DMA_Abort_IT+0xd0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d029      	beq.n	8001364 <HAL_DMA_Abort_IT+0xa0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <HAL_DMA_Abort_IT+0xd4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d022      	beq.n	8001360 <HAL_DMA_Abort_IT+0x9c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_DMA_Abort_IT+0xd8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d01a      	beq.n	800135a <HAL_DMA_Abort_IT+0x96>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_DMA_Abort_IT+0xdc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d012      	beq.n	8001354 <HAL_DMA_Abort_IT+0x90>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <HAL_DMA_Abort_IT+0xe0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00a      	beq.n	800134e <HAL_DMA_Abort_IT+0x8a>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_DMA_Abort_IT+0xe4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d102      	bne.n	8001348 <HAL_DMA_Abort_IT+0x84>
 8001342:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001346:	e00e      	b.n	8001366 <HAL_DMA_Abort_IT+0xa2>
 8001348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800134c:	e00b      	b.n	8001366 <HAL_DMA_Abort_IT+0xa2>
 800134e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001352:	e008      	b.n	8001366 <HAL_DMA_Abort_IT+0xa2>
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	e005      	b.n	8001366 <HAL_DMA_Abort_IT+0xa2>
 800135a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135e:	e002      	b.n	8001366 <HAL_DMA_Abort_IT+0xa2>
 8001360:	2310      	movs	r3, #16
 8001362:	e000      	b.n	8001366 <HAL_DMA_Abort_IT+0xa2>
 8001364:	2301      	movs	r3, #1
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_DMA_Abort_IT+0xe8>)
 8001368:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
    } 
  }
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020008 	.word	0x40020008
 8001398:	4002001c 	.word	0x4002001c
 800139c:	40020030 	.word	0x40020030
 80013a0:	40020044 	.word	0x40020044
 80013a4:	40020058 	.word	0x40020058
 80013a8:	4002006c 	.word	0x4002006c
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2204      	movs	r2, #4
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d04f      	beq.n	8001478 <HAL_DMA_IRQHandler+0xc8>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d04a      	beq.n	8001478 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a66      	ldr	r2, [pc, #408]	; (80015a0 <HAL_DMA_IRQHandler+0x1f0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d029      	beq.n	800145e <HAL_DMA_IRQHandler+0xae>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_DMA_IRQHandler+0x1f4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <HAL_DMA_IRQHandler+0xaa>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_DMA_IRQHandler+0x1f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01a      	beq.n	8001454 <HAL_DMA_IRQHandler+0xa4>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a62      	ldr	r2, [pc, #392]	; (80015ac <HAL_DMA_IRQHandler+0x1fc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d012      	beq.n	800144e <HAL_DMA_IRQHandler+0x9e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a60      	ldr	r2, [pc, #384]	; (80015b0 <HAL_DMA_IRQHandler+0x200>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00a      	beq.n	8001448 <HAL_DMA_IRQHandler+0x98>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <HAL_DMA_IRQHandler+0x204>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d102      	bne.n	8001442 <HAL_DMA_IRQHandler+0x92>
 800143c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001440:	e00e      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 8001442:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001446:	e00b      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 8001448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800144c:	e008      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 800144e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001452:	e005      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 8001454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001458:	e002      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	e000      	b.n	8001460 <HAL_DMA_IRQHandler+0xb0>
 800145e:	2304      	movs	r3, #4
 8001460:	4a55      	ldr	r2, [pc, #340]	; (80015b8 <HAL_DMA_IRQHandler+0x208>)
 8001462:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8094 	beq.w	8001596 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001476:	e08e      	b.n	8001596 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	2202      	movs	r2, #2
 800147e:	409a      	lsls	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d056      	beq.n	8001536 <HAL_DMA_IRQHandler+0x186>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d051      	beq.n	8001536 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10b      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 020a 	bic.w	r2, r2, #10
 80014ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_DMA_IRQHandler+0x1f0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d029      	beq.n	8001516 <HAL_DMA_IRQHandler+0x166>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_DMA_IRQHandler+0x1f4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d022      	beq.n	8001512 <HAL_DMA_IRQHandler+0x162>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <HAL_DMA_IRQHandler+0x1f8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01a      	beq.n	800150c <HAL_DMA_IRQHandler+0x15c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a34      	ldr	r2, [pc, #208]	; (80015ac <HAL_DMA_IRQHandler+0x1fc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d012      	beq.n	8001506 <HAL_DMA_IRQHandler+0x156>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_DMA_IRQHandler+0x200>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00a      	beq.n	8001500 <HAL_DMA_IRQHandler+0x150>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_DMA_IRQHandler+0x204>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d102      	bne.n	80014fa <HAL_DMA_IRQHandler+0x14a>
 80014f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 80014fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014fe:	e00b      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001504:	e008      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150a:	e005      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 800150c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001510:	e002      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001512:	2320      	movs	r3, #32
 8001514:	e000      	b.n	8001518 <HAL_DMA_IRQHandler+0x168>
 8001516:	2302      	movs	r3, #2
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_DMA_IRQHandler+0x208>)
 800151a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	d034      	beq.n	8001596 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001534:	e02f      	b.n	8001596 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2208      	movs	r2, #8
 800153c:	409a      	lsls	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d028      	beq.n	8001598 <HAL_DMA_IRQHandler+0x1e8>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 020e 	bic.w	r2, r2, #14
 800155e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f202 	lsl.w	r2, r1, r2
 800156e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
    }
  }
  return;
 8001596:	bf00      	nop
 8001598:	bf00      	nop
}
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020008 	.word	0x40020008
 80015a4:	4002001c 	.word	0x4002001c
 80015a8:	40020030 	.word	0x40020030
 80015ac:	40020044 	.word	0x40020044
 80015b0:	40020058 	.word	0x40020058
 80015b4:	4002006c 	.word	0x4002006c
 80015b8:	40020000 	.word	0x40020000

080015bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d108      	bne.n	80015fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015fa:	e007      	b.n	800160c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	60da      	str	r2, [r3, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_FLASH_Program+0xd8>)
 8001634:	7e1b      	ldrb	r3, [r3, #24]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_FLASH_Program+0x26>
 800163a:	2302      	movs	r3, #2
 800163c:	e054      	b.n	80016e8 <HAL_FLASH_Program+0xd0>
 800163e:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <HAL_FLASH_Program+0xd8>)
 8001640:	2201      	movs	r2, #1
 8001642:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001648:	f000 f8a8 	bl	800179c <FLASH_WaitForLastOperation>
 800164c:	4603      	mov	r3, r0
 800164e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d144      	bne.n	80016e0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d102      	bne.n	8001662 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800165c:	2301      	movs	r3, #1
 800165e:	757b      	strb	r3, [r7, #21]
 8001660:	e007      	b.n	8001672 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d102      	bne.n	800166e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001668:	2302      	movs	r3, #2
 800166a:	757b      	strb	r3, [r7, #21]
 800166c:	e001      	b.n	8001672 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800166e:	2304      	movs	r3, #4
 8001670:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001672:	2300      	movs	r3, #0
 8001674:	75bb      	strb	r3, [r7, #22]
 8001676:	e02d      	b.n	80016d4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001678:	7dbb      	ldrb	r3, [r7, #22]
 800167a:	005a      	lsls	r2, r3, #1
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	eb02 0c03 	add.w	ip, r2, r3
 8001682:	7dbb      	ldrb	r3, [r7, #22]
 8001684:	0119      	lsls	r1, r3, #4
 8001686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800168a:	f1c1 0620 	rsb	r6, r1, #32
 800168e:	f1a1 0020 	sub.w	r0, r1, #32
 8001692:	fa22 f401 	lsr.w	r4, r2, r1
 8001696:	fa03 f606 	lsl.w	r6, r3, r6
 800169a:	4334      	orrs	r4, r6
 800169c:	fa23 f000 	lsr.w	r0, r3, r0
 80016a0:	4304      	orrs	r4, r0
 80016a2:	fa23 f501 	lsr.w	r5, r3, r1
 80016a6:	b2a3      	uxth	r3, r4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4660      	mov	r0, ip
 80016ac:	f000 f85a 	bl	8001764 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016b4:	f000 f872 	bl	800179c <FLASH_WaitForLastOperation>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_FLASH_Program+0xdc>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_FLASH_Program+0xdc>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d107      	bne.n	80016de <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	3301      	adds	r3, #1
 80016d2:	75bb      	strb	r3, [r7, #22]
 80016d4:	7dba      	ldrb	r2, [r7, #22]
 80016d6:	7d7b      	ldrb	r3, [r7, #21]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3cd      	bcc.n	8001678 <HAL_FLASH_Program+0x60>
 80016dc:	e000      	b.n	80016e0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80016de:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_FLASH_Program+0xd8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	761a      	strb	r2, [r3, #24]

  return status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f0:	20002fe0 	.word	0x20002fe0
 80016f4:	40022000 	.word	0x40022000

080016f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_FLASH_Unlock+0x40>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00d      	beq.n	800172a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_FLASH_Unlock+0x40>)
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_FLASH_Unlock+0x44>)
 8001712:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_FLASH_Unlock+0x40>)
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_FLASH_Unlock+0x48>)
 8001718:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_FLASH_Unlock+0x40>)
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800172a:	79fb      	ldrb	r3, [r7, #7]
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000
 800173c:	45670123 	.word	0x45670123
 8001740:	cdef89ab 	.word	0xcdef89ab

08001744 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_FLASH_Lock+0x1c>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_FLASH_Lock+0x1c>)
 800174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001752:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40022000 	.word	0x40022000

08001764 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <FLASH_Program_HalfWord+0x30>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <FLASH_Program_HalfWord+0x34>)
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <FLASH_Program_HalfWord+0x34>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	887a      	ldrh	r2, [r7, #2]
 8001786:	801a      	strh	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20002fe0 	.word	0x20002fe0
 8001798:	40022000 	.word	0x40022000

0800179c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff fbb0 	bl	8000f08 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017aa:	e010      	b.n	80017ce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b2:	d00c      	beq.n	80017ce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <FLASH_WaitForLastOperation+0x2e>
 80017ba:	f7ff fba5 	bl	8000f08 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d201      	bcs.n	80017ce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e025      	b.n	800181a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <FLASH_WaitForLastOperation+0x88>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e8      	bne.n	80017ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <FLASH_WaitForLastOperation+0x88>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <FLASH_WaitForLastOperation+0x88>)
 80017e8:	2220      	movs	r2, #32
 80017ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <FLASH_WaitForLastOperation+0x88>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <FLASH_WaitForLastOperation+0x88>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <FLASH_WaitForLastOperation+0x88>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001810:	f000 f80a 	bl	8001828 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <FLASH_SetErrorCode+0x9c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <FLASH_SetErrorCode+0x9c>)
 8001848:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <FLASH_SetErrorCode+0x9c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <FLASH_SetErrorCode+0x9c>)
 8001868:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <FLASH_SetErrorCode+0x9c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <FLASH_SetErrorCode+0x9c>)
 8001888:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f240 1201 	movw	r2, #257	; 0x101
 800189c:	4293      	cmp	r3, r2
 800189e:	d106      	bne.n	80018ae <FLASH_SetErrorCode+0x86>
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	61d3      	str	r3, [r2, #28]
}  
 80018ac:	e002      	b.n	80018b4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <FLASH_SetErrorCode+0x98>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60d3      	str	r3, [r2, #12]
}  
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000
 80018c4:	20002fe0 	.word	0x20002fe0

080018c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_FLASHEx_Erase+0xd0>)
 80018dc:	7e1b      	ldrb	r3, [r3, #24]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_FLASHEx_Erase+0x1e>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e053      	b.n	800198e <HAL_FLASHEx_Erase+0xc6>
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_FLASHEx_Erase+0xd0>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d116      	bne.n	8001922 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018f8:	f7ff ff50 	bl	800179c <FLASH_WaitForLastOperation>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d141      	bne.n	8001986 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 f84c 	bl	80019a0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001908:	f24c 3050 	movw	r0, #50000	; 0xc350
 800190c:	f7ff ff46 	bl	800179c <FLASH_WaitForLastOperation>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_FLASHEx_Erase+0xd4>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_FLASHEx_Erase+0xd4>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	6113      	str	r3, [r2, #16]
 8001920:	e031      	b.n	8001986 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001922:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001926:	f7ff ff39 	bl	800179c <FLASH_WaitForLastOperation>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d12a      	bne.n	8001986 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f04f 32ff 	mov.w	r2, #4294967295
 8001936:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	e019      	b.n	8001974 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001940:	68b8      	ldr	r0, [r7, #8]
 8001942:	f000 f849 	bl	80019d8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001946:	f24c 3050 	movw	r0, #50000	; 0xc350
 800194a:	f7ff ff27 	bl	800179c <FLASH_WaitForLastOperation>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_FLASHEx_Erase+0xd4>)
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_FLASHEx_Erase+0xd4>)
 8001958:	f023 0302 	bic.w	r3, r3, #2
 800195c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	601a      	str	r2, [r3, #0]
            break;
 800196a:	e00c      	b.n	8001986 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001972:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	029a      	lsls	r2, r3, #10
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	429a      	cmp	r2, r3
 8001984:	d3dc      	bcc.n	8001940 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_FLASHEx_Erase+0xd0>)
 8001988:	2200      	movs	r2, #0
 800198a:	761a      	strb	r2, [r3, #24]

  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20002fe0 	.word	0x20002fe0
 800199c:	40022000 	.word	0x40022000

080019a0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <FLASH_MassErase+0x30>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <FLASH_MassErase+0x34>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <FLASH_MassErase+0x34>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <FLASH_MassErase+0x34>)
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <FLASH_MassErase+0x34>)
 80019c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20002fe0 	.word	0x20002fe0
 80019d4:	40022000 	.word	0x40022000

080019d8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <FLASH_PageErase+0x38>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <FLASH_PageErase+0x3c>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <FLASH_PageErase+0x3c>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <FLASH_PageErase+0x3c>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <FLASH_PageErase+0x3c>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <FLASH_PageErase+0x3c>)
 80019fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a02:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20002fe0 	.word	0x20002fe0
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e169      	b.n	8001d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8158 	bne.w	8001cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a9a      	ldr	r2, [pc, #616]	; (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d05e      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a54:	4a98      	ldr	r2, [pc, #608]	; (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d875      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a98      	ldr	r2, [pc, #608]	; (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d058      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a60:	4a96      	ldr	r2, [pc, #600]	; (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d86f      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a66:	4a96      	ldr	r2, [pc, #600]	; (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d052      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a6c:	4a94      	ldr	r2, [pc, #592]	; (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d869      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a72:	4a94      	ldr	r2, [pc, #592]	; (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d04c      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a78:	4a92      	ldr	r2, [pc, #584]	; (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d863      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a92      	ldr	r2, [pc, #584]	; (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d046      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a84:	4a90      	ldr	r2, [pc, #576]	; (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d85d      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d82a      	bhi.n	8001ae4 <HAL_GPIO_Init+0xcc>
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d859      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <HAL_GPIO_Init+0x80>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001aed 	.word	0x08001aed
 8001aa0:	08001aff 	.word	0x08001aff
 8001aa4:	08001b41 	.word	0x08001b41
 8001aa8:	08001b47 	.word	0x08001b47
 8001aac:	08001b47 	.word	0x08001b47
 8001ab0:	08001b47 	.word	0x08001b47
 8001ab4:	08001b47 	.word	0x08001b47
 8001ab8:	08001b47 	.word	0x08001b47
 8001abc:	08001b47 	.word	0x08001b47
 8001ac0:	08001b47 	.word	0x08001b47
 8001ac4:	08001b47 	.word	0x08001b47
 8001ac8:	08001b47 	.word	0x08001b47
 8001acc:	08001b47 	.word	0x08001b47
 8001ad0:	08001b47 	.word	0x08001b47
 8001ad4:	08001b47 	.word	0x08001b47
 8001ad8:	08001b47 	.word	0x08001b47
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001b09 	.word	0x08001b09
 8001ae4:	4a79      	ldr	r2, [pc, #484]	; (8001ccc <HAL_GPIO_Init+0x2b4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aea:	e02c      	b.n	8001b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e029      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	3304      	adds	r3, #4
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e024      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	3308      	adds	r3, #8
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e01f      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e01a      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e013      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	611a      	str	r2, [r3, #16]
          break;
 8001b32:	e009      	b.n	8001b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	615a      	str	r2, [r3, #20]
          break;
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          break;
 8001b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2bff      	cmp	r3, #255	; 0xff
 8001b4c:	d801      	bhi.n	8001b52 <HAL_GPIO_Init+0x13a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_Init+0x13e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d802      	bhi.n	8001b64 <HAL_GPIO_Init+0x14c>
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x152>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3b08      	subs	r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	210f      	movs	r1, #15
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	6a39      	ldr	r1, [r7, #32]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80b1 	beq.w	8001cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_GPIO_Init+0x1ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3f      	ldr	r2, [pc, #252]	; (8001cdc <HAL_GPIO_Init+0x2c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1e8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3e      	ldr	r2, [pc, #248]	; (8001ce0 <HAL_GPIO_Init+0x2c8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3d      	ldr	r2, [pc, #244]	; (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1e0>
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c04:	2300      	movs	r3, #0
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c16:	492f      	ldr	r1, [pc, #188]	; (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	492c      	ldr	r1, [pc, #176]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4928      	ldr	r1, [pc, #160]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4918      	ldr	r1, [pc, #96]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4914      	ldr	r1, [pc, #80]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d021      	beq.n	8001cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
 8001cb4:	e021      	b.n	8001cfa <HAL_GPIO_Init+0x2e2>
 8001cb6:	bf00      	nop
 8001cb8:	10320000 	.word	0x10320000
 8001cbc:	10310000 	.word	0x10310000
 8001cc0:	10220000 	.word	0x10220000
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10120000 	.word	0x10120000
 8001ccc:	10110000 	.word	0x10110000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4909      	ldr	r1, [pc, #36]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f ae8e 	bne.w	8001a2c <HAL_GPIO_Init+0x14>
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	372c      	adds	r7, #44	; 0x2c
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5e:	787b      	ldrb	r3, [r7, #1]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	041a      	lsls	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d90:	887a      	ldrh	r2, [r7, #2]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	041a      	lsls	r2, r3, #16
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	400b      	ands	r3, r1
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f806 	bl	8001de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e26c      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d00c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e20:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x12c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d168      	bne.n	8001f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e246      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x76>
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7f      	ldr	r2, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e02e      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x98>
 8001e72:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xbc>
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a67      	ldr	r2, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff f81a 	bl	8000f08 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff f816 	bl	8000f08 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1fa      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe4>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f806 	bl	8000f08 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff f802 	bl	8000f08 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1e6      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x10c>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d063      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1ba      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4939      	ldr	r1, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e03a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe ffbb 	bl	8000f08 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7fe ffb7 	bl	8000f08 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e19b      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4927      	ldr	r1, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ff9a 	bl	8000f08 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe ff96 	bl	8000f08 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e17a      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d03a      	beq.n	8002078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7fe ff7a 	bl	8000f08 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002018:	f7fe ff76 	bl	8000f08 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e15a      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002036:	2001      	movs	r0, #1
 8002038:	f000 fb08 	bl	800264c <RCC_Delay>
 800203c:	e01c      	b.n	8002078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe ff60 	bl	8000f08 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7fe ff5c 	bl	8000f08 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d908      	bls.n	800206c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e140      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	42420000 	.word	0x42420000
 8002068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b9e      	ldr	r3, [pc, #632]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e9      	bne.n	800204c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a6 	beq.w	80021d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a93      	ldr	r2, [pc, #588]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a8a      	ldr	r2, [pc, #552]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7fe ff1d 	bl	8000f08 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7fe ff19 	bl	8000f08 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0fd      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b81      	ldr	r3, [pc, #516]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x312>
 80020f8:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x334>
 800210e:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b73      	ldr	r3, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a72      	ldr	r2, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x356>
 8002130:	4b6d      	ldr	r3, [pc, #436]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a6c      	ldr	r2, [pc, #432]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 800214a:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fecd 	bl	8000f08 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fec9 	bl	8000f08 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0ab      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	4b57      	ldr	r3, [pc, #348]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x37e>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe feb7 	bl	8000f08 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe feb3 	bl	8000f08 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e095      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8081 	beq.w	80022de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d061      	beq.n	80022ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d146      	bne.n	800227e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_OscConfig+0x4fc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fe87 	bl	8000f08 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe fe83 	bl	8000f08 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e067      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d108      	bne.n	8002238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	492d      	ldr	r1, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a19      	ldr	r1, [r3, #32]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	430b      	orrs	r3, r1
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4fc>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fe57 	bl	8000f08 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fe53 	bl	8000f08 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e037      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x46a>
 800227c:	e02f      	b.n	80022de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_RCC_OscConfig+0x4fc>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe fe40 	bl	8000f08 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fe3c 	bl	8000f08 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e020      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x498>
 80022aa:	e018      	b.n	80022de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e013      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	42420060 	.word	0x42420060

080022f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d0      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4965      	ldr	r1, [pc, #404]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800235a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d040      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e073      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06b      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4936      	ldr	r1, [pc, #216]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fd90 	bl	8000f08 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7fe fd8c 	bl	8000f08 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e053      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d210      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4922      	ldr	r1, [pc, #136]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1cc>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f886 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	0800942c 	.word	0x0800942c
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000094 	.word	0x20000094

080024c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024d0:	1d3c      	adds	r4, r7, #4
 80024d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024d8:	f240 2301 	movw	r3, #513	; 0x201
 80024dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCC_GetSysClockFreq+0xb4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d002      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x40>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d003      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x46>
 8002506:	e02d      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb8>)
 800250a:	623b      	str	r3, [r7, #32]
      break;
 800250c:	e02d      	b.n	800256a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800251a:	4413      	add	r3, r2
 800251c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002520:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_GetSysClockFreq+0xb4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c5b      	lsrs	r3, r3, #17
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800253a:	4413      	add	r3, r2
 800253c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002540:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002546:	fb02 f203 	mul.w	r2, r2, r3
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e004      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	623b      	str	r3, [r7, #32]
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	6a3b      	ldr	r3, [r7, #32]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc90      	pop	{r4, r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	08009374 	.word	0x08009374
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	003d0900 	.word	0x003d0900

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	0800943c 	.word	0x0800943c

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffde 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0adb      	lsrs	r3, r3, #11
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	0800943c 	.word	0x0800943c

080025ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	220f      	movs	r2, #15
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_RCC_GetClockConfig+0x58>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCC_GetClockConfig+0x58>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCC_GetClockConfig+0x58>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_RCC_GetClockConfig+0x58>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_GetClockConfig+0x5c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0207 	and.w	r2, r3, #7
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40021000 	.word	0x40021000
 8002648:	40022000 	.word	0x40022000

0800264c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCC_Delay+0x34>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <RCC_Delay+0x38>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002668:	bf00      	nop
  }
  while (Delay --);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	60fa      	str	r2, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <RCC_Delay+0x1c>
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000000 	.word	0x20000000
 8002684:	10624dd3 	.word	0x10624dd3

08002688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e041      	b.n	800271e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f839 	bl	8002726 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f000 f9b4 	bl	8002a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d001      	beq.n	8002750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e03a      	b.n	80027c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_TIM_Base_Start_IT+0x98>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x58>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277a:	d009      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x58>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x58>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d111      	bne.n	80027b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d010      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	e007      	b.n	80027c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800

080027dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0202 	mvn.w	r2, #2
 8002808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8ed 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8e0 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8ef 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0204 	mvn.w	r2, #4
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8c3 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8b6 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f8c5 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0208 	mvn.w	r2, #8
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f899 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f88c 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f89b 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0210 	mvn.w	r2, #16
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2208      	movs	r2, #8
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f86f 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f862 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f871 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0201 	mvn.w	r2, #1
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fdda 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8bf 	bl	8002b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f835 	bl	8002a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0220 	mvn.w	r2, #32
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f88a 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <TIM_Base_SetConfig+0xb8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <TIM_Base_SetConfig+0x30>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d007      	beq.n	8002a64 <TIM_Base_SetConfig+0x30>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <TIM_Base_SetConfig+0xbc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d003      	beq.n	8002a64 <TIM_Base_SetConfig+0x30>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <TIM_Base_SetConfig+0xc0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d108      	bne.n	8002a76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <TIM_Base_SetConfig+0xb8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <TIM_Base_SetConfig+0x62>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0x62>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <TIM_Base_SetConfig+0xbc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0x62>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <TIM_Base_SetConfig+0xc0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <TIM_Base_SetConfig+0xb8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d103      	bne.n	8002adc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	615a      	str	r2, [r3, #20]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e03f      	b.n	8002bae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd fe50 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fdab 	bl	80036bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d153      	bne.n	8002c7a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_UART_Transmit_DMA+0x26>
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e04c      	b.n	8002c7c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Transmit_DMA+0x38>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e045      	b.n	8002c7c <HAL_UART_Transmit_DMA+0xc4>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_UART_Transmit_DMA+0xcc>)
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_UART_Transmit_DMA+0xd0>)
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_UART_Transmit_DMA+0xd4>)
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	2200      	movs	r2, #0
 8002c36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	f7fe fa9e 	bl	8001190 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c74:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	0800315b 	.word	0x0800315b
 8002c88:	080031ad 	.word	0x080031ad
 8002c8c:	08003295 	.word	0x08003295

08002c90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d11d      	bne.n	8002ce6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_UART_Receive_DMA+0x26>
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e016      	b.n	8002ce8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_UART_Receive_DMA+0x38>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e00f      	b.n	8002ce8 <HAL_UART_Receive_DMA+0x58>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fb23 	bl	8003328 <UART_Start_Receive_DMA>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	e000      	b.n	8002ce8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b21      	cmp	r3, #33	; 0x21
 8002d1c:	d116      	bne.n	8002d4c <HAL_UART_DMAStop+0x5c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d32:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fa84 	bl	800124e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fb52 	bl	80033f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf14      	ite	ne
 8002d5a:	2301      	movne	r3, #1
 8002d5c:	2300      	moveq	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b22      	cmp	r3, #34	; 0x22
 8002d6c:	d116      	bne.n	8002d9c <HAL_UART_DMAStop+0xac>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d82:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fa5c 	bl	800124e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fb3f 	bl	800341a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x52>
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fbb8 	bl	8003568 <UART_Receive_IT>
      return;
 8002df8:	e17b      	b.n	80030f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80b1 	beq.w	8002f64 <HAL_UART_IRQHandler+0x1bc>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_UART_IRQHandler+0x70>
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80a6 	beq.w	8002f64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_UART_IRQHandler+0x90>
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_UART_IRQHandler+0xb0>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0202 	orr.w	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_UART_IRQHandler+0xd0>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xfa>
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <HAL_UART_IRQHandler+0xee>
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0208 	orr.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 811e 	beq.w	80030e8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x11e>
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb51 	bl	8003568 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d102      	bne.n	8002eee <HAL_UART_IRQHandler+0x146>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d031      	beq.n	8002f52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fa93 	bl	800341a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d023      	beq.n	8002f4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d013      	beq.n	8002f42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	4a76      	ldr	r2, [pc, #472]	; (80030f8 <HAL_UART_IRQHandler+0x350>)
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe f9cc 	bl	80012c4 <HAL_DMA_Abort_IT>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	e00e      	b.n	8002f60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8f5 	bl	8003132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	e00a      	b.n	8002f60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8f1 	bl	8003132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e006      	b.n	8002f60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8ed 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f5e:	e0c3      	b.n	80030e8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	bf00      	nop
    return;
 8002f62:	e0c1      	b.n	80030e8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 80a1 	bne.w	80030b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 809b 	beq.w	80030b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8095 	beq.w	80030b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04e      	beq.n	8003048 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002fb4:	8a3b      	ldrh	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8098 	beq.w	80030ec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fc0:	8a3a      	ldrh	r2, [r7, #16]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f080 8092 	bcs.w	80030ec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8a3a      	ldrh	r2, [r7, #16]
 8002fcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d02b      	beq.n	8003030 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003006:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0210 	bic.w	r2, r2, #16
 8003024:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f90f 	bl	800124e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003038:	b29b      	uxth	r3, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b29b      	uxth	r3, r3
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f87f 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003046:	e051      	b.n	80030ec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003050:	b29b      	uxth	r3, r3
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d047      	beq.n	80030f0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003060:	8a7b      	ldrh	r3, [r7, #18]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d044      	beq.n	80030f0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003074:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0210 	bic.w	r2, r2, #16
 80030a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030a4:	8a7b      	ldrh	r3, [r7, #18]
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f84b 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030ae:	e01f      	b.n	80030f0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_UART_IRQHandler+0x324>
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f9e8 	bl	800349a <UART_Transmit_IT>
    return;
 80030ca:	e012      	b.n	80030f2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_UART_IRQHandler+0x34a>
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa29 	bl	8003538 <UART_EndTransmit_IT>
    return;
 80030e6:	e004      	b.n	80030f2 <HAL_UART_IRQHandler+0x34a>
    return;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <HAL_UART_IRQHandler+0x34a>
      return;
 80030f0:	bf00      	nop
  }
}
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	08003473 	.word	0x08003473

080030fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d113      	bne.n	800319e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800319c:	e002      	b.n	80031a4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7fd fcc0 	bl	8000b24 <HAL_UART_TxCpltCallback>
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff ff9e 	bl	80030fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d12a      	bne.n	800323a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003218:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0210 	bic.w	r2, r2, #16
 8003238:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003246:	4619      	mov	r1, r3
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff ff7b 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800324e:	e002      	b.n	8003256 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff5c 	bl	800310e <HAL_UART_RxCpltCallback>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	b29b      	uxth	r3, r3
 800327c:	4619      	mov	r1, r3
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff ff60 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003284:	e002      	b.n	800328c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff ff4a 	bl	8003120 <HAL_UART_RxHalfCpltCallback>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b21      	cmp	r3, #33	; 0x21
 80032c6:	d108      	bne.n	80032da <UART_DMAError+0x46>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80032d4:	68b8      	ldr	r0, [r7, #8]
 80032d6:	f000 f88b 	bl	80033f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b22      	cmp	r3, #34	; 0x22
 80032fa:	d108      	bne.n	800330e <UART_DMAError+0x7a>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003308:	68b8      	ldr	r0, [r7, #8]
 800330a:	f000 f886 	bl	800341a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800331a:	68b8      	ldr	r0, [r7, #8]
 800331c:	f7ff ff09 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2222      	movs	r2, #34	; 0x22
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <UART_Start_Receive_DMA+0xbc>)
 8003356:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <UART_Start_Receive_DMA+0xc0>)
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <UART_Start_Receive_DMA+0xc4>)
 8003366:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	2200      	movs	r2, #0
 800336e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003370:	f107 0308 	add.w	r3, r7, #8
 8003374:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	f7fd ff02 	bl	8001190 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	080031c9 	.word	0x080031c9
 80033e8:	0800325f 	.word	0x0800325f
 80033ec:	08003295 	.word	0x08003295

080033f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003406:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003430:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0210 	bic.w	r2, r2, #16
 8003458:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff fe50 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b21      	cmp	r3, #33	; 0x21
 80034ac:	d13e      	bne.n	800352c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b6:	d114      	bne.n	80034e2 <UART_Transmit_IT+0x48>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d110      	bne.n	80034e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	621a      	str	r2, [r3, #32]
 80034e0:	e008      	b.n	80034f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6211      	str	r1, [r2, #32]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003516:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd fae3 	bl	8000b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b22      	cmp	r3, #34	; 0x22
 800357a:	f040 8099 	bne.w	80036b0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d117      	bne.n	80035b8 <UART_Receive_IT+0x50>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
 80035b6:	e026      	b.n	8003606 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d007      	beq.n	80035dc <UART_Receive_IT+0x74>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <UART_Receive_IT+0x82>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e008      	b.n	80035fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29b      	uxth	r3, r3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4619      	mov	r1, r3
 8003614:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003616:	2b00      	cmp	r3, #0
 8003618:	d148      	bne.n	80036ac <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0220 	bic.w	r2, r2, #32
 8003628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	2b01      	cmp	r3, #1
 8003658:	d123      	bne.n	80036a2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0210 	bic.w	r2, r2, #16
 800366e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b10      	cmp	r3, #16
 800367c:	d10a      	bne.n	8003694 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fd52 	bl	8003144 <HAL_UARTEx_RxEventCallback>
 80036a0:	e002      	b.n	80036a8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fd33 	bl	800310e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e002      	b.n	80036b2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036f6:	f023 030c 	bic.w	r3, r3, #12
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	430b      	orrs	r3, r1
 8003702:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <UART_SetConfig+0x114>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7fe ff4e 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	e002      	b.n	8003732 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe ff36 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8003730:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <UART_SetConfig+0x118>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	0119      	lsls	r1, r3, #4
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f2f3 	udiv	r2, r2, r3
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <UART_SetConfig+0x118>)
 800376a:	fba3 0302 	umull	r0, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2064      	movs	r0, #100	; 0x64
 8003772:	fb00 f303 	mul.w	r3, r0, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <UART_SetConfig+0x118>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003788:	4419      	add	r1, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009a      	lsls	r2, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <UART_SetConfig+0x118>)
 80037a2:	fba3 0302 	umull	r0, r3, r3, r2
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2064      	movs	r0, #100	; 0x64
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	3332      	adds	r3, #50	; 0x32
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <UART_SetConfig+0x118>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	440a      	add	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40013800 	.word	0x40013800
 80037d4:	51eb851f 	.word	0x51eb851f

080037d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037de:	f3ef 8305 	mrs	r3, IPSR
 80037e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ea:	f3ef 8310 	mrs	r3, PRIMASK
 80037ee:	607b      	str	r3, [r7, #4]
  return(result);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <osKernelInitialize+0x32>
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <osKernelInitialize+0x60>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d109      	bne.n	8003812 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003802:	603b      	str	r3, [r7, #0]
  return(result);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800380a:	f06f 0305 	mvn.w	r3, #5
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00c      	b.n	800382c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <osKernelInitialize+0x60>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d105      	bne.n	8003826 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <osKernelInitialize+0x60>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e002      	b.n	800382c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	2000014c 	.word	0x2000014c

0800383c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003842:	f3ef 8305 	mrs	r3, IPSR
 8003846:	60bb      	str	r3, [r7, #8]
  return(result);
 8003848:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	607b      	str	r3, [r7, #4]
  return(result);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <osKernelStart+0x32>
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <osKernelStart+0x64>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d109      	bne.n	8003876 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003862:	f3ef 8311 	mrs	r3, BASEPRI
 8003866:	603b      	str	r3, [r7, #0]
  return(result);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <osKernelStart+0x3a>
    stat = osErrorISR;
 800386e:	f06f 0305 	mvn.w	r3, #5
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e00e      	b.n	8003894 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <osKernelStart+0x64>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <osKernelStart+0x64>)
 8003880:	2202      	movs	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003884:	f001 fdea 	bl	800545c <vTaskStartScheduler>
      stat = osOK;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e002      	b.n	8003894 <osKernelStart+0x58>
    } else {
      stat = osError;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000014c 	.word	0x2000014c

080038a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b092      	sub	sp, #72	; 0x48
 80038a8:	af04      	add	r7, sp, #16
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b4:	f3ef 8305 	mrs	r3, IPSR
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 8094 	bne.w	80039ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c2:	f3ef 8310 	mrs	r3, PRIMASK
 80038c6:	623b      	str	r3, [r7, #32]
  return(result);
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808d 	bne.w	80039ea <osThreadNew+0x146>
 80038d0:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <osThreadNew+0x150>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d106      	bne.n	80038e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038d8:	f3ef 8311 	mrs	r3, BASEPRI
 80038dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8082 	bne.w	80039ea <osThreadNew+0x146>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d07e      	beq.n	80039ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80038f0:	2318      	movs	r3, #24
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80038f4:	2300      	movs	r3, #0
 80038f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80038f8:	f107 031b 	add.w	r3, r7, #27
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d045      	beq.n	8003996 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <osThreadNew+0x74>
        name = attr->name;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <osThreadNew+0x9a>
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b38      	cmp	r3, #56	; 0x38
 8003930:	d805      	bhi.n	800393e <osThreadNew+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <osThreadNew+0x9e>
        return (NULL);
 800393e:	2300      	movs	r3, #0
 8003940:	e054      	b.n	80039ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <osThreadNew+0xd4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2bbb      	cmp	r3, #187	; 0xbb
 8003960:	d90a      	bls.n	8003978 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <osThreadNew+0xd4>
        mem = 1;
 8003972:	2301      	movs	r3, #1
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
 8003976:	e010      	b.n	800399a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10c      	bne.n	800399a <osThreadNew+0xf6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d108      	bne.n	800399a <osThreadNew+0xf6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <osThreadNew+0xf6>
          mem = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
 8003994:	e001      	b.n	800399a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	2b01      	cmp	r3, #1
 800399e:	d110      	bne.n	80039c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039a8:	9202      	str	r2, [sp, #8]
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f001 fb6c 	bl	8005094 <xTaskCreateStatic>
 80039bc:	4603      	mov	r3, r0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e013      	b.n	80039ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d110      	bne.n	80039ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f001 fbb6 	bl	800514c <xTaskCreate>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <osThreadNew+0x146>
          hTask = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3738      	adds	r7, #56	; 0x38
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000014c 	.word	0x2000014c

080039f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a00:	f3ef 8305 	mrs	r3, IPSR
 8003a04:	613b      	str	r3, [r7, #16]
  return(result);
 8003a06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10f      	bne.n	8003a2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <osDelay+0x34>
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <osDelay+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d109      	bne.n	8003a34 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a20:	f3ef 8311 	mrs	r3, BASEPRI
 8003a24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <osDelay+0x3c>
    stat = osErrorISR;
 8003a2c:	f06f 0305 	mvn.w	r3, #5
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e007      	b.n	8003a44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f001 fcd8 	bl	80053f4 <vTaskDelay>
    }
  }

  return (stat);
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000014c 	.word	0x2000014c

08003a54 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f002 fee9 	bl	8006834 <pvTimerGetTimerID>
 8003a62:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	6852      	ldr	r2, [r2, #4]
 8003a72:	4610      	mov	r0, r2
 8003a74:	4798      	blx	r3
  }
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a94:	f3ef 8305 	mrs	r3, IPSR
 8003a98:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d16a      	bne.n	8003b76 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d164      	bne.n	8003b76 <osTimerNew+0xf6>
 8003aac:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <osTimerNew+0x100>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d105      	bne.n	8003ac0 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d15a      	bne.n	8003b76 <osTimerNew+0xf6>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d057      	beq.n	8003b76 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003ac6:	2008      	movs	r0, #8
 8003ac8:	f003 f8c8 	bl	8006c5c <pvPortMalloc>
 8003acc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d050      	beq.n	8003b76 <osTimerNew+0xf6>
      callb->func = func;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <osTimerNew+0x6c>
        reload = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	e001      	b.n	8003af0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	623b      	str	r3, [r7, #32]
      name = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01c      	beq.n	8003b3a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <osTimerNew+0x8e>
          name = attr->name;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d006      	beq.n	8003b24 <osTimerNew+0xa4>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b2f      	cmp	r3, #47	; 0x2f
 8003b1c:	d902      	bls.n	8003b24 <osTimerNew+0xa4>
          mem = 1;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	e00c      	b.n	8003b3e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <osTimerNew+0xbe>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <osTimerNew+0xbe>
            mem = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	e001      	b.n	8003b3e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10c      	bne.n	8003b5e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <osTimerNew+0x104>)
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	2101      	movs	r1, #1
 8003b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b56:	f002 fb34 	bl	80061c2 <xTimerCreateStatic>
 8003b5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8003b5c:	e00b      	b.n	8003b76 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <osTimerNew+0x104>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b70:	f002 fb06 	bl	8006180 <xTimerCreate>
 8003b74:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3730      	adds	r7, #48	; 0x30
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	2000014c 	.word	0x2000014c
 8003b84:	08003a55 	.word	0x08003a55

08003b88 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b96:	f3ef 8305 	mrs	r3, IPSR
 8003b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8003b9c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <osTimerStart+0x3a>
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <osTimerStart+0x7c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d109      	bne.n	8003bca <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <osTimerStart+0x42>
    stat = osErrorISR;
 8003bc2:	f06f 0305 	mvn.w	r3, #5
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e017      	b.n	8003bfa <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <osTimerStart+0x50>
    stat = osErrorParameter;
 8003bd0:	f06f 0303 	mvn.w	r3, #3
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e010      	b.n	8003bfa <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	2104      	movs	r1, #4
 8003be2:	69b8      	ldr	r0, [r7, #24]
 8003be4:	f002 fb5c 	bl	80062a0 <xTimerGenericCommand>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <osTimerStart+0x6c>
      stat = osOK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e002      	b.n	8003bfa <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8003bf4:	f06f 0302 	mvn.w	r3, #2
 8003bf8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000014c 	.word	0x2000014c

08003c08 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c18:	f3ef 8305 	mrs	r3, IPSR
 8003c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 8086 	bne.w	8003d32 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	617b      	str	r3, [r7, #20]
  return(result);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d17f      	bne.n	8003d32 <osSemaphoreNew+0x12a>
 8003c32:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <osSemaphoreNew+0x134>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d105      	bne.n	8003c46 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d175      	bne.n	8003d32 <osSemaphoreNew+0x12a>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d072      	beq.n	8003d32 <osSemaphoreNew+0x12a>
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d86e      	bhi.n	8003d32 <osSemaphoreNew+0x12a>
    mem = -1;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
 8003c58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d015      	beq.n	8003c8c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <osSemaphoreNew+0x6e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b4f      	cmp	r3, #79	; 0x4f
 8003c6e:	d902      	bls.n	8003c76 <osSemaphoreNew+0x6e>
        mem = 1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	e00c      	b.n	8003c90 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d108      	bne.n	8003c90 <osSemaphoreNew+0x88>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <osSemaphoreNew+0x88>
          mem = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	e001      	b.n	8003c90 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d04c      	beq.n	8003d32 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d128      	bne.n	8003cf0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10a      	bne.n	8003cba <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	9200      	str	r2, [sp, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f000 fa4d 	bl	8004150 <xQueueGenericCreateStatic>
 8003cb6:	6278      	str	r0, [r7, #36]	; 0x24
 8003cb8:	e005      	b.n	8003cc6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003cba:	2203      	movs	r2, #3
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f000 fabd 	bl	800423e <xQueueGenericCreate>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <osSemaphoreNew+0x10a>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01f      	beq.n	8003d12 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cda:	f000 fb7b 	bl	80043d4 <xQueueGenericSend>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d016      	beq.n	8003d12 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce6:	f001 f805 	bl	8004cf4 <vQueueDelete>
            hSemaphore = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	e010      	b.n	8003d12 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d108      	bne.n	8003d08 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fafe 	bl	8004300 <xQueueCreateCountingSemaphoreStatic>
 8003d04:	6278      	str	r0, [r7, #36]	; 0x24
 8003d06:	e004      	b.n	8003d12 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fb2f 	bl	800436e <xQueueCreateCountingSemaphore>
 8003d10:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <osSemaphoreNew+0x11e>
          name = attr->name;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e001      	b.n	8003d2a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003d2a:	69f9      	ldr	r1, [r7, #28]
 8003d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d2e:	f001 f92b 	bl	8004f88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2000014c 	.word	0x2000014c

08003d40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003d58:	f06f 0303 	mvn.w	r3, #3
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	e04b      	b.n	8003df8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d60:	f3ef 8305 	mrs	r3, IPSR
 8003d64:	617b      	str	r3, [r7, #20]
  return(result);
 8003d66:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10f      	bne.n	8003d8c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d70:	613b      	str	r3, [r7, #16]
  return(result);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <osSemaphoreAcquire+0x4c>
 8003d78:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <osSemaphoreAcquire+0xc4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d128      	bne.n	8003dd2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d80:	f3ef 8311 	mrs	r3, BASEPRI
 8003d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d022      	beq.n	8003dd2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003d92:	f06f 0303 	mvn.w	r3, #3
 8003d96:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d98:	e02d      	b.n	8003df6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	461a      	mov	r2, r3
 8003da4:	2100      	movs	r1, #0
 8003da6:	69b8      	ldr	r0, [r7, #24]
 8003da8:	f000 ff24 	bl	8004bf4 <xQueueReceiveFromISR>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d003      	beq.n	8003dba <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003db2:	f06f 0302 	mvn.w	r3, #2
 8003db6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003db8:	e01d      	b.n	8003df6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <osSemaphoreAcquire+0xb6>
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <osSemaphoreAcquire+0xc8>)
 8003dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003dd0:	e011      	b.n	8003df6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	69b8      	ldr	r0, [r7, #24]
 8003dd6:	f000 fe01 	bl	80049dc <xQueueSemaphoreTake>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d00b      	beq.n	8003df8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003de6:	f06f 0301 	mvn.w	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e004      	b.n	8003df8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003dee:	f06f 0302 	mvn.w	r3, #2
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e000      	b.n	8003df8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003df6:	bf00      	nop
      }
    }
  }

  return (stat);
 8003df8:	69fb      	ldr	r3, [r7, #28]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000014c 	.word	0x2000014c
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003e22:	f06f 0303 	mvn.w	r3, #3
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e03e      	b.n	8003ea8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e2a:	f3ef 8305 	mrs	r3, IPSR
 8003e2e:	617b      	str	r3, [r7, #20]
  return(result);
 8003e30:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e36:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <osSemaphoreRelease+0x4a>
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <osSemaphoreRelease+0xa8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d120      	bne.n	8003e8c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01a      	beq.n	8003e8c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e5a:	f107 0308 	add.w	r3, r7, #8
 8003e5e:	4619      	mov	r1, r3
 8003e60:	69b8      	ldr	r0, [r7, #24]
 8003e62:	f000 fc4d 	bl	8004700 <xQueueGiveFromISR>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d003      	beq.n	8003e74 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003e6c:	f06f 0302 	mvn.w	r3, #2
 8003e70:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e72:	e018      	b.n	8003ea6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <osSemaphoreRelease+0x9a>
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <osSemaphoreRelease+0xac>)
 8003e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e8a:	e00c      	b.n	8003ea6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	69b8      	ldr	r0, [r7, #24]
 8003e94:	f000 fa9e 	bl	80043d4 <xQueueGenericSend>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d004      	beq.n	8003ea8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003e9e:	f06f 0302 	mvn.w	r3, #2
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	e000      	b.n	8003ea8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ea6:	bf00      	nop
    }
  }

  return (stat);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000014c 	.word	0x2000014c
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a06      	ldr	r2, [pc, #24]	; (8003ee4 <vApplicationGetIdleTaskMemory+0x28>)
 8003ecc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ed2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	601a      	str	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	20000150 	.word	0x20000150
 8003ee8:	2000020c 	.word	0x2000020c

08003eec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <vApplicationGetTimerTaskMemory+0x2c>)
 8003efc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <vApplicationGetTimerTaskMemory+0x30>)
 8003f02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0a:	601a      	str	r2, [r3, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000040c 	.word	0x2000040c
 8003f1c:	200004c8 	.word	0x200004c8

08003f20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f103 0208 	add.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f103 0208 	add.w	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0208 	add.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d103      	bne.n	8003fdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00c      	b.n	8003ff6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <vListInsert+0x2e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d2f6      	bcs.n	8003fe4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6892      	ldr	r2, [r2, #8]
 8004042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6852      	ldr	r2, [r2, #4]
 800404c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d103      	bne.n	8004060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr
	...

08004080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040aa:	f002 fcd7 	bl	8006a5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	441a      	add	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	3b01      	subs	r3, #1
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	22ff      	movs	r2, #255	; 0xff
 80040f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d114      	bne.n	800412a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01a      	beq.n	800413e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3310      	adds	r3, #16
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fc41 	bl	8005994 <xTaskRemoveFromEventList>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d012      	beq.n	800413e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <xQueueGenericReset+0xcc>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	e009      	b.n	800413e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3310      	adds	r3, #16
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fef6 	bl	8003f20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fef1 	bl	8003f20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f002 fcbd 	bl	8006abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004142:	2301      	movs	r3, #1
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08e      	sub	sp, #56	; 0x38
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <xQueueGenericCreateStatic+0x52>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <xQueueGenericCreateStatic+0x56>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <xQueueGenericCreateStatic+0x58>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	623b      	str	r3, [r7, #32]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <xQueueGenericCreateStatic+0x7e>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <xQueueGenericCreateStatic+0x82>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericCreateStatic+0x84>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61fb      	str	r3, [r7, #28]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041ee:	2350      	movs	r3, #80	; 0x50
 80041f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b50      	cmp	r3, #80	; 0x50
 80041f6:	d00a      	beq.n	800420e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	61bb      	str	r3, [r7, #24]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004220:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f843 	bl	80042ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004236:	4618      	mov	r0, r3
 8004238:	3730      	adds	r7, #48	; 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08a      	sub	sp, #40	; 0x28
 8004242:	af02      	add	r7, sp, #8
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	613b      	str	r3, [r7, #16]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	e004      	b.n	800427e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3350      	adds	r3, #80	; 0x50
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fcea 	bl	8006c5c <pvPortMalloc>
 8004288:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00f      	beq.n	80042b0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	3350      	adds	r3, #80	; 0x50
 8004294:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800429e:	79fa      	ldrb	r2, [r7, #7]
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f805 	bl	80042ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042b0:	69bb      	ldr	r3, [r7, #24]
	}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e002      	b.n	80042dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042e8:	2101      	movs	r1, #1
 80042ea:	69b8      	ldr	r0, [r7, #24]
 80042ec:	f7ff fec8 	bl	8004080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61bb      	str	r3, [r7, #24]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	429a      	cmp	r2, r3
 800432e:	d90a      	bls.n	8004346 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	617b      	str	r3, [r7, #20]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004346:	2302      	movs	r3, #2
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fefd 	bl	8004150 <xQueueGenericCreateStatic>
 8004356:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004364:	69fb      	ldr	r3, [r7, #28]
	}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	613b      	str	r3, [r7, #16]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d90a      	bls.n	80043b2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	60fb      	str	r3, [r7, #12]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043b2:	2202      	movs	r2, #2
 80043b4:	2100      	movs	r1, #0
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff41 	bl	800423e <xQueueGenericCreate>
 80043bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80043ca:	697b      	ldr	r3, [r7, #20]
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	; 0x38
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043e2:	2300      	movs	r3, #0
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xQueueGenericSend+0x32>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <xQueueGenericSend+0x40>
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <xQueueGenericSend+0x44>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <xQueueGenericSend+0x46>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <xQueueGenericSend+0x60>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d103      	bne.n	8004442 <xQueueGenericSend+0x6e>
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <xQueueGenericSend+0x72>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <xQueueGenericSend+0x74>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <xQueueGenericSend+0x8e>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	623b      	str	r3, [r7, #32]
}
 800445e:	bf00      	nop
 8004460:	e7fe      	b.n	8004460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004462:	f001 fc5d 	bl	8005d20 <xTaskGetSchedulerState>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d102      	bne.n	8004472 <xQueueGenericSend+0x9e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <xQueueGenericSend+0xa2>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <xQueueGenericSend+0xa4>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xQueueGenericSend+0xbe>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	61fb      	str	r3, [r7, #28]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004492:	f002 fae3 	bl	8006a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <xQueueGenericSend+0xd4>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d129      	bne.n	80044fc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ae:	f000 fc5b 	bl	8004d68 <prvCopyDataToQueue>
 80044b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	3324      	adds	r3, #36	; 0x24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fa67 	bl	8005994 <xTaskRemoveFromEventList>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044cc:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <xQueueGenericSend+0x1f8>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	e00a      	b.n	80044f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <xQueueGenericSend+0x1f8>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044f4:	f002 fae2 	bl	8006abc <vPortExitCritical>
				return pdPASS;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e063      	b.n	80045c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004502:	f002 fadb 	bl	8006abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004506:	2300      	movs	r3, #0
 8004508:	e05c      	b.n	80045c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004510:	f107 0314 	add.w	r3, r7, #20
 8004514:	4618      	mov	r0, r3
 8004516:	f001 faa1 	bl	8005a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800451a:	2301      	movs	r3, #1
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800451e:	f002 facd 	bl	8006abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004522:	f001 f80b 	bl	800553c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004526:	f002 fa99 	bl	8006a5c <vPortEnterCritical>
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004530:	b25b      	sxtb	r3, r3
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d103      	bne.n	8004540 <xQueueGenericSend+0x16c>
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004546:	b25b      	sxtb	r3, r3
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d103      	bne.n	8004556 <xQueueGenericSend+0x182>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004556:	f002 fab1 	bl	8006abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800455a:	1d3a      	adds	r2, r7, #4
 800455c:	f107 0314 	add.w	r3, r7, #20
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f001 fa90 	bl	8005a88 <xTaskCheckForTimeOut>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d124      	bne.n	80045b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800456e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004570:	f000 fcf2 	bl	8004f58 <prvIsQueueFull>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d018      	beq.n	80045ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	3310      	adds	r3, #16
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4611      	mov	r1, r2
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f9b6 	bl	80058f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800458a:	f000 fc7d 	bl	8004e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800458e:	f000 ffe3 	bl	8005558 <xTaskResumeAll>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	f47f af7c 	bne.w	8004492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <xQueueGenericSend+0x1f8>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	e772      	b.n	8004492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ae:	f000 fc6b 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045b2:	f000 ffd1 	bl	8005558 <xTaskResumeAll>
 80045b6:	e76c      	b.n	8004492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ba:	f000 fc65 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045be:	f000 ffcb 	bl	8005558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045c2:	2300      	movs	r3, #0
		}
	}
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3738      	adds	r7, #56	; 0x38
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <xQueueGenericSendFromISR+0x3c>
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <xQueueGenericSendFromISR+0x40>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <xQueueGenericSendFromISR+0x42>
 8004610:	2300      	movs	r3, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	623b      	str	r3, [r7, #32]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d103      	bne.n	800463a <xQueueGenericSendFromISR+0x6a>
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <xQueueGenericSendFromISR+0x6e>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <xQueueGenericSendFromISR+0x70>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61fb      	str	r3, [r7, #28]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800465a:	f002 fac1 	bl	8006be0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800465e:	f3ef 8211 	mrs	r2, BASEPRI
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	61ba      	str	r2, [r7, #24]
 8004674:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004676:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <xQueueGenericSendFromISR+0xbc>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d12c      	bne.n	80046e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469c:	f000 fb64 	bl	8004d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d112      	bne.n	80046d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	3324      	adds	r3, #36	; 0x24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f96c 	bl	8005994 <xTaskRemoveFromEventList>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00e      	beq.n	80046e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e007      	b.n	80046e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046d4:	3301      	adds	r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	b25a      	sxtb	r2, r3
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046e0:	2301      	movs	r3, #1
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80046e4:	e001      	b.n	80046ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3738      	adds	r7, #56	; 0x38
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	623b      	str	r3, [r7, #32]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	61fb      	str	r3, [r7, #28]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <xQueueGiveFromISR+0x58>
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <xQueueGiveFromISR+0x5c>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <xQueueGiveFromISR+0x5e>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	61bb      	str	r3, [r7, #24]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004778:	f002 fa32 	bl	8006be0 <vPortValidateInterruptPriority>
	__asm volatile
 800477c:	f3ef 8211 	mrs	r2, BASEPRI
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	617a      	str	r2, [r7, #20]
 8004792:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004794:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d22b      	bcs.n	8004800 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d112      	bne.n	80047ea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	3324      	adds	r3, #36	; 0x24
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f8df 	bl	8005994 <xTaskRemoveFromEventList>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00e      	beq.n	80047fa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e007      	b.n	80047fa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ee:	3301      	adds	r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	b25a      	sxtb	r2, r3
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047fa:	2301      	movs	r3, #1
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
 80047fe:	e001      	b.n	8004804 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f383 8811 	msr	BASEPRI, r3
}
 800480e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004812:	4618      	mov	r0, r3
 8004814:	3738      	adds	r7, #56	; 0x38
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <xQueueReceive+0x30>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	623b      	str	r3, [r7, #32]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <xQueueReceive+0x3e>
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <xQueueReceive+0x42>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <xQueueReceive+0x44>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xQueueReceive+0x5e>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	61fb      	str	r3, [r7, #28]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800487a:	f001 fa51 	bl	8005d20 <xTaskGetSchedulerState>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <xQueueReceive+0x6e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <xQueueReceive+0x72>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <xQueueReceive+0x74>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xQueueReceive+0x8e>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	61bb      	str	r3, [r7, #24]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048aa:	f002 f8d7 	bl	8006a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01f      	beq.n	80048fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048be:	f000 fabd 	bl	8004e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1e5a      	subs	r2, r3, #1
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00f      	beq.n	80048f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	3310      	adds	r3, #16
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 f85c 	bl	8005994 <xTaskRemoveFromEventList>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <xQueueReceive+0x1bc>)
 80048e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048f2:	f002 f8e3 	bl	8006abc <vPortExitCritical>
				return pdPASS;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e069      	b.n	80049ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004900:	f002 f8dc 	bl	8006abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004904:	2300      	movs	r3, #0
 8004906:	e062      	b.n	80049ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800490e:	f107 0310 	add.w	r3, r7, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f001 f8a2 	bl	8005a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800491c:	f002 f8ce 	bl	8006abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004920:	f000 fe0c 	bl	800553c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004924:	f002 f89a 	bl	8006a5c <vPortEnterCritical>
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800492e:	b25b      	sxtb	r3, r3
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d103      	bne.n	800493e <xQueueReceive+0x122>
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004944:	b25b      	sxtb	r3, r3
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d103      	bne.n	8004954 <xQueueReceive+0x138>
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004954:	f002 f8b2 	bl	8006abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004958:	1d3a      	adds	r2, r7, #4
 800495a:	f107 0310 	add.w	r3, r7, #16
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f001 f891 	bl	8005a88 <xTaskCheckForTimeOut>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d123      	bne.n	80049b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800496c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496e:	f000 fadd 	bl	8004f2c <prvIsQueueEmpty>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d017      	beq.n	80049a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	3324      	adds	r3, #36	; 0x24
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f000 ffb7 	bl	80058f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004988:	f000 fa7e 	bl	8004e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800498c:	f000 fde4 	bl	8005558 <xTaskResumeAll>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d189      	bne.n	80048aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <xQueueReceive+0x1bc>)
 8004998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	e780      	b.n	80048aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f000 fa6d 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ae:	f000 fdd3 	bl	8005558 <xTaskResumeAll>
 80049b2:	e77a      	b.n	80048aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b6:	f000 fa67 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ba:	f000 fdcd 	bl	8005558 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c0:	f000 fab4 	bl	8004f2c <prvIsQueueEmpty>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f43f af6f 	beq.w	80048aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3730      	adds	r7, #48	; 0x30
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	; 0x38
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	623b      	str	r3, [r7, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	61fb      	str	r3, [r7, #28]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a2c:	f001 f978 	bl	8005d20 <xTaskGetSchedulerState>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <xQueueSemaphoreTake+0x60>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <xQueueSemaphoreTake+0x64>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <xQueueSemaphoreTake+0x66>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	61bb      	str	r3, [r7, #24]
}
 8004a58:	bf00      	nop
 8004a5a:	e7fe      	b.n	8004a5a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a5c:	f001 fffe 	bl	8006a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d024      	beq.n	8004ab6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	1e5a      	subs	r2, r3, #1
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a7c:	f001 fad0 	bl	8006020 <pvTaskIncrementMutexHeldCount>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00f      	beq.n	8004aae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	3310      	adds	r3, #16
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 ff7e 	bl	8005994 <xTaskRemoveFromEventList>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a9e:	4b54      	ldr	r3, [pc, #336]	; (8004bf0 <xQueueSemaphoreTake+0x214>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aae:	f002 f805 	bl	8006abc <vPortExitCritical>
				return pdPASS;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e097      	b.n	8004be6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	617b      	str	r3, [r7, #20]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ad8:	f001 fff0 	bl	8006abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e082      	b.n	8004be6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 ffb6 	bl	8005a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af0:	2301      	movs	r3, #1
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004af4:	f001 ffe2 	bl	8006abc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004af8:	f000 fd20 	bl	800553c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004afc:	f001 ffae 	bl	8006a5c <vPortEnterCritical>
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b06:	b25b      	sxtb	r3, r3
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d103      	bne.n	8004b16 <xQueueSemaphoreTake+0x13a>
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d103      	bne.n	8004b2c <xQueueSemaphoreTake+0x150>
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b2c:	f001 ffc6 	bl	8006abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b30:	463a      	mov	r2, r7
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 ffa5 	bl	8005a88 <xTaskCheckForTimeOut>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d132      	bne.n	8004baa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b46:	f000 f9f1 	bl	8004f2c <prvIsQueueEmpty>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d026      	beq.n	8004b9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b58:	f001 ff80 	bl	8006a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f8fb 	bl	8005d5c <xTaskPriorityInherit>
 8004b66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b68:	f001 ffa8 	bl	8006abc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	3324      	adds	r3, #36	; 0x24
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 febd 	bl	80058f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b7c:	f000 f984 	bl	8004e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b80:	f000 fcea 	bl	8005558 <xTaskResumeAll>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f af68 	bne.w	8004a5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <xQueueSemaphoreTake+0x214>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	e75e      	b.n	8004a5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ba0:	f000 f972 	bl	8004e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ba4:	f000 fcd8 	bl	8005558 <xTaskResumeAll>
 8004ba8:	e758      	b.n	8004a5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bac:	f000 f96c 	bl	8004e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bb0:	f000 fcd2 	bl	8005558 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bb6:	f000 f9b9 	bl	8004f2c <prvIsQueueEmpty>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f43f af4d 	beq.w	8004a5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004bc8:	f001 ff48 	bl	8006a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bce:	f000 f8b4 	bl	8004d3a <prvGetDisinheritPriorityAfterTimeout>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 f99a 	bl	8005f14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004be0:	f001 ff6c 	bl	8006abc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3738      	adds	r7, #56	; 0x38
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08e      	sub	sp, #56	; 0x38
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	623b      	str	r3, [r7, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <xQueueReceiveFromISR+0x3a>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <xQueueReceiveFromISR+0x3e>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <xQueueReceiveFromISR+0x40>
 8004c32:	2300      	movs	r3, #0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	61fb      	str	r3, [r7, #28]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c4e:	f001 ffc7 	bl	8006be0 <vPortValidateInterruptPriority>
	__asm volatile
 8004c52:	f3ef 8211 	mrs	r2, BASEPRI
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	61ba      	str	r2, [r7, #24]
 8004c68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d02f      	beq.n	8004cda <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c88:	f000 f8d8 	bl	8004e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	1e5a      	subs	r2, r3, #1
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d112      	bne.n	8004cc4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	3310      	adds	r3, #16
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fe72 	bl	8005994 <xTaskRemoveFromEventList>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e007      	b.n	8004cd4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc8:	3301      	adds	r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	b25a      	sxtb	r2, r3
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e001      	b.n	8004cde <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f383 8811 	msr	BASEPRI, r3
}
 8004ce8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3738      	adds	r7, #56	; 0x38
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <vQueueDelete+0x28>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60bb      	str	r3, [r7, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f95b 	bl	8004fd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f002 f859 	bl	8006de4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e001      	b.n	8004d5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d14d      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 f850 	bl	8005e38 <xTaskPriorityDisinherit>
 8004d98:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	e043      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d119      	bne.n	8004ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6898      	ldr	r0, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	461a      	mov	r2, r3
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	f004 f9ea 	bl	800918c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d32b      	bcc.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
 8004dda:	e026      	b.n	8004e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68d8      	ldr	r0, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	f004 f9d0 	bl	800918c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	425b      	negs	r3, r3
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d207      	bcs.n	8004e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	425b      	negs	r3, r3
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d105      	bne.n	8004e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e32:	697b      	ldr	r3, [r7, #20]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d303      	bcc.n	8004e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6838      	ldr	r0, [r7, #0]
 8004e7c:	f004 f986 	bl	800918c <memcpy>
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e90:	f001 fde4 	bl	8006a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e9c:	e011      	b.n	8004ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fd72 	bl	8005994 <xTaskRemoveFromEventList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eb6:	f000 fe49 	bl	8005b4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dce9      	bgt.n	8004e9e <prvUnlockQueue+0x16>
 8004eca:	e000      	b.n	8004ece <prvUnlockQueue+0x46>
					break;
 8004ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ed6:	f001 fdf1 	bl	8006abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eda:	f001 fdbf 	bl	8006a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ee6:	e011      	b.n	8004f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fd4d 	bl	8005994 <xTaskRemoveFromEventList>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f00:	f000 fe24 	bl	8005b4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dce9      	bgt.n	8004ee8 <prvUnlockQueue+0x60>
 8004f14:	e000      	b.n	8004f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f20:	f001 fdcc 	bl	8006abc <vPortExitCritical>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f34:	f001 fd92 	bl	8006a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 fdb7 	bl	8006abc <vPortExitCritical>

	return xReturn;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f60:	f001 fd7c 	bl	8006a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d102      	bne.n	8004f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f7a:	f001 fd9f 	bl	8006abc <vPortExitCritical>

	return xReturn;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e014      	b.n	8004fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f98:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <vQueueAddToRegistry+0x4c>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <vQueueAddToRegistry+0x4c>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <vQueueAddToRegistry+0x4c>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fba:	e006      	b.n	8004fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b07      	cmp	r3, #7
 8004fc6:	d9e7      	bls.n	8004f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	20003000 	.word	0x20003000

08004fd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e016      	b.n	8005014 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004fe6:	4a10      	ldr	r2, [pc, #64]	; (8005028 <vQueueUnregisterQueue+0x50>)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4413      	add	r3, r2
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d10b      	bne.n	800500e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <vQueueUnregisterQueue+0x50>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005000:	4a09      	ldr	r2, [pc, #36]	; (8005028 <vQueueUnregisterQueue+0x50>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	2200      	movs	r2, #0
 800500a:	605a      	str	r2, [r3, #4]
				break;
 800500c:	e006      	b.n	800501c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b07      	cmp	r3, #7
 8005018:	d9e5      	bls.n	8004fe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20003000 	.word	0x20003000

0800502c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800503c:	f001 fd0e 	bl	8006a5c <vPortEnterCritical>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005046:	b25b      	sxtb	r3, r3
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d103      	bne.n	8005056 <vQueueWaitForMessageRestricted+0x2a>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800505c:	b25b      	sxtb	r3, r3
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d103      	bne.n	800506c <vQueueWaitForMessageRestricted+0x40>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800506c:	f001 fd26 	bl	8006abc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3324      	adds	r3, #36	; 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fc5b 	bl	800593c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f7ff fefe 	bl	8004e88 <prvUnlockQueue>
	}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af04      	add	r7, sp, #16
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xTaskCreateStatic+0x2a>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	623b      	str	r3, [r7, #32]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xTaskCreateStatic+0x46>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61fb      	str	r3, [r7, #28]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050da:	23bc      	movs	r3, #188	; 0xbc
 80050dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2bbc      	cmp	r3, #188	; 0xbc
 80050e2:	d00a      	beq.n	80050fa <xTaskCreateStatic+0x66>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	61bb      	str	r3, [r7, #24]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <xTaskCreateStatic+0xaa>
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01b      	beq.n	800513e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	2202      	movs	r2, #2
 8005114:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005118:	2300      	movs	r3, #0
 800511a:	9303      	str	r3, [sp, #12]
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	9302      	str	r3, [sp, #8]
 8005120:	f107 0314 	add.w	r3, r7, #20
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f851 	bl	80051d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005138:	f000 f8ec 	bl	8005314 <prvAddNewTaskToReadyList>
 800513c:	e001      	b.n	8005142 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005142:	697b      	ldr	r3, [r7, #20]
	}
 8005144:	4618      	mov	r0, r3
 8005146:	3728      	adds	r7, #40	; 0x28
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08c      	sub	sp, #48	; 0x30
 8005150:	af04      	add	r7, sp, #16
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4618      	mov	r0, r3
 8005162:	f001 fd7b 	bl	8006c5c <pvPortMalloc>
 8005166:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800516e:	20bc      	movs	r0, #188	; 0xbc
 8005170:	f001 fd74 	bl	8006c5c <pvPortMalloc>
 8005174:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
 8005182:	e005      	b.n	8005190 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005184:	6978      	ldr	r0, [r7, #20]
 8005186:	f001 fe2d 	bl	8006de4 <vPortFree>
 800518a:	e001      	b.n	8005190 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d017      	beq.n	80051c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800519e:	88fa      	ldrh	r2, [r7, #6]
 80051a0:	2300      	movs	r3, #0
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f80f 	bl	80051d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ba:	69f8      	ldr	r0, [r7, #28]
 80051bc:	f000 f8aa 	bl	8005314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051c0:	2301      	movs	r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e002      	b.n	80051cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051cc:	69bb      	ldr	r3, [r7, #24]
	}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	461a      	mov	r2, r3
 80051f0:	21a5      	movs	r1, #165	; 0xa5
 80051f2:	f003 ffd9 	bl	80091a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005200:	3b01      	subs	r3, #1
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f023 0307 	bic.w	r3, r3, #7
 800520e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <prvInitialiseNewTask+0x58>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	617b      	str	r3, [r7, #20]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e012      	b.n	800525c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	7819      	ldrb	r1, [r3, #0]
 800523e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	3334      	adds	r3, #52	; 0x34
 8005246:	460a      	mov	r2, r1
 8005248:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b0f      	cmp	r3, #15
 8005260:	d9e9      	bls.n	8005236 <prvInitialiseNewTask+0x5e>
 8005262:	e000      	b.n	8005266 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005264:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2b37      	cmp	r3, #55	; 0x37
 8005272:	d901      	bls.n	8005278 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005274:	2337      	movs	r3, #55	; 0x37
 8005276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005282:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	2200      	movs	r2, #0
 8005288:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	3304      	adds	r3, #4
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe fe65 	bl	8003f5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	3318      	adds	r3, #24
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fe60 	bl	8003f5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	3354      	adds	r3, #84	; 0x54
 80052c8:	2260      	movs	r2, #96	; 0x60
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f003 ff6b 	bl	80091a8 <memset>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	4a0c      	ldr	r2, [pc, #48]	; (8005308 <prvInitialiseNewTask+0x130>)
 80052d6:	659a      	str	r2, [r3, #88]	; 0x58
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	4a0c      	ldr	r2, [pc, #48]	; (800530c <prvInitialiseNewTask+0x134>)
 80052dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	4a0b      	ldr	r2, [pc, #44]	; (8005310 <prvInitialiseNewTask+0x138>)
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	69b8      	ldr	r0, [r7, #24]
 80052ea:	f001 fac3 	bl	8006874 <pxPortInitialiseStack>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005300:	bf00      	nop
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08009670 	.word	0x08009670
 800530c:	08009690 	.word	0x08009690
 8005310:	08009650 	.word	0x08009650

08005314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800531c:	f001 fb9e 	bl	8006a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005320:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <prvAddNewTaskToReadyList+0xc4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3301      	adds	r3, #1
 8005326:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <prvAddNewTaskToReadyList+0xc4>)
 8005328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <prvAddNewTaskToReadyList+0xc8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <prvAddNewTaskToReadyList+0xc8>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005338:	4b27      	ldr	r3, [pc, #156]	; (80053d8 <prvAddNewTaskToReadyList+0xc4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d110      	bne.n	8005362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005340:	f000 fc28 	bl	8005b94 <prvInitialiseTaskLists>
 8005344:	e00d      	b.n	8005362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005346:	4b26      	ldr	r3, [pc, #152]	; (80053e0 <prvAddNewTaskToReadyList+0xcc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <prvAddNewTaskToReadyList+0xc8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	429a      	cmp	r2, r3
 800535a:	d802      	bhi.n	8005362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800535c:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <prvAddNewTaskToReadyList+0xc8>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005362:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <prvAddNewTaskToReadyList+0xd0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3301      	adds	r3, #1
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <prvAddNewTaskToReadyList+0xd0>)
 800536a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <prvAddNewTaskToReadyList+0xd0>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <prvAddNewTaskToReadyList+0xd4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d903      	bls.n	8005388 <prvAddNewTaskToReadyList+0x74>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <prvAddNewTaskToReadyList+0xd4>)
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4a15      	ldr	r2, [pc, #84]	; (80053ec <prvAddNewTaskToReadyList+0xd8>)
 8005396:	441a      	add	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f7fe fde9 	bl	8003f76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053a4:	f001 fb8a 	bl	8006abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <prvAddNewTaskToReadyList+0xcc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00e      	beq.n	80053ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <prvAddNewTaskToReadyList+0xc8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d207      	bcs.n	80053ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <prvAddNewTaskToReadyList+0xdc>)
 80053c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000d9c 	.word	0x20000d9c
 80053dc:	200008c8 	.word	0x200008c8
 80053e0:	20000da8 	.word	0x20000da8
 80053e4:	20000db8 	.word	0x20000db8
 80053e8:	20000da4 	.word	0x20000da4
 80053ec:	200008cc 	.word	0x200008cc
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d017      	beq.n	8005436 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <vTaskDelay+0x60>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <vTaskDelay+0x30>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60bb      	str	r3, [r7, #8]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005424:	f000 f88a 	bl	800553c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fe0c 	bl	8006048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005430:	f000 f892 	bl	8005558 <xTaskResumeAll>
 8005434:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <vTaskDelay+0x64>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000dc4 	.word	0x20000dc4
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800546a:	463a      	mov	r2, r7
 800546c:	1d39      	adds	r1, r7, #4
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe fd22 	bl	8003ebc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	9202      	str	r2, [sp, #8]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	460a      	mov	r2, r1
 800548a:	4924      	ldr	r1, [pc, #144]	; (800551c <vTaskStartScheduler+0xc0>)
 800548c:	4824      	ldr	r0, [pc, #144]	; (8005520 <vTaskStartScheduler+0xc4>)
 800548e:	f7ff fe01 	bl	8005094 <xTaskCreateStatic>
 8005492:	4603      	mov	r3, r0
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <vTaskStartScheduler+0xc8>)
 8005496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005498:	4b22      	ldr	r3, [pc, #136]	; (8005524 <vTaskStartScheduler+0xc8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e001      	b.n	80054aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d102      	bne.n	80054b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054b0:	f000 fe1e 	bl	80060f0 <xTimerCreateTimerTask>
 80054b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d11b      	bne.n	80054f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054d0:	4b15      	ldr	r3, [pc, #84]	; (8005528 <vTaskStartScheduler+0xcc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3354      	adds	r3, #84	; 0x54
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <vTaskStartScheduler+0xd0>)
 80054d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <vTaskStartScheduler+0xd4>)
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295
 80054e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <vTaskStartScheduler+0xd8>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <vTaskStartScheduler+0xdc>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ee:	f001 fa43 	bl	8006978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054f2:	e00e      	b.n	8005512 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d10a      	bne.n	8005512 <vTaskStartScheduler+0xb6>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60fb      	str	r3, [r7, #12]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <vTaskStartScheduler+0xb4>
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	08009384 	.word	0x08009384
 8005520:	08005b65 	.word	0x08005b65
 8005524:	20000dc0 	.word	0x20000dc0
 8005528:	200008c8 	.word	0x200008c8
 800552c:	200000c8 	.word	0x200000c8
 8005530:	20000dbc 	.word	0x20000dbc
 8005534:	20000da8 	.word	0x20000da8
 8005538:	20000da0 	.word	0x20000da0

0800553c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <vTaskSuspendAll+0x18>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a03      	ldr	r2, [pc, #12]	; (8005554 <vTaskSuspendAll+0x18>)
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000dc4 	.word	0x20000dc4

08005558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005562:	2300      	movs	r3, #0
 8005564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005566:	4b42      	ldr	r3, [pc, #264]	; (8005670 <xTaskResumeAll+0x118>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <xTaskResumeAll+0x2c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	603b      	str	r3, [r7, #0]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005584:	f001 fa6a 	bl	8006a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005588:	4b39      	ldr	r3, [pc, #228]	; (8005670 <xTaskResumeAll+0x118>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3b01      	subs	r3, #1
 800558e:	4a38      	ldr	r2, [pc, #224]	; (8005670 <xTaskResumeAll+0x118>)
 8005590:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005592:	4b37      	ldr	r3, [pc, #220]	; (8005670 <xTaskResumeAll+0x118>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d162      	bne.n	8005660 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <xTaskResumeAll+0x11c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d05e      	beq.n	8005660 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a2:	e02f      	b.n	8005604 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055a4:	4b34      	ldr	r3, [pc, #208]	; (8005678 <xTaskResumeAll+0x120>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3318      	adds	r3, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe fd3b 	bl	800402c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fd36 	bl	800402c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b2d      	ldr	r3, [pc, #180]	; (800567c <xTaskResumeAll+0x124>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d903      	bls.n	80055d4 <xTaskResumeAll+0x7c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a2a      	ldr	r2, [pc, #168]	; (800567c <xTaskResumeAll+0x124>)
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a27      	ldr	r2, [pc, #156]	; (8005680 <xTaskResumeAll+0x128>)
 80055e2:	441a      	add	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe fcc3 	bl	8003f76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <xTaskResumeAll+0x12c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d302      	bcc.n	8005604 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <xTaskResumeAll+0x130>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <xTaskResumeAll+0x120>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1cb      	bne.n	80055a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005612:	f000 fb61 	bl	8005cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005616:	4b1d      	ldr	r3, [pc, #116]	; (800568c <xTaskResumeAll+0x134>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005622:	f000 f845 	bl	80056b0 <xTaskIncrementTick>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <xTaskResumeAll+0x130>)
 800562e:	2201      	movs	r2, #1
 8005630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f1      	bne.n	8005622 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <xTaskResumeAll+0x134>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <xTaskResumeAll+0x130>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <xTaskResumeAll+0x138>)
 8005652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005660:	f001 fa2c 	bl	8006abc <vPortExitCritical>

	return xAlreadyYielded;
 8005664:	68bb      	ldr	r3, [r7, #8]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000dc4 	.word	0x20000dc4
 8005674:	20000d9c 	.word	0x20000d9c
 8005678:	20000d5c 	.word	0x20000d5c
 800567c:	20000da4 	.word	0x20000da4
 8005680:	200008cc 	.word	0x200008cc
 8005684:	200008c8 	.word	0x200008c8
 8005688:	20000db0 	.word	0x20000db0
 800568c:	20000dac 	.word	0x20000dac
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <xTaskGetTickCount+0x18>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a0:	687b      	ldr	r3, [r7, #4]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	20000da0 	.word	0x20000da0

080056b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ba:	4b51      	ldr	r3, [pc, #324]	; (8005800 <xTaskIncrementTick+0x150>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 808e 	bne.w	80057e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c4:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <xTaskIncrementTick+0x154>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056cc:	4a4d      	ldr	r2, [pc, #308]	; (8005804 <xTaskIncrementTick+0x154>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d120      	bne.n	800571a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d8:	4b4b      	ldr	r3, [pc, #300]	; (8005808 <xTaskIncrementTick+0x158>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	603b      	str	r3, [r7, #0]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xTaskIncrementTick+0x46>
 80056f8:	4b43      	ldr	r3, [pc, #268]	; (8005808 <xTaskIncrementTick+0x158>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4b43      	ldr	r3, [pc, #268]	; (800580c <xTaskIncrementTick+0x15c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a41      	ldr	r2, [pc, #260]	; (8005808 <xTaskIncrementTick+0x158>)
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4a41      	ldr	r2, [pc, #260]	; (800580c <xTaskIncrementTick+0x15c>)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	4b40      	ldr	r3, [pc, #256]	; (8005810 <xTaskIncrementTick+0x160>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	4a3f      	ldr	r2, [pc, #252]	; (8005810 <xTaskIncrementTick+0x160>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	f000 fadf 	bl	8005cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800571a:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <xTaskIncrementTick+0x164>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d34e      	bcc.n	80057c2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005724:	4b38      	ldr	r3, [pc, #224]	; (8005808 <xTaskIncrementTick+0x158>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <xTaskIncrementTick+0x82>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <xTaskIncrementTick+0x84>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	4b36      	ldr	r3, [pc, #216]	; (8005814 <xTaskIncrementTick+0x164>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
					break;
 8005740:	e03f      	b.n	80057c2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <xTaskIncrementTick+0x158>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <xTaskIncrementTick+0x164>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]
						break;
 8005760:	e02f      	b.n	80057c2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fc60 	bl	800402c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fc57 	bl	800402c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005782:	4b25      	ldr	r3, [pc, #148]	; (8005818 <xTaskIncrementTick+0x168>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d903      	bls.n	8005792 <xTaskIncrementTick+0xe2>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	4a22      	ldr	r2, [pc, #136]	; (8005818 <xTaskIncrementTick+0x168>)
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4a1f      	ldr	r2, [pc, #124]	; (800581c <xTaskIncrementTick+0x16c>)
 80057a0:	441a      	add	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f7fe fbe4 	bl	8003f76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <xTaskIncrementTick+0x170>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3b3      	bcc.n	8005724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c0:	e7b0      	b.n	8005724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <xTaskIncrementTick+0x170>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4914      	ldr	r1, [pc, #80]	; (800581c <xTaskIncrementTick+0x16c>)
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d907      	bls.n	80057ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e004      	b.n	80057ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <xTaskIncrementTick+0x174>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <xTaskIncrementTick+0x174>)
 80057e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <xTaskIncrementTick+0x178>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80057f2:	2301      	movs	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057f6:	697b      	ldr	r3, [r7, #20]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000dc4 	.word	0x20000dc4
 8005804:	20000da0 	.word	0x20000da0
 8005808:	20000d54 	.word	0x20000d54
 800580c:	20000d58 	.word	0x20000d58
 8005810:	20000db4 	.word	0x20000db4
 8005814:	20000dbc 	.word	0x20000dbc
 8005818:	20000da4 	.word	0x20000da4
 800581c:	200008cc 	.word	0x200008cc
 8005820:	200008c8 	.word	0x200008c8
 8005824:	20000dac 	.word	0x20000dac
 8005828:	20000db0 	.word	0x20000db0

0800582c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005832:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <vTaskSwitchContext+0xb0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800583a:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <vTaskSwitchContext+0xb4>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005840:	e046      	b.n	80058d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005842:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <vTaskSwitchContext+0xb4>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005848:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <vTaskSwitchContext+0xb8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e010      	b.n	8005872 <vTaskSwitchContext+0x46>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <vTaskSwitchContext+0x40>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	607b      	str	r3, [r7, #4]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <vTaskSwitchContext+0x3e>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b01      	subs	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	491d      	ldr	r1, [pc, #116]	; (80058e8 <vTaskSwitchContext+0xbc>)
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0e4      	beq.n	8005850 <vTaskSwitchContext+0x24>
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <vTaskSwitchContext+0xbc>)
 8005892:	4413      	add	r3, r2
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	3308      	adds	r3, #8
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d104      	bne.n	80058b6 <vTaskSwitchContext+0x8a>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <vTaskSwitchContext+0xc0>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <vTaskSwitchContext+0xb8>)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <vTaskSwitchContext+0xc0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3354      	adds	r3, #84	; 0x54
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <vTaskSwitchContext+0xc4>)
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000dc4 	.word	0x20000dc4
 80058e0:	20000db0 	.word	0x20000db0
 80058e4:	20000da4 	.word	0x20000da4
 80058e8:	200008cc 	.word	0x200008cc
 80058ec:	200008c8 	.word	0x200008c8
 80058f0:	200000c8 	.word	0x200000c8

080058f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <vTaskPlaceOnEventList+0x44>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3318      	adds	r3, #24
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fe fb4a 	bl	8003fbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005928:	2101      	movs	r1, #1
 800592a:	6838      	ldr	r0, [r7, #0]
 800592c:	f000 fb8c 	bl	8006048 <prvAddCurrentTaskToDelayedList>
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200008c8 	.word	0x200008c8

0800593c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	617b      	str	r3, [r7, #20]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <vTaskPlaceOnEventListRestricted+0x54>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3318      	adds	r3, #24
 800596a:	4619      	mov	r1, r3
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7fe fb02 	bl	8003f76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	68b8      	ldr	r0, [r7, #8]
 8005982:	f000 fb61 	bl	8006048 <prvAddCurrentTaskToDelayedList>
	}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200008c8 	.word	0x200008c8

08005994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60fb      	str	r3, [r7, #12]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3318      	adds	r3, #24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fb31 	bl	800402c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <xTaskRemoveFromEventList+0xb0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d11d      	bne.n	8005a0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fb28 	bl	800402c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <xTaskRemoveFromEventList+0xb4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <xTaskRemoveFromEventList+0x5c>
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <xTaskRemoveFromEventList+0xb4>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <xTaskRemoveFromEventList+0xb8>)
 80059fe:	441a      	add	r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fab5 	bl	8003f76 <vListInsertEnd>
 8005a0c:	e005      	b.n	8005a1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4619      	mov	r1, r3
 8005a14:	480e      	ldr	r0, [pc, #56]	; (8005a50 <xTaskRemoveFromEventList+0xbc>)
 8005a16:	f7fe faae 	bl	8003f76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <xTaskRemoveFromEventList+0xc0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d905      	bls.n	8005a34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <xTaskRemoveFromEventList+0xc4>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e001      	b.n	8005a38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a38:	697b      	ldr	r3, [r7, #20]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000dc4 	.word	0x20000dc4
 8005a48:	20000da4 	.word	0x20000da4
 8005a4c:	200008cc 	.word	0x200008cc
 8005a50:	20000d5c 	.word	0x20000d5c
 8005a54:	200008c8 	.word	0x200008c8
 8005a58:	20000db0 	.word	0x20000db0

08005a5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <vTaskInternalSetTimeOutState+0x24>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <vTaskInternalSetTimeOutState+0x28>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000db4 	.word	0x20000db4
 8005a84:	20000da0 	.word	0x20000da0

08005a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	613b      	str	r3, [r7, #16]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005aca:	f000 ffc7 	bl	8006a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <xTaskCheckForTimeOut+0xbc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d102      	bne.n	8005aee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e023      	b.n	8005b36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <xTaskCheckForTimeOut+0xc0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d007      	beq.n	8005b0a <xTaskCheckForTimeOut+0x82>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d302      	bcc.n	8005b0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e015      	b.n	8005b36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d20b      	bcs.n	8005b2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ff9b 	bl	8005a5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	e004      	b.n	8005b36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b36:	f000 ffc1 	bl	8006abc <vPortExitCritical>

	return xReturn;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000da0 	.word	0x20000da0
 8005b48:	20000db4 	.word	0x20000db4

08005b4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <vTaskMissedYield+0x14>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000db0 	.word	0x20000db0

08005b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b6c:	f000 f852 	bl	8005c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b70:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <prvIdleTask+0x28>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d9f9      	bls.n	8005b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <prvIdleTask+0x2c>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b88:	e7f0      	b.n	8005b6c <prvIdleTask+0x8>
 8005b8a:	bf00      	nop
 8005b8c:	200008cc 	.word	0x200008cc
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	e00c      	b.n	8005bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <prvInitialiseTaskLists+0x60>)
 8005bac:	4413      	add	r3, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe f9b6 	bl	8003f20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b37      	cmp	r3, #55	; 0x37
 8005bbe:	d9ef      	bls.n	8005ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bc0:	480d      	ldr	r0, [pc, #52]	; (8005bf8 <prvInitialiseTaskLists+0x64>)
 8005bc2:	f7fe f9ad 	bl	8003f20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bc6:	480d      	ldr	r0, [pc, #52]	; (8005bfc <prvInitialiseTaskLists+0x68>)
 8005bc8:	f7fe f9aa 	bl	8003f20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bcc:	480c      	ldr	r0, [pc, #48]	; (8005c00 <prvInitialiseTaskLists+0x6c>)
 8005bce:	f7fe f9a7 	bl	8003f20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bd2:	480c      	ldr	r0, [pc, #48]	; (8005c04 <prvInitialiseTaskLists+0x70>)
 8005bd4:	f7fe f9a4 	bl	8003f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bd8:	480b      	ldr	r0, [pc, #44]	; (8005c08 <prvInitialiseTaskLists+0x74>)
 8005bda:	f7fe f9a1 	bl	8003f20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvInitialiseTaskLists+0x78>)
 8005be0:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <prvInitialiseTaskLists+0x64>)
 8005be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <prvInitialiseTaskLists+0x7c>)
 8005be6:	4a05      	ldr	r2, [pc, #20]	; (8005bfc <prvInitialiseTaskLists+0x68>)
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200008cc 	.word	0x200008cc
 8005bf8:	20000d2c 	.word	0x20000d2c
 8005bfc:	20000d40 	.word	0x20000d40
 8005c00:	20000d5c 	.word	0x20000d5c
 8005c04:	20000d70 	.word	0x20000d70
 8005c08:	20000d88 	.word	0x20000d88
 8005c0c:	20000d54 	.word	0x20000d54
 8005c10:	20000d58 	.word	0x20000d58

08005c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c1a:	e019      	b.n	8005c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c1c:	f000 ff1e 	bl	8006a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <prvCheckTasksWaitingTermination+0x50>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f9fd 	bl	800402c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <prvCheckTasksWaitingTermination+0x54>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	4a0b      	ldr	r2, [pc, #44]	; (8005c68 <prvCheckTasksWaitingTermination+0x54>)
 8005c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <prvCheckTasksWaitingTermination+0x58>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <prvCheckTasksWaitingTermination+0x58>)
 8005c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c46:	f000 ff39 	bl	8006abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f810 	bl	8005c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <prvCheckTasksWaitingTermination+0x58>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e1      	bne.n	8005c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000d70 	.word	0x20000d70
 8005c68:	20000d9c 	.word	0x20000d9c
 8005c6c:	20000d84 	.word	0x20000d84

08005c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3354      	adds	r3, #84	; 0x54
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f003 faa9 	bl	80091d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 f8a7 	bl	8006de4 <vPortFree>
				vPortFree( pxTCB );
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 f8a4 	bl	8006de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c9c:	e018      	b.n	8005cd0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d103      	bne.n	8005cb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f89b 	bl	8006de4 <vPortFree>
	}
 8005cae:	e00f      	b.n	8005cd0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d00a      	beq.n	8005cd0 <prvDeleteTCB+0x60>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	60fb      	str	r3, [r7, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <prvDeleteTCB+0x5e>
	}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cde:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <prvResetNextTaskUnblockTime+0x40>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <prvResetNextTaskUnblockTime+0x14>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <prvResetNextTaskUnblockTime+0x16>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvResetNextTaskUnblockTime+0x44>)
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cfa:	e008      	b.n	8005d0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <prvResetNextTaskUnblockTime+0x40>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4a04      	ldr	r2, [pc, #16]	; (8005d1c <prvResetNextTaskUnblockTime+0x44>)
 8005d0c:	6013      	str	r3, [r2, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	20000d54 	.word	0x20000d54
 8005d1c:	20000dbc 	.word	0x20000dbc

08005d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <xTaskGetSchedulerState+0x34>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	e008      	b.n	8005d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <xTaskGetSchedulerState+0x38>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	e001      	b.n	8005d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d42:	2300      	movs	r3, #0
 8005d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d46:	687b      	ldr	r3, [r7, #4]
	}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000da8 	.word	0x20000da8
 8005d58:	20000dc4 	.word	0x20000dc4

08005d5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d056      	beq.n	8005e20 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <xTaskPriorityInherit+0xd0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d246      	bcs.n	8005e0e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	db06      	blt.n	8005d96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d88:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <xTaskPriorityInherit+0xd0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6959      	ldr	r1, [r3, #20]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <xTaskPriorityInherit+0xd4>)
 8005da8:	4413      	add	r3, r2
 8005daa:	4299      	cmp	r1, r3
 8005dac:	d101      	bne.n	8005db2 <xTaskPriorityInherit+0x56>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xTaskPriorityInherit+0x58>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d022      	beq.n	8005dfe <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe f935 	bl	800402c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dc2:	4b1a      	ldr	r3, [pc, #104]	; (8005e2c <xTaskPriorityInherit+0xd0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <xTaskPriorityInherit+0xd8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d903      	bls.n	8005de0 <xTaskPriorityInherit+0x84>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <xTaskPriorityInherit+0xd8>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <xTaskPriorityInherit+0xd4>)
 8005dee:	441a      	add	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fe f8bd 	bl	8003f76 <vListInsertEnd>
 8005dfc:	e004      	b.n	8005e08 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <xTaskPriorityInherit+0xd0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e008      	b.n	8005e20 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <xTaskPriorityInherit+0xd0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d201      	bcs.n	8005e20 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e20:	68fb      	ldr	r3, [r7, #12]
	}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200008c8 	.word	0x200008c8
 8005e30:	200008cc 	.word	0x200008cc
 8005e34:	20000da4 	.word	0x20000da4

08005e38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d056      	beq.n	8005efc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e4e:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <xTaskPriorityDisinherit+0xd0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d00a      	beq.n	8005e6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	60fb      	str	r3, [r7, #12]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	1e5a      	subs	r2, r3, #1
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d02c      	beq.n	8005efc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d128      	bne.n	8005efc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe f8bc 	bl	800402c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <xTaskPriorityDisinherit+0xd4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d903      	bls.n	8005edc <xTaskPriorityDisinherit+0xa4>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <xTaskPriorityDisinherit+0xd4>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <xTaskPriorityDisinherit+0xd8>)
 8005eea:	441a      	add	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe f83f 	bl	8003f76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005efc:	697b      	ldr	r3, [r7, #20]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200008c8 	.word	0x200008c8
 8005f0c:	20000da4 	.word	0x20000da4
 8005f10:	200008cc 	.word	0x200008cc

08005f14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d06f      	beq.n	800600c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	60fb      	str	r3, [r7, #12]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d902      	bls.n	8005f5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	e002      	b.n	8005f60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d050      	beq.n	800600c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d14b      	bne.n	800600c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f74:	4b27      	ldr	r3, [pc, #156]	; (8006014 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d10a      	bne.n	8005f94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60bb      	str	r3, [r7, #8]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db04      	blt.n	8005fb2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	6959      	ldr	r1, [r3, #20]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4a15      	ldr	r2, [pc, #84]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	d101      	bne.n	8005fcc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01c      	beq.n	800600c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe f828 	bl	800402c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d903      	bls.n	8005ff0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4a0b      	ldr	r2, [pc, #44]	; (800601c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4a06      	ldr	r2, [pc, #24]	; (8006018 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005ffe:	441a      	add	r2, r3
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fd ffb5 	bl	8003f76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800600c:	bf00      	nop
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	200008c8 	.word	0x200008c8
 8006018:	200008cc 	.word	0x200008cc
 800601c:	20000da4 	.word	0x20000da4

08006020 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <pvTaskIncrementMutexHeldCount+0x24>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <pvTaskIncrementMutexHeldCount+0x24>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006032:	3201      	adds	r2, #1
 8006034:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006036:	4b03      	ldr	r3, [pc, #12]	; (8006044 <pvTaskIncrementMutexHeldCount+0x24>)
 8006038:	681b      	ldr	r3, [r3, #0]
	}
 800603a:	4618      	mov	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	200008c8 	.word	0x200008c8

08006048 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006052:	4b21      	ldr	r3, [pc, #132]	; (80060d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd ffe4 	bl	800402c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d10a      	bne.n	8006082 <prvAddCurrentTaskToDelayedList+0x3a>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4819      	ldr	r0, [pc, #100]	; (80060e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800607c:	f7fd ff7b 	bl	8003f76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006080:	e026      	b.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d209      	bcs.n	80060ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fd ff88 	bl	8003fbc <vListInsert>
}
 80060ac:	e010      	b.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <prvAddCurrentTaskToDelayedList+0x94>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fd ff7e 	bl	8003fbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d202      	bcs.n	80060d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060ca:	4a08      	ldr	r2, [pc, #32]	; (80060ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6013      	str	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000da0 	.word	0x20000da0
 80060dc:	200008c8 	.word	0x200008c8
 80060e0:	20000d88 	.word	0x20000d88
 80060e4:	20000d58 	.word	0x20000d58
 80060e8:	20000d54 	.word	0x20000d54
 80060ec:	20000dbc 	.word	0x20000dbc

080060f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060fa:	f000 fb5b 	bl	80067b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060fe:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <xTimerCreateTimerTask+0x80>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d021      	beq.n	800614a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800610e:	1d3a      	adds	r2, r7, #4
 8006110:	f107 0108 	add.w	r1, r7, #8
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	4618      	mov	r0, r3
 800611a:	f7fd fee7 	bl	8003eec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	9202      	str	r2, [sp, #8]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2302      	movs	r3, #2
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	460a      	mov	r2, r1
 8006130:	4910      	ldr	r1, [pc, #64]	; (8006174 <xTimerCreateTimerTask+0x84>)
 8006132:	4811      	ldr	r0, [pc, #68]	; (8006178 <xTimerCreateTimerTask+0x88>)
 8006134:	f7fe ffae 	bl	8005094 <xTaskCreateStatic>
 8006138:	4603      	mov	r3, r0
 800613a:	4a10      	ldr	r2, [pc, #64]	; (800617c <xTimerCreateTimerTask+0x8c>)
 800613c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <xTimerCreateTimerTask+0x8c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006146:	2301      	movs	r3, #1
 8006148:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	613b      	str	r3, [r7, #16]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006166:	697b      	ldr	r3, [r7, #20]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000df8 	.word	0x20000df8
 8006174:	0800938c 	.word	0x0800938c
 8006178:	080063bd 	.word	0x080063bd
 800617c:	20000dfc 	.word	0x20000dfc

08006180 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800618e:	2030      	movs	r0, #48	; 0x30
 8006190:	f000 fd64 	bl	8006c5c <pvPortMalloc>
 8006194:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f846 	bl	800623c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80061b8:	697b      	ldr	r3, [r7, #20]
	}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b08a      	sub	sp, #40	; 0x28
 80061c6:	af02      	add	r7, sp, #8
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80061d0:	2330      	movs	r3, #48	; 0x30
 80061d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b30      	cmp	r3, #48	; 0x30
 80061d8:	d00a      	beq.n	80061f0 <xTimerCreateStatic+0x2e>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	61bb      	str	r3, [r7, #24]
}
 80061ec:	bf00      	nop
 80061ee:	e7fe      	b.n	80061ee <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xTimerCreateStatic+0x4a>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	617b      	str	r3, [r7, #20]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f809 	bl	800623c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006232:	69fb      	ldr	r3, [r7, #28]
	}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	617b      	str	r3, [r7, #20]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d015      	beq.n	8006298 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800626c:	f000 faa2 	bl	80067b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	6a3a      	ldr	r2, [r7, #32]
 800628c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fd fe63 	bl	8003f5e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	623b      	str	r3, [r7, #32]
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <xTimerGenericCommand+0x98>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d02a      	beq.n	800632c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	dc18      	bgt.n	800631a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062e8:	f7ff fd1a 	bl	8005d20 <xTaskGetSchedulerState>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d109      	bne.n	8006306 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <xTimerGenericCommand+0x98>)
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f107 0110 	add.w	r1, r7, #16
 80062fa:	2300      	movs	r3, #0
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	f7fe f869 	bl	80043d4 <xQueueGenericSend>
 8006302:	6278      	str	r0, [r7, #36]	; 0x24
 8006304:	e012      	b.n	800632c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <xTimerGenericCommand+0x98>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f107 0110 	add.w	r1, r7, #16
 800630e:	2300      	movs	r3, #0
 8006310:	2200      	movs	r2, #0
 8006312:	f7fe f85f 	bl	80043d4 <xQueueGenericSend>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
 8006318:	e008      	b.n	800632c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800631a:	4b07      	ldr	r3, [pc, #28]	; (8006338 <xTimerGenericCommand+0x98>)
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f107 0110 	add.w	r1, r7, #16
 8006322:	2300      	movs	r3, #0
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	f7fe f953 	bl	80045d0 <xQueueGenericSendFromISR>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800632e:	4618      	mov	r0, r3
 8006330:	3728      	adds	r7, #40	; 0x28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000df8 	.word	0x20000df8

0800633c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af02      	add	r7, sp, #8
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006346:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <prvProcessExpiredTimer+0x7c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7fd fe69 	bl	800402c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d122      	bne.n	80063a8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	18d1      	adds	r1, r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	6978      	ldr	r0, [r7, #20]
 8006370:	f000 f8c8 	bl	8006504 <prvInsertTimerInActiveList>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800637a:	2300      	movs	r3, #0
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	2300      	movs	r3, #0
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	2100      	movs	r1, #0
 8006384:	6978      	ldr	r0, [r7, #20]
 8006386:	f7ff ff8b 	bl	80062a0 <xTimerGenericCommand>
 800638a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60fb      	str	r3, [r7, #12]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	4798      	blx	r3
}
 80063b0:	bf00      	nop
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000df0 	.word	0x20000df0

080063bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063c4:	f107 0308 	add.w	r3, r7, #8
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f857 	bl	800647c <prvGetNextExpireTime>
 80063ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f803 	bl	80063e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063da:	f000 f8d5 	bl	8006588 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063de:	e7f1      	b.n	80063c4 <prvTimerTask+0x8>

080063e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063ea:	f7ff f8a7 	bl	800553c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ee:	f107 0308 	add.w	r3, r7, #8
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f866 	bl	80064c4 <prvSampleTimeNow>
 80063f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d130      	bne.n	8006462 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <prvProcessTimerOrBlockTask+0x3c>
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	429a      	cmp	r2, r3
 800640c:	d806      	bhi.n	800641c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800640e:	f7ff f8a3 	bl	8005558 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ff91 	bl	800633c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800641a:	e024      	b.n	8006466 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006422:	4b13      	ldr	r3, [pc, #76]	; (8006470 <prvProcessTimerOrBlockTask+0x90>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <prvProcessTimerOrBlockTask+0x94>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	f7fe fdf3 	bl	800502c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006446:	f7ff f887 	bl	8005558 <xTaskResumeAll>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <prvProcessTimerOrBlockTask+0x98>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
}
 8006460:	e001      	b.n	8006466 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006462:	f7ff f879 	bl	8005558 <xTaskResumeAll>
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000df4 	.word	0x20000df4
 8006474:	20000df8 	.word	0x20000df8
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <prvGetNextExpireTime+0x44>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	bf0c      	ite	eq
 800648e:	2301      	moveq	r3, #1
 8006490:	2300      	movne	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <prvGetNextExpireTime+0x44>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e001      	b.n	80064b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000df0 	.word	0x20000df0

080064c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064cc:	f7ff f8e2 	bl	8005694 <xTaskGetTickCount>
 80064d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <prvSampleTimeNow+0x3c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d205      	bcs.n	80064e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064dc:	f000 f908 	bl	80066f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e002      	b.n	80064ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <prvSampleTimeNow+0x3c>)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000e00 	.word	0x20000e00

08006504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d812      	bhi.n	8006550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e01b      	b.n	8006576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800653e:	4b10      	ldr	r3, [pc, #64]	; (8006580 <prvInsertTimerInActiveList+0x7c>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fd fd37 	bl	8003fbc <vListInsert>
 800654e:	e012      	b.n	8006576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d206      	bcs.n	8006566 <prvInsertTimerInActiveList+0x62>
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e007      	b.n	8006576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <prvInsertTimerInActiveList+0x80>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3304      	adds	r3, #4
 800656e:	4619      	mov	r1, r3
 8006570:	4610      	mov	r0, r2
 8006572:	f7fd fd23 	bl	8003fbc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000df4 	.word	0x20000df4
 8006584:	20000df0 	.word	0x20000df0

08006588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	; 0x38
 800658c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800658e:	e09d      	b.n	80066cc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da18      	bge.n	80065c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006596:	1d3b      	adds	r3, r7, #4
 8006598:	3304      	adds	r3, #4
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61fb      	str	r3, [r7, #28]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065be:	6850      	ldr	r0, [r2, #4]
 80065c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c2:	6892      	ldr	r2, [r2, #8]
 80065c4:	4611      	mov	r1, r2
 80065c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	db7d      	blt.n	80066ca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fd fd24 	bl	800402c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065e4:	463b      	mov	r3, r7
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff ff6c 	bl	80064c4 <prvSampleTimeNow>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d86b      	bhi.n	80066cc <prvProcessReceivedCommands+0x144>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <prvProcessReceivedCommands+0x74>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006625 	.word	0x08006625
 8006600:	08006625 	.word	0x08006625
 8006604:	08006625 	.word	0x08006625
 8006608:	080066cd 	.word	0x080066cd
 800660c:	08006681 	.word	0x08006681
 8006610:	080066b9 	.word	0x080066b9
 8006614:	08006625 	.word	0x08006625
 8006618:	08006625 	.word	0x08006625
 800661c:	080066cd 	.word	0x080066cd
 8006620:	08006681 	.word	0x08006681
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	18d1      	adds	r1, r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006632:	f7ff ff67 	bl	8006504 <prvInsertTimerInActiveList>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d047      	beq.n	80066cc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006642:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d13f      	bne.n	80066cc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	441a      	add	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	2100      	movs	r1, #0
 800665c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665e:	f7ff fe1f 	bl	80062a0 <xTimerGenericCommand>
 8006662:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d130      	bne.n	80066cc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	61bb      	str	r3, [r7, #24]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	617b      	str	r3, [r7, #20]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	18d1      	adds	r1, r2, r3
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b2:	f7ff ff27 	bl	8006504 <prvInsertTimerInActiveList>
					break;
 80066b6:	e009      	b.n	80066cc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80066c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c4:	f000 fb8e 	bl	8006de4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066c8:	e000      	b.n	80066cc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <prvProcessReceivedCommands+0x164>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1d39      	adds	r1, r7, #4
 80066d2:	2200      	movs	r2, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f8a1 	bl	800481c <xQueueReceive>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f af57 	bne.w	8006590 <prvProcessReceivedCommands+0x8>
	}
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	3730      	adds	r7, #48	; 0x30
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20000df8 	.word	0x20000df8

080066f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066f6:	e045      	b.n	8006784 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066f8:	4b2c      	ldr	r3, [pc, #176]	; (80067ac <prvSwitchTimerLists+0xbc>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006702:	4b2a      	ldr	r3, [pc, #168]	; (80067ac <prvSwitchTimerLists+0xbc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fc8b 	bl	800402c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d12e      	bne.n	8006784 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	d90e      	bls.n	8006756 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006744:	4b19      	ldr	r3, [pc, #100]	; (80067ac <prvSwitchTimerLists+0xbc>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fd fc34 	bl	8003fbc <vListInsert>
 8006754:	e016      	b.n	8006784 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2300      	movs	r3, #0
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	2100      	movs	r1, #0
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fd9d 	bl	80062a0 <xTimerGenericCommand>
 8006766:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <prvSwitchTimerLists+0x94>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	603b      	str	r3, [r7, #0]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <prvSwitchTimerLists+0xbc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1b4      	bne.n	80066f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <prvSwitchTimerLists+0xbc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a04      	ldr	r2, [pc, #16]	; (80067ac <prvSwitchTimerLists+0xbc>)
 800679a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800679c:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	6013      	str	r3, [r2, #0]
}
 80067a2:	bf00      	nop
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000df0 	.word	0x20000df0
 80067b0:	20000df4 	.word	0x20000df4

080067b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067ba:	f000 f94f 	bl	8006a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067be:	4b15      	ldr	r3, [pc, #84]	; (8006814 <prvCheckForValidListAndQueue+0x60>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d120      	bne.n	8006808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067c6:	4814      	ldr	r0, [pc, #80]	; (8006818 <prvCheckForValidListAndQueue+0x64>)
 80067c8:	f7fd fbaa 	bl	8003f20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067cc:	4813      	ldr	r0, [pc, #76]	; (800681c <prvCheckForValidListAndQueue+0x68>)
 80067ce:	f7fd fba7 	bl	8003f20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <prvCheckForValidListAndQueue+0x6c>)
 80067d4:	4a10      	ldr	r2, [pc, #64]	; (8006818 <prvCheckForValidListAndQueue+0x64>)
 80067d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067d8:	4b12      	ldr	r3, [pc, #72]	; (8006824 <prvCheckForValidListAndQueue+0x70>)
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <prvCheckForValidListAndQueue+0x68>)
 80067dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067de:	2300      	movs	r3, #0
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <prvCheckForValidListAndQueue+0x74>)
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <prvCheckForValidListAndQueue+0x78>)
 80067e6:	2110      	movs	r1, #16
 80067e8:	200a      	movs	r0, #10
 80067ea:	f7fd fcb1 	bl	8004150 <xQueueGenericCreateStatic>
 80067ee:	4603      	mov	r3, r0
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <prvCheckForValidListAndQueue+0x60>)
 80067f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <prvCheckForValidListAndQueue+0x60>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <prvCheckForValidListAndQueue+0x60>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	490b      	ldr	r1, [pc, #44]	; (8006830 <prvCheckForValidListAndQueue+0x7c>)
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe fbc0 	bl	8004f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006808:	f000 f958 	bl	8006abc <vPortExitCritical>
}
 800680c:	bf00      	nop
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000df8 	.word	0x20000df8
 8006818:	20000dc8 	.word	0x20000dc8
 800681c:	20000ddc 	.word	0x20000ddc
 8006820:	20000df0 	.word	0x20000df0
 8006824:	20000df4 	.word	0x20000df4
 8006828:	20000ea4 	.word	0x20000ea4
 800682c:	20000e04 	.word	0x20000e04
 8006830:	08009394 	.word	0x08009394

08006834 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10a      	bne.n	800685c <pvTimerGetTimerID+0x28>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	60fb      	str	r3, [r7, #12]
}
 8006858:	bf00      	nop
 800685a:	e7fe      	b.n	800685a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800685c:	f000 f8fe 	bl	8006a5c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006866:	f000 f929 	bl	8006abc <vPortExitCritical>

	return pvReturn;
 800686a:	693b      	ldr	r3, [r7, #16]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b04      	subs	r3, #4
 8006884:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800688c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3b04      	subs	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 0201 	bic.w	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3b04      	subs	r3, #4
 80068a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068a4:	4a08      	ldr	r2, [pc, #32]	; (80068c8 <pxPortInitialiseStack+0x54>)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3b14      	subs	r3, #20
 80068ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3b20      	subs	r3, #32
 80068ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068bc:	68fb      	ldr	r3, [r7, #12]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr
 80068c8:	080068cd 	.word	0x080068cd

080068cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068d6:	4b12      	ldr	r3, [pc, #72]	; (8006920 <prvTaskExitError+0x54>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d00a      	beq.n	80068f6 <prvTaskExitError+0x2a>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <prvTaskExitError+0x28>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60bb      	str	r3, [r7, #8]
}
 8006908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800690a:	bf00      	nop
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0fc      	beq.n	800690c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	2000009c 	.word	0x2000009c
	...

08006930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <pxCurrentTCBConst2>)
 8006932:	6819      	ldr	r1, [r3, #0]
 8006934:	6808      	ldr	r0, [r1, #0]
 8006936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800693a:	f380 8809 	msr	PSP, r0
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8811 	msr	BASEPRI, r0
 800694a:	f04e 0e0d 	orr.w	lr, lr, #13
 800694e:	4770      	bx	lr

08006950 <pxCurrentTCBConst2>:
 8006950:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006958:	4806      	ldr	r0, [pc, #24]	; (8006974 <prvPortStartFirstTask+0x1c>)
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f380 8808 	msr	MSP, r0
 8006962:	b662      	cpsie	i
 8006964:	b661      	cpsie	f
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	df00      	svc	0
 8006970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006972:	bf00      	nop
 8006974:	e000ed08 	.word	0xe000ed08

08006978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800697e:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <xPortStartScheduler+0xd0>)
 8006980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	22ff      	movs	r2, #255	; 0xff
 800698e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	4b2a      	ldr	r3, [pc, #168]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069a6:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069a8:	2207      	movs	r2, #7
 80069aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ac:	e009      	b.n	80069c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069ae:	4b28      	ldr	r3, [pc, #160]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4a26      	ldr	r2, [pc, #152]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	2b80      	cmp	r3, #128	; 0x80
 80069cc:	d0ef      	beq.n	80069ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069ce:	4b20      	ldr	r3, [pc, #128]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1c3 0307 	rsb	r3, r3, #7
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d00a      	beq.n	80069f0 <xPortStartScheduler+0x78>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60bb      	str	r3, [r7, #8]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069f0:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069fa:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <xPortStartScheduler+0xd8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <xPortStartScheduler+0xd8>)
 8006a04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <xPortStartScheduler+0xdc>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a10      	ldr	r2, [pc, #64]	; (8006a54 <xPortStartScheduler+0xdc>)
 8006a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a1a:	4b0e      	ldr	r3, [pc, #56]	; (8006a54 <xPortStartScheduler+0xdc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a0d      	ldr	r2, [pc, #52]	; (8006a54 <xPortStartScheduler+0xdc>)
 8006a20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a26:	f000 f8b9 	bl	8006b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <xPortStartScheduler+0xe0>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a30:	f7ff ff92 	bl	8006958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a34:	f7fe fefa 	bl	800582c <vTaskSwitchContext>
	prvTaskExitError();
 8006a38:	f7ff ff48 	bl	80068cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	e000e400 	.word	0xe000e400
 8006a4c:	20000ef4 	.word	0x20000ef4
 8006a50:	20000ef8 	.word	0x20000ef8
 8006a54:	e000ed20 	.word	0xe000ed20
 8006a58:	2000009c 	.word	0x2000009c

08006a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	607b      	str	r3, [r7, #4]
}
 8006a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <vPortEnterCritical+0x58>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <vPortEnterCritical+0x58>)
 8006a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a80:	4b0c      	ldr	r3, [pc, #48]	; (8006ab4 <vPortEnterCritical+0x58>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d10f      	bne.n	8006aa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a88:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <vPortEnterCritical+0x5c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	603b      	str	r3, [r7, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vPortEnterCritical+0x4a>
	}
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000009c 	.word	0x2000009c
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <vPortExitCritical+0x4c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <vPortExitCritical+0x24>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	607b      	str	r3, [r7, #4]
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ae0:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <vPortExitCritical+0x4c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <vPortExitCritical+0x4c>)
 8006ae8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <vPortExitCritical+0x4c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <vPortExitCritical+0x42>
 8006af2:	2300      	movs	r3, #0
 8006af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f383 8811 	msr	BASEPRI, r3
}
 8006afc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr
 8006b08:	2000009c 	.word	0x2000009c
 8006b0c:	00000000 	.word	0x00000000

08006b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b10:	f3ef 8009 	mrs	r0, PSP
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <pxCurrentTCBConst>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b20:	6010      	str	r0, [r2, #0]
 8006b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b2a:	f380 8811 	msr	BASEPRI, r0
 8006b2e:	f7fe fe7d 	bl	800582c <vTaskSwitchContext>
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f380 8811 	msr	BASEPRI, r0
 8006b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b46:	f380 8809 	msr	PSP, r0
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	4770      	bx	lr

08006b50 <pxCurrentTCBConst>:
 8006b50:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop

08006b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	607b      	str	r3, [r7, #4]
}
 8006b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b72:	f7fe fd9d 	bl	80056b0 <xTaskIncrementTick>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <SysTick_Handler+0x40>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f383 8811 	msr	BASEPRI, r3
}
 8006b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <vPortSetupTimerInterrupt+0x30>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <vPortSetupTimerInterrupt+0x34>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bac:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <vPortSetupTimerInterrupt+0x38>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a09      	ldr	r2, [pc, #36]	; (8006bd8 <vPortSetupTimerInterrupt+0x3c>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <vPortSetupTimerInterrupt+0x40>)
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <vPortSetupTimerInterrupt+0x30>)
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	601a      	str	r2, [r3, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	e000e010 	.word	0xe000e010
 8006bd0:	e000e018 	.word	0xe000e018
 8006bd4:	20000000 	.word	0x20000000
 8006bd8:	10624dd3 	.word	0x10624dd3
 8006bdc:	e000e014 	.word	0xe000e014

08006be0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006be6:	f3ef 8305 	mrs	r3, IPSR
 8006bea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b0f      	cmp	r3, #15
 8006bf0:	d914      	bls.n	8006c1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bf2:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <vPortValidateInterruptPriority+0x6c>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bfc:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <vPortValidateInterruptPriority+0x70>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	7afa      	ldrb	r2, [r7, #11]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d20a      	bcs.n	8006c1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	607b      	str	r3, [r7, #4]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <vPortValidateInterruptPriority+0x74>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <vPortValidateInterruptPriority+0x78>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d90a      	bls.n	8006c42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	603b      	str	r3, [r7, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <vPortValidateInterruptPriority+0x60>
	}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr
 8006c4c:	e000e3f0 	.word	0xe000e3f0
 8006c50:	20000ef4 	.word	0x20000ef4
 8006c54:	e000ed0c 	.word	0xe000ed0c
 8006c58:	20000ef8 	.word	0x20000ef8

08006c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c68:	f7fe fc68 	bl	800553c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c6c:	4b58      	ldr	r3, [pc, #352]	; (8006dd0 <pvPortMalloc+0x174>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c74:	f000 f910 	bl	8006e98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c78:	4b56      	ldr	r3, [pc, #344]	; (8006dd4 <pvPortMalloc+0x178>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 808e 	bne.w	8006da2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01d      	beq.n	8006cc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <pvPortMalloc+0x6c>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	617b      	str	r3, [r7, #20]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d069      	beq.n	8006da2 <pvPortMalloc+0x146>
 8006cce:	4b42      	ldr	r3, [pc, #264]	; (8006dd8 <pvPortMalloc+0x17c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d864      	bhi.n	8006da2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cd8:	4b40      	ldr	r3, [pc, #256]	; (8006ddc <pvPortMalloc+0x180>)
 8006cda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cdc:	4b3f      	ldr	r3, [pc, #252]	; (8006ddc <pvPortMalloc+0x180>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ce2:	e004      	b.n	8006cee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d903      	bls.n	8006d00 <pvPortMalloc+0xa4>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f1      	bne.n	8006ce4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d00:	4b33      	ldr	r3, [pc, #204]	; (8006dd0 <pvPortMalloc+0x174>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d04b      	beq.n	8006da2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	4413      	add	r3, r2
 8006d12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	2308      	movs	r3, #8
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d91f      	bls.n	8006d6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <pvPortMalloc+0xf8>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	613b      	str	r3, [r7, #16]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1ad2      	subs	r2, r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d66:	69b8      	ldr	r0, [r7, #24]
 8006d68:	f000 f8f8 	bl	8006f5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <pvPortMalloc+0x17c>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	4a18      	ldr	r2, [pc, #96]	; (8006dd8 <pvPortMalloc+0x17c>)
 8006d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d7a:	4b17      	ldr	r3, [pc, #92]	; (8006dd8 <pvPortMalloc+0x17c>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b18      	ldr	r3, [pc, #96]	; (8006de0 <pvPortMalloc+0x184>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d203      	bcs.n	8006d8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <pvPortMalloc+0x17c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <pvPortMalloc+0x184>)
 8006d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <pvPortMalloc+0x178>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006da2:	f7fe fbd9 	bl	8005558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <pvPortMalloc+0x16a>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <pvPortMalloc+0x168>
	return pvReturn;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3728      	adds	r7, #40	; 0x28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20002304 	.word	0x20002304
 8006dd4:	20002310 	.word	0x20002310
 8006dd8:	20002308 	.word	0x20002308
 8006ddc:	200022fc 	.word	0x200022fc
 8006de0:	2000230c 	.word	0x2000230c

08006de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d048      	beq.n	8006e88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006df6:	2308      	movs	r3, #8
 8006df8:	425b      	negs	r3, r3
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	4b21      	ldr	r3, [pc, #132]	; (8006e90 <vPortFree+0xac>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <vPortFree+0x44>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60fb      	str	r3, [r7, #12]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <vPortFree+0x62>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60bb      	str	r3, [r7, #8]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	4b11      	ldr	r3, [pc, #68]	; (8006e90 <vPortFree+0xac>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d019      	beq.n	8006e88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d115      	bne.n	8006e88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <vPortFree+0xac>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	401a      	ands	r2, r3
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e6c:	f7fe fb66 	bl	800553c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <vPortFree+0xb0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4413      	add	r3, r2
 8006e7a:	4a06      	ldr	r2, [pc, #24]	; (8006e94 <vPortFree+0xb0>)
 8006e7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e7e:	6938      	ldr	r0, [r7, #16]
 8006e80:	f000 f86c 	bl	8006f5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e84:	f7fe fb68 	bl	8005558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20002310 	.word	0x20002310
 8006e94:	20002308 	.word	0x20002308

08006e98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ea2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea4:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <prvHeapInit+0xac>)
 8006ea6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00c      	beq.n	8006ecc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3307      	adds	r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0307 	bic.w	r3, r3, #7
 8006ebe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <prvHeapInit+0xac>)
 8006ec8:	4413      	add	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <prvHeapInit+0xb0>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ed6:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <prvHeapInit+0xb0>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0307 	bic.w	r3, r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <prvHeapInit+0xb4>)
 8006ef8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <prvHeapInit+0xb4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2200      	movs	r2, #0
 8006f00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <prvHeapInit+0xb4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	1ad2      	subs	r2, r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <prvHeapInit+0xb4>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a0a      	ldr	r2, [pc, #40]	; (8006f50 <prvHeapInit+0xb8>)
 8006f26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	4a09      	ldr	r2, [pc, #36]	; (8006f54 <prvHeapInit+0xbc>)
 8006f2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f30:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <prvHeapInit+0xc0>)
 8006f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f36:	601a      	str	r2, [r3, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000efc 	.word	0x20000efc
 8006f48:	200022fc 	.word	0x200022fc
 8006f4c:	20002304 	.word	0x20002304
 8006f50:	2000230c 	.word	0x2000230c
 8006f54:	20002308 	.word	0x20002308
 8006f58:	20002310 	.word	0x20002310

08006f5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f64:	4b27      	ldr	r3, [pc, #156]	; (8007004 <prvInsertBlockIntoFreeList+0xa8>)
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e002      	b.n	8006f70 <prvInsertBlockIntoFreeList+0x14>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d8f7      	bhi.n	8006f6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d108      	bne.n	8006f9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	441a      	add	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d118      	bne.n	8006fe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <prvInsertBlockIntoFreeList+0xac>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d00d      	beq.n	8006fda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	441a      	add	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e008      	b.n	8006fec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <prvInsertBlockIntoFreeList+0xac>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e003      	b.n	8006fec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d002      	beq.n	8006ffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr
 8007004:	200022fc 	.word	0x200022fc
 8007008:	20002304 	.word	0x20002304

0800700c <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	22ff      	movs	r2, #255	; 0xff
 8007020:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 8007022:	e01c      	b.n	800705e <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	799a      	ldrb	r2, [r3, #6]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	4053      	eors	r3, r2
 8007032:	b2db      	uxtb	r3, r3
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	79da      	ldrb	r2, [r3, #7]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	895b      	ldrh	r3, [r3, #10]
 8007042:	4619      	mov	r1, r3
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <slave_crc16+0x70>)
 8007046:	5c5b      	ldrb	r3, [r3, r1]
 8007048:	4053      	eors	r3, r2
 800704a:	b2da      	uxtb	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	895b      	ldrh	r3, [r3, #10]
 8007054:	461a      	mov	r2, r3
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <slave_crc16+0x74>)
 8007058:	5c9a      	ldrb	r2, [r3, r2]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	891b      	ldrh	r3, [r3, #8]
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	b291      	uxth	r1, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	8111      	strh	r1, [r2, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1da      	bne.n	8007024 <slave_crc16+0x18>
    }
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	08009444 	.word	0x08009444
 8007080:	08009544 	.word	0x08009544

08007084 <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007092:	2b07      	cmp	r3, #7
 8007094:	d905      	bls.n	80070a2 <slave_validate_cmd+0x1e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7b1a      	ldrb	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d002      	beq.n	80070a8 <slave_validate_cmd+0x24>
    {
        return osError;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	e026      	b.n	80070f6 <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80070ae:	3b02      	subs	r3, #2
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	330c      	adds	r3, #12
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ffa5 	bl	800700c <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	799a      	ldrb	r2, [r3, #6]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80070cc:	3b02      	subs	r3, #2
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	440b      	add	r3, r1
 80070d2:	7b1b      	ldrb	r3, [r3, #12]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d10a      	bne.n	80070ee <slave_validate_cmd+0x6a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	79da      	ldrb	r2, [r3, #7]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80070e2:	3b01      	subs	r3, #1
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	440b      	add	r3, r1
 80070e8:	7b1b      	ldrb	r3, [r3, #12]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d002      	beq.n	80070f4 <slave_validate_cmd+0x70>
    {
        return osError;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	e000      	b.n	80070f6 <slave_validate_cmd+0x72>
    }
    return osOK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7b9b      	ldrb	r3, [r3, #14]
 800710a:	b29b      	uxth	r3, r3
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7bdb      	ldrb	r3, [r3, #15]
 8007114:	b29b      	uxth	r3, r3
 8007116:	4413      	add	r3, r2
 8007118:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7c1b      	ldrb	r3, [r3, #16]
 800711e:	b29b      	uxth	r3, r3
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7c5b      	ldrb	r3, [r3, #17]
 8007128:	b29b      	uxth	r3, r3
 800712a:	4413      	add	r3, r2
 800712c:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	b291      	uxth	r1, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007146:	4619      	mov	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	791a      	ldrb	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	440b      	add	r3, r1
 8007150:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007154:	8a7a      	ldrh	r2, [r7, #18]
 8007156:	8a3b      	ldrh	r3, [r7, #16]
 8007158:	4413      	add	r3, r2
 800715a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715e:	dd20      	ble.n	80071a2 <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7b5a      	ldrb	r2, [r3, #13]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800716a:	1c59      	adds	r1, r3, #1
 800716c:	b288      	uxth	r0, r1
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007174:	4619      	mov	r1, r3
 8007176:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800717a:	b2da      	uxtb	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	440b      	add	r3, r1
 8007180:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	b291      	uxth	r1, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007194:	461a      	mov	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	2202      	movs	r2, #2
 800719c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 80071a0:	e072      	b.n	8007288 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 80071a2:	8a3b      	ldrh	r3, [r7, #16]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <slave_handle_read_discs+0xb8>
 80071ae:	8a3b      	ldrh	r3, [r7, #16]
 80071b0:	08db      	lsrs	r3, r3, #3
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	e004      	b.n	80071c0 <slave_handle_read_discs+0xc2>
 80071b6:	8a3b      	ldrh	r3, [r7, #16]
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3301      	adds	r3, #1
 80071be:	b29b      	uxth	r3, r3
 80071c0:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	b291      	uxth	r1, r2
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80071d6:	4619      	mov	r1, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7b5a      	ldrb	r2, [r3, #13]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	440b      	add	r3, r1
 80071e0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	b291      	uxth	r1, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80071f4:	4619      	mov	r1, r3
 80071f6:	89fb      	ldrh	r3, [r7, #14]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	440b      	add	r3, r1
 80071fe:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8007202:	2300      	movs	r3, #0
 8007204:	82bb      	strh	r3, [r7, #20]
 8007206:	e03a      	b.n	800727e <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 8007208:	8abb      	ldrh	r3, [r7, #20]
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 8007214:	2300      	movs	r3, #0
 8007216:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 8007218:	8aba      	ldrh	r2, [r7, #20]
 800721a:	8a3b      	ldrh	r3, [r7, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d214      	bcs.n	800724a <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007226:	8a79      	ldrh	r1, [r7, #18]
 8007228:	8abb      	ldrh	r3, [r7, #20]
 800722a:	440b      	add	r3, r1
 800722c:	5cd3      	ldrb	r3, [r2, r3]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d106      	bne.n	8007240 <slave_handle_read_discs+0x142>
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800723c:	b2db      	uxtb	r3, r3
 800723e:	e002      	b.n	8007246 <slave_handle_read_discs+0x148>
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	75fb      	strb	r3, [r7, #23]
 8007248:	e002      	b.n	8007250 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 8007250:	8abb      	ldrh	r3, [r7, #20]
 8007252:	3301      	adds	r3, #1
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10d      	bne.n	8007278 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	b291      	uxth	r1, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4413      	add	r3, r2
 8007272:	7dfa      	ldrb	r2, [r7, #23]
 8007274:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8007278:	8abb      	ldrh	r3, [r7, #20]
 800727a:	3301      	adds	r3, #1
 800727c:	82bb      	strh	r3, [r7, #20]
 800727e:	8aba      	ldrh	r2, [r7, #20]
 8007280:	89fb      	ldrh	r3, [r7, #14]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	429a      	cmp	r2, r3
 8007286:	dbbf      	blt.n	8007208 <slave_handle_read_discs+0x10a>
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr

08007292 <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 8007292:	b480      	push	{r7}
 8007294:	b087      	sub	sp, #28
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7b9b      	ldrb	r3, [r3, #14]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7bdb      	ldrb	r3, [r3, #15]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7c1b      	ldrb	r3, [r3, #16]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7c5b      	ldrb	r3, [r3, #17]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	4413      	add	r3, r2
 80072c0:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	b291      	uxth	r1, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80072da:	4619      	mov	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	791a      	ldrb	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	440b      	add	r3, r1
 80072e4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 80072e8:	8a7a      	ldrh	r2, [r7, #18]
 80072ea:	8a3b      	ldrh	r3, [r7, #16]
 80072ec:	4413      	add	r3, r2
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	dd20      	ble.n	8007336 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7b5a      	ldrb	r2, [r3, #13]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80072fe:	1c59      	adds	r1, r3, #1
 8007300:	b288      	uxth	r0, r1
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007308:	4619      	mov	r1, r3
 800730a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800730e:	b2da      	uxtb	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	440b      	add	r3, r1
 8007314:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	b291      	uxth	r1, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	2202      	movs	r2, #2
 8007330:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 8007334:	e074      	b.n	8007420 <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 8007336:	8a3b      	ldrh	r3, [r7, #16]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <slave_handle_read_coils+0xb8>
 8007342:	8a3b      	ldrh	r3, [r7, #16]
 8007344:	08db      	lsrs	r3, r3, #3
 8007346:	b29b      	uxth	r3, r3
 8007348:	e004      	b.n	8007354 <slave_handle_read_coils+0xc2>
 800734a:	8a3b      	ldrh	r3, [r7, #16]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	b29b      	uxth	r3, r3
 8007350:	3301      	adds	r3, #1
 8007352:	b29b      	uxth	r3, r3
 8007354:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	b291      	uxth	r1, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800736a:	4619      	mov	r1, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7b5a      	ldrb	r2, [r3, #13]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	440b      	add	r3, r1
 8007374:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	b291      	uxth	r1, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007388:	4619      	mov	r1, r3
 800738a:	89fb      	ldrh	r3, [r7, #14]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	440b      	add	r3, r1
 8007392:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	82bb      	strh	r3, [r7, #20]
 800739a:	e03c      	b.n	8007416 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 800739c:	8abb      	ldrh	r3, [r7, #20]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 80073a8:	2300      	movs	r3, #0
 80073aa:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 80073ac:	8aba      	ldrh	r2, [r7, #20]
 80073ae:	8a3b      	ldrh	r3, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d216      	bcs.n	80073e2 <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80073ba:	8a79      	ldrh	r1, [r7, #18]
 80073bc:	8abb      	ldrh	r3, [r7, #20]
 80073be:	440b      	add	r3, r1
 80073c0:	4413      	add	r3, r2
 80073c2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d106      	bne.n	80073d8 <slave_handle_read_coils+0x146>
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	e002      	b.n	80073de <slave_handle_read_coils+0x14c>
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	75fb      	strb	r3, [r7, #23]
 80073e0:	e002      	b.n	80073e8 <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 80073e8:	8abb      	ldrh	r3, [r7, #20]
 80073ea:	3301      	adds	r3, #1
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10d      	bne.n	8007410 <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	b291      	uxth	r1, r2
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007404:	461a      	mov	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	7dfa      	ldrb	r2, [r7, #23]
 800740c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8007410:	8abb      	ldrh	r3, [r7, #20]
 8007412:	3301      	adds	r3, #1
 8007414:	82bb      	strh	r3, [r7, #20]
 8007416:	8aba      	ldrh	r2, [r7, #20]
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	429a      	cmp	r2, r3
 800741e:	dbbd      	blt.n	800739c <slave_handle_read_coils+0x10a>
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr

0800742a <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7b9b      	ldrb	r3, [r3, #14]
 8007436:	b29b      	uxth	r3, r3
 8007438:	021b      	lsls	r3, r3, #8
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7bdb      	ldrb	r3, [r3, #15]
 8007440:	b29b      	uxth	r3, r3
 8007442:	4413      	add	r3, r2
 8007444:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	7c1b      	ldrb	r3, [r3, #16]
 800744a:	b29b      	uxth	r3, r3
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7c5b      	ldrb	r3, [r3, #17]
 8007454:	b29b      	uxth	r3, r3
 8007456:	4413      	add	r3, r2
 8007458:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	b291      	uxth	r1, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007472:	4619      	mov	r1, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	791a      	ldrb	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	440b      	add	r3, r1
 800747c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007480:	89ba      	ldrh	r2, [r7, #12]
 8007482:	897b      	ldrh	r3, [r7, #10]
 8007484:	4413      	add	r3, r2
 8007486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748a:	dd20      	ble.n	80074ce <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7b5a      	ldrb	r2, [r3, #13]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007496:	1c59      	adds	r1, r3, #1
 8007498:	b288      	uxth	r0, r1
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80074a0:	4619      	mov	r1, r3
 80074a2:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	440b      	add	r3, r1
 80074ac:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	b291      	uxth	r1, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4413      	add	r3, r2
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 80074cc:	e05b      	b.n	8007586 <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	b291      	uxth	r1, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80074de:	4619      	mov	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7b5a      	ldrb	r2, [r3, #13]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	440b      	add	r3, r1
 80074e8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 80074ec:	897b      	ldrh	r3, [r7, #10]
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074f6:	1c59      	adds	r1, r3, #1
 80074f8:	b288      	uxth	r0, r1
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007500:	4619      	mov	r1, r3
 8007502:	0053      	lsls	r3, r2, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	440b      	add	r3, r1
 800750a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 800750e:	2300      	movs	r3, #0
 8007510:	81fb      	strh	r3, [r7, #14]
 8007512:	e034      	b.n	800757e <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800751a:	89f9      	ldrh	r1, [r7, #14]
 800751c:	89ba      	ldrh	r2, [r7, #12]
 800751e:	440a      	add	r2, r1
 8007520:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007524:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007528:	121b      	asrs	r3, r3, #8
 800752a:	b218      	sxth	r0, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	b291      	uxth	r1, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800753c:	4619      	mov	r1, r3
 800753e:	b2c2      	uxtb	r2, r0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	440b      	add	r3, r1
 8007544:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800754e:	89f9      	ldrh	r1, [r7, #14]
 8007550:	89ba      	ldrh	r2, [r7, #12]
 8007552:	440a      	add	r2, r1
 8007554:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007558:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	b291      	uxth	r1, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800756c:	4619      	mov	r1, r3
 800756e:	b2c2      	uxtb	r2, r0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	440b      	add	r3, r1
 8007574:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8007578:	89fb      	ldrh	r3, [r7, #14]
 800757a:	3301      	adds	r3, #1
 800757c:	81fb      	strh	r3, [r7, #14]
 800757e:	89fa      	ldrh	r2, [r7, #14]
 8007580:	897b      	ldrh	r3, [r7, #10]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3c6      	bcc.n	8007514 <slave_handle_read_input_regs+0xea>
}
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7b9b      	ldrb	r3, [r3, #14]
 800759c:	b29b      	uxth	r3, r3
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	7bdb      	ldrb	r3, [r3, #15]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7c1b      	ldrb	r3, [r3, #16]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	7c5b      	ldrb	r3, [r3, #17]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	4413      	add	r3, r2
 80075be:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	b291      	uxth	r1, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80075d8:	4619      	mov	r1, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	791a      	ldrb	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	440b      	add	r3, r1
 80075e2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 80075e6:	89ba      	ldrh	r2, [r7, #12]
 80075e8:	897b      	ldrh	r3, [r7, #10]
 80075ea:	4413      	add	r3, r2
 80075ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f0:	dd20      	ble.n	8007634 <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7b5a      	ldrb	r2, [r3, #13]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80075fc:	1c59      	adds	r1, r3, #1
 80075fe:	b288      	uxth	r0, r1
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007606:	4619      	mov	r1, r3
 8007608:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800760c:	b2da      	uxtb	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	440b      	add	r3, r1
 8007612:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	b291      	uxth	r1, r2
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	2202      	movs	r2, #2
 800762e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 8007632:	e05b      	b.n	80076ec <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	b291      	uxth	r1, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007644:	4619      	mov	r1, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7b5a      	ldrb	r2, [r3, #13]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	440b      	add	r3, r1
 800764e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 8007652:	897b      	ldrh	r3, [r7, #10]
 8007654:	b2da      	uxtb	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	b288      	uxth	r0, r1
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007666:	4619      	mov	r1, r3
 8007668:	0053      	lsls	r3, r2, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	440b      	add	r3, r1
 8007670:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8007674:	2300      	movs	r3, #0
 8007676:	81fb      	strh	r3, [r7, #14]
 8007678:	e034      	b.n	80076e4 <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007680:	89f9      	ldrh	r1, [r7, #14]
 8007682:	89ba      	ldrh	r2, [r7, #12]
 8007684:	440a      	add	r2, r1
 8007686:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800768a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800768e:	121b      	asrs	r3, r3, #8
 8007690:	b218      	sxth	r0, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	b291      	uxth	r1, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076a2:	4619      	mov	r1, r3
 80076a4:	b2c2      	uxtb	r2, r0
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	440b      	add	r3, r1
 80076aa:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80076b4:	89f9      	ldrh	r1, [r7, #14]
 80076b6:	89ba      	ldrh	r2, [r7, #12]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80076be:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	b291      	uxth	r1, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076d2:	4619      	mov	r1, r3
 80076d4:	b2c2      	uxtb	r2, r0
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	440b      	add	r3, r1
 80076da:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 80076de:	89fb      	ldrh	r3, [r7, #14]
 80076e0:	3301      	adds	r3, #1
 80076e2:	81fb      	strh	r3, [r7, #14]
 80076e4:	89fa      	ldrh	r2, [r7, #14]
 80076e6:	897b      	ldrh	r3, [r7, #10]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d3c6      	bcc.n	800767a <slave_handle_read_holding_regs+0xea>
}
 80076ec:	bf00      	nop
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr

080076f6 <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	b291      	uxth	r1, r2
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800770e:	4619      	mov	r1, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7b5a      	ldrb	r2, [r3, #13]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	440b      	add	r3, r1
 8007718:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	b291      	uxth	r1, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800772c:	4619      	mov	r1, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7b9a      	ldrb	r2, [r3, #14]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	440b      	add	r3, r1
 8007736:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	b291      	uxth	r1, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800774a:	4619      	mov	r1, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7bda      	ldrb	r2, [r3, #15]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	440b      	add	r3, r1
 8007754:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	b291      	uxth	r1, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007768:	4619      	mov	r1, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7c1a      	ldrb	r2, [r3, #16]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	440b      	add	r3, r1
 8007772:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	b291      	uxth	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007786:	4619      	mov	r1, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7c5a      	ldrb	r2, [r3, #17]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	440b      	add	r3, r1
 8007790:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr

0800779e <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7b9b      	ldrb	r3, [r3, #14]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7bdb      	ldrb	r3, [r3, #15]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4413      	add	r3, r2
 80077b8:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	b291      	uxth	r1, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80077d2:	4619      	mov	r1, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	791a      	ldrb	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	440b      	add	r3, r1
 80077dc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 80077e0:	89fb      	ldrh	r3, [r7, #14]
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d920      	bls.n	8007828 <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7b5a      	ldrb	r2, [r3, #13]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80077f0:	1c59      	adds	r1, r3, #1
 80077f2:	b288      	uxth	r0, r1
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80077fa:	4619      	mov	r1, r3
 80077fc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	440b      	add	r3, r1
 8007806:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	b291      	uxth	r1, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	2202      	movs	r2, #2
 8007822:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 8007826:	e011      	b.n	800784c <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ff64 	bl	80076f6 <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	7c1b      	ldrb	r3, [r3, #16]
 8007832:	2bff      	cmp	r3, #255	; 0xff
 8007834:	bf0c      	ite	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	2300      	movne	r3, #0
 800783a:	b2d9      	uxtb	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007842:	89fb      	ldrh	r3, [r7, #14]
 8007844:	4413      	add	r3, r2
 8007846:	460a      	mov	r2, r1
 8007848:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7b9b      	ldrb	r3, [r3, #14]
 8007860:	b29b      	uxth	r3, r3
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7bdb      	ldrb	r3, [r3, #15]
 800786a:	b29b      	uxth	r3, r3
 800786c:	4413      	add	r3, r2
 800786e:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7c1b      	ldrb	r3, [r3, #16]
 8007874:	b29b      	uxth	r3, r3
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7c5b      	ldrb	r3, [r3, #17]
 800787e:	b29b      	uxth	r3, r3
 8007880:	4413      	add	r3, r2
 8007882:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	b291      	uxth	r1, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800789c:	4619      	mov	r1, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	791a      	ldrb	r2, [r3, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	440b      	add	r3, r1
 80078a6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 80078aa:	89ba      	ldrh	r2, [r7, #12]
 80078ac:	897b      	ldrh	r3, [r7, #10]
 80078ae:	4413      	add	r3, r2
 80078b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b4:	dd20      	ble.n	80078f8 <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7b5a      	ldrb	r2, [r3, #13]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80078c0:	1c59      	adds	r1, r3, #1
 80078c2:	b288      	uxth	r0, r1
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80078ca:	4619      	mov	r1, r3
 80078cc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	440b      	add	r3, r1
 80078d6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	b291      	uxth	r1, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80078ea:	461a      	mov	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4413      	add	r3, r2
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 80078f6:	e027      	b.n	8007948 <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff fefc 	bl	80076f6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 80078fe:	2300      	movs	r3, #0
 8007900:	81fb      	strh	r3, [r7, #14]
 8007902:	e01d      	b.n	8007940 <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	08db      	lsrs	r3, r3, #3
 8007908:	b29b      	uxth	r3, r3
 800790a:	3307      	adds	r3, #7
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	7b1b      	ldrb	r3, [r3, #12]
 8007912:	461a      	mov	r2, r3
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	fa42 f303 	asr.w	r3, r2, r3
 800791e:	b2d9      	uxtb	r1, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007926:	89b8      	ldrh	r0, [r7, #12]
 8007928:	89fb      	ldrh	r3, [r7, #14]
 800792a:	4403      	add	r3, r0
 800792c:	f001 0101 	and.w	r1, r1, #1
 8007930:	b2c9      	uxtb	r1, r1
 8007932:	4413      	add	r3, r2
 8007934:	460a      	mov	r2, r1
 8007936:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 800793a:	89fb      	ldrh	r3, [r7, #14]
 800793c:	3301      	adds	r3, #1
 800793e:	81fb      	strh	r3, [r7, #14]
 8007940:	89fa      	ldrh	r2, [r7, #14]
 8007942:	897b      	ldrh	r3, [r7, #10]
 8007944:	429a      	cmp	r2, r3
 8007946:	d3dd      	bcc.n	8007904 <slave_handle_write_multi_coils+0xb0>
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7b9b      	ldrb	r3, [r3, #14]
 800795c:	b29b      	uxth	r3, r3
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7bdb      	ldrb	r3, [r3, #15]
 8007966:	b29b      	uxth	r3, r3
 8007968:	4413      	add	r3, r2
 800796a:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	b291      	uxth	r1, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007984:	4619      	mov	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	791a      	ldrb	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	440b      	add	r3, r1
 800798e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 8007992:	89fb      	ldrh	r3, [r7, #14]
 8007994:	2bff      	cmp	r3, #255	; 0xff
 8007996:	d920      	bls.n	80079da <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7b5a      	ldrb	r2, [r3, #13]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	b288      	uxth	r0, r1
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80079ac:	4619      	mov	r1, r3
 80079ae:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	440b      	add	r3, r1
 80079b8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	b291      	uxth	r1, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 80079d8:	e015      	b.n	8007a06 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff fe8b 	bl	80076f6 <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7c1b      	ldrb	r3, [r3, #16]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7c5b      	ldrb	r3, [r3, #17]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4413      	add	r3, r2
 80079f2:	b299      	uxth	r1, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80079fa:	89fa      	ldrh	r2, [r7, #14]
 80079fc:	b209      	sxth	r1, r1
 80079fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007a02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7b9b      	ldrb	r3, [r3, #14]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7bdb      	ldrb	r3, [r3, #15]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	7c1b      	ldrb	r3, [r3, #16]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7c5b      	ldrb	r3, [r3, #17]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	b291      	uxth	r1, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007a56:	4619      	mov	r1, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	791a      	ldrb	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	440b      	add	r3, r1
 8007a60:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007a64:	89ba      	ldrh	r2, [r7, #12]
 8007a66:	897b      	ldrh	r3, [r7, #10]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6e:	dd20      	ble.n	8007ab2 <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7b5a      	ldrb	r2, [r3, #13]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007a7a:	1c59      	adds	r1, r3, #1
 8007a7c:	b288      	uxth	r0, r1
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007a84:	4619      	mov	r1, r3
 8007a86:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	440b      	add	r3, r1
 8007a90:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	b291      	uxth	r1, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 8007ab0:	e029      	b.n	8007b06 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fe1f 	bl	80076f6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	81fb      	strh	r3, [r7, #14]
 8007abc:	e01f      	b.n	8007afe <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	3307      	adds	r3, #7
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	7b1b      	ldrb	r3, [r3, #12]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	021b      	lsls	r3, r3, #8
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	440b      	add	r3, r1
 8007ada:	7b1b      	ldrb	r3, [r3, #12]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	4413      	add	r3, r2
 8007ae0:	b298      	uxth	r0, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ae8:	89b9      	ldrh	r1, [r7, #12]
 8007aea:	89fa      	ldrh	r2, [r7, #14]
 8007aec:	440a      	add	r2, r1
 8007aee:	b201      	sxth	r1, r0
 8007af0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8007af4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 8007af8:	89fb      	ldrh	r3, [r7, #14]
 8007afa:	3301      	adds	r3, #1
 8007afc:	81fb      	strh	r3, [r7, #14]
 8007afe:	89fa      	ldrh	r2, [r7, #14]
 8007b00:	897b      	ldrh	r3, [r7, #10]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d3db      	bcc.n	8007abe <slave_handle_write_multi_holding_regs+0xb0>
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <slave_response>:

static void slave_response(modbus_slave *slave)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fab4 	bl	8007084 <slave_validate_cmd>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f040 80b2 	bne.w	8007c88 <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7b5a      	ldrb	r2, [r3, #13]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	795b      	ldrb	r3, [r3, #5]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d103      	bne.n	8007b3c <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff fae2 	bl	80070fe <slave_handle_read_discs>
 8007b3a:	e06a      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	795b      	ldrb	r3, [r3, #5]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d103      	bne.n	8007b4c <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fba4 	bl	8007292 <slave_handle_read_coils>
 8007b4a:	e062      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	795b      	ldrb	r3, [r3, #5]
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d103      	bne.n	8007b5c <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fc68 	bl	800742a <slave_handle_read_input_regs>
 8007b5a:	e05a      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	795b      	ldrb	r3, [r3, #5]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d103      	bne.n	8007b6c <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fd13 	bl	8007590 <slave_handle_read_holding_regs>
 8007b6a:	e052      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	795b      	ldrb	r3, [r3, #5]
 8007b70:	2b05      	cmp	r3, #5
 8007b72:	d103      	bne.n	8007b7c <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fe12 	bl	800779e <slave_handle_write_single_coil>
 8007b7a:	e04a      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	795b      	ldrb	r3, [r3, #5]
 8007b80:	2b0f      	cmp	r3, #15
 8007b82:	d103      	bne.n	8007b8c <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fe65 	bl	8007854 <slave_handle_write_multi_coils>
 8007b8a:	e042      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	795b      	ldrb	r3, [r3, #5]
 8007b90:	2b06      	cmp	r3, #6
 8007b92:	d103      	bne.n	8007b9c <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fedb 	bl	8007950 <slave_handle_write_single_holding_reg>
 8007b9a:	e03a      	b.n	8007c12 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	795b      	ldrb	r3, [r3, #5]
 8007ba0:	2b10      	cmp	r3, #16
 8007ba2:	d103      	bne.n	8007bac <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff ff32 	bl	8007a0e <slave_handle_write_multi_holding_regs>
 8007baa:	e032      	b.n	8007c12 <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	b291      	uxth	r1, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	791a      	ldrb	r2, [r3, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	440b      	add	r3, r1
 8007bce:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7b5a      	ldrb	r2, [r3, #13]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007bdc:	1c59      	adds	r1, r3, #1
 8007bde:	b288      	uxth	r0, r1
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007be6:	4619      	mov	r1, r3
 8007be8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	440b      	add	r3, r1
 8007bf2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x01;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	b291      	uxth	r1, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007c06:	461a      	mov	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    }
    slave->buff_len = slave->tx_len;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff f9f1 	bl	800700c <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	b291      	uxth	r1, r2
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	799a      	ldrb	r2, [r3, #6]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	440b      	add	r3, r1
 8007c44:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	b291      	uxth	r1, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007c58:	4619      	mov	r1, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	79da      	ldrb	r2, [r3, #7]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	440b      	add	r3, r1
 8007c62:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave_set_tx_rx(slave, tx);
 8007c66:	2101      	movs	r1, #1
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8ab 	bl	8007dc4 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 7187 	add.w	r1, r3, #270	; 0x10e
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007c80:	461a      	mov	r2, r3
 8007c82:	f7fa ff99 	bl	8002bb8 <HAL_UART_Transmit_DMA>
 8007c86:	e000      	b.n	8007c8a <slave_response+0x17c>
        return;
 8007c88:	bf00      	nop
}
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d109      	bne.n	8007ccc <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fc f8a0 	bl	8003e0c <osSemaphoreRelease>
    }
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7fb ff8d 	bl	8003c08 <osSemaphoreNew>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4810      	ldr	r0, [pc, #64]	; (8007d40 <slave_init+0x6c>)
 8007cfe:	f7fb febf 	bl	8003a80 <osTimerNew>
 8007d02:	4602      	mov	r2, r0
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    slave->uart_port = port;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0210 	orr.w	r2, r2, #16
 8007d36:	60da      	str	r2, [r3, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	08007c91 	.word	0x08007c91

08007d44 <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0310 	and.w	r3, r3, #16
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d02e      	beq.n	8007dbc <slave_uart_idle+0x78>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d025      	beq.n	8007dbc <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
        slave->idle_timer_flag = 0;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fc f828 	bl	8003e0c <osSemaphoreRelease>
    }
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6858      	ldr	r0, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	8919      	ldrh	r1, [r3, #8]
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	bf0c      	ite	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	2300      	movne	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	f7f9 ffb0 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 8007dfe:	e024      	b.n	8007e4a <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e10:	2102      	movs	r1, #2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fb feb8 	bl	8003b88 <osTimerStart>
 8007e18:	e017      	b.n	8007e4a <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d112      	bne.n	8007e4a <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fa ff60 	bl	8002cf0 <HAL_UART_DMAStop>
            slave_response(slave);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff fe6c 	bl	8007b0e <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e44:	4619      	mov	r1, r3
 8007e46:	f7fa ff23 	bl	8002c90 <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e50:	f04f 31ff 	mov.w	r1, #4294967295
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fb ff73 	bl	8003d40 <osSemaphoreAcquire>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0cf      	beq.n	8007e00 <slave_wait_request+0xa>
        }
    }
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <motor_function_step>:
#define rtCP_Constant23_Value          rtCP_pooled_i2hU6p9uLH6V
#define rtCP_Constant26_Value          rtCP_pooled_i2hU6p9uLH6V
#define rtCP_Constant29_Value          rtCP_pooled_i2hU6p9uLH6V

void motor_function_step(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b090      	sub	sp, #64	; 0x40
 8007e70:	af08      	add	r7, sp, #32
    int32_T i;
    int16_T rtb_DataStoreRead3_o3[5];
    int16_T rtb_DataStoreRead_o1[2];
    int16_T rtb_DataStoreRead_o2[2];
    int16_T rtb_com_only3;
    sys_regs.inputs[120] = (int16_T)(sys_regs.holdings[18] & 1);
 8007e72:	4b94      	ldr	r3, [pc, #592]	; (80080c4 <motor_function_step+0x258>)
 8007e74:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	b21a      	sxth	r2, r3
 8007e7e:	4b91      	ldr	r3, [pc, #580]	; (80080c4 <motor_function_step+0x258>)
 8007e80:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    sys_regs.inputs[121] = (int16_T)(sys_regs.holdings[0] & 1);
 8007e84:	4b8f      	ldr	r3, [pc, #572]	; (80080c4 <motor_function_step+0x258>)
 8007e86:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	b21a      	sxth	r2, r3
 8007e90:	4b8c      	ldr	r3, [pc, #560]	; (80080c4 <motor_function_step+0x258>)
 8007e92:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
    sys_regs.inputs[122] = (int16_T)(sys_regs.holdings[6] & 1);
 8007e96:	4b8b      	ldr	r3, [pc, #556]	; (80080c4 <motor_function_step+0x258>)
 8007e98:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	b21a      	sxth	r2, r3
 8007ea2:	4b88      	ldr	r3, [pc, #544]	; (80080c4 <motor_function_step+0x258>)
 8007ea4:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
    sys_regs.inputs[123] = (int16_T)(sys_regs.holdings[24] & 1);
 8007ea8:	4b86      	ldr	r3, [pc, #536]	; (80080c4 <motor_function_step+0x258>)
 8007eaa:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	b21a      	sxth	r2, r3
 8007eb4:	4b83      	ldr	r3, [pc, #524]	; (80080c4 <motor_function_step+0x258>)
 8007eb6:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
    sys_regs.inputs[124] = (int16_T)(sys_regs.holdings[12] & 1);
 8007eba:	4b82      	ldr	r3, [pc, #520]	; (80080c4 <motor_function_step+0x258>)
 8007ebc:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	b21a      	sxth	r2, r3
 8007ec6:	4b7f      	ldr	r3, [pc, #508]	; (80080c4 <motor_function_step+0x258>)
 8007ec8:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
    sys_regs.inputs[125] = (int16_T)(sys_regs.holdings[18] >> 1 & 1);
 8007ecc:	4b7d      	ldr	r3, [pc, #500]	; (80080c4 <motor_function_step+0x258>)
 8007ece:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007ed2:	105b      	asrs	r3, r3, #1
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	b21a      	sxth	r2, r3
 8007edc:	4b79      	ldr	r3, [pc, #484]	; (80080c4 <motor_function_step+0x258>)
 8007ede:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
    sys_regs.inputs[126] = (int16_T)(sys_regs.holdings[0] >> 1 & 1);
 8007ee2:	4b78      	ldr	r3, [pc, #480]	; (80080c4 <motor_function_step+0x258>)
 8007ee4:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007ee8:	105b      	asrs	r3, r3, #1
 8007eea:	b21b      	sxth	r3, r3
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	b21a      	sxth	r2, r3
 8007ef2:	4b74      	ldr	r3, [pc, #464]	; (80080c4 <motor_function_step+0x258>)
 8007ef4:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
    sys_regs.inputs[127] = (int16_T)(sys_regs.holdings[6] >> 1 & 1);
 8007ef8:	4b72      	ldr	r3, [pc, #456]	; (80080c4 <motor_function_step+0x258>)
 8007efa:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007efe:	105b      	asrs	r3, r3, #1
 8007f00:	b21b      	sxth	r3, r3
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	b21a      	sxth	r2, r3
 8007f08:	4b6e      	ldr	r3, [pc, #440]	; (80080c4 <motor_function_step+0x258>)
 8007f0a:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
    sys_regs.inputs[128] = (int16_T)(sys_regs.holdings[24] >> 1 & 1);
 8007f0e:	4b6d      	ldr	r3, [pc, #436]	; (80080c4 <motor_function_step+0x258>)
 8007f10:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007f14:	105b      	asrs	r3, r3, #1
 8007f16:	b21b      	sxth	r3, r3
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	b21a      	sxth	r2, r3
 8007f1e:	4b69      	ldr	r3, [pc, #420]	; (80080c4 <motor_function_step+0x258>)
 8007f20:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
    sys_regs.inputs[129] = (int16_T)(sys_regs.holdings[12] >> 1 & 1);
 8007f24:	4b67      	ldr	r3, [pc, #412]	; (80080c4 <motor_function_step+0x258>)
 8007f26:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007f2a:	105b      	asrs	r3, r3, #1
 8007f2c:	b21b      	sxth	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b21a      	sxth	r2, r3
 8007f34:	4b63      	ldr	r3, [pc, #396]	; (80080c4 <motor_function_step+0x258>)
 8007f36:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
    sys_regs.inputs[130] = (int16_T)(sys_regs.holdings[18] >> 2 & 1);
 8007f3a:	4b62      	ldr	r3, [pc, #392]	; (80080c4 <motor_function_step+0x258>)
 8007f3c:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007f40:	109b      	asrs	r3, r3, #2
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	b21a      	sxth	r2, r3
 8007f4a:	4b5e      	ldr	r3, [pc, #376]	; (80080c4 <motor_function_step+0x258>)
 8007f4c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    sys_regs.inputs[131] = (int16_T)(sys_regs.holdings[0] >> 2 & 1);
 8007f50:	4b5c      	ldr	r3, [pc, #368]	; (80080c4 <motor_function_step+0x258>)
 8007f52:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007f56:	109b      	asrs	r3, r3, #2
 8007f58:	b21b      	sxth	r3, r3
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	b21a      	sxth	r2, r3
 8007f60:	4b58      	ldr	r3, [pc, #352]	; (80080c4 <motor_function_step+0x258>)
 8007f62:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
    sys_regs.inputs[132] = (int16_T)(sys_regs.holdings[6] >> 2 & 1);
 8007f66:	4b57      	ldr	r3, [pc, #348]	; (80080c4 <motor_function_step+0x258>)
 8007f68:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007f6c:	109b      	asrs	r3, r3, #2
 8007f6e:	b21b      	sxth	r3, r3
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	b21a      	sxth	r2, r3
 8007f76:	4b53      	ldr	r3, [pc, #332]	; (80080c4 <motor_function_step+0x258>)
 8007f78:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
    sys_regs.inputs[133] = (int16_T)(sys_regs.holdings[24] >> 2 & 1);
 8007f7c:	4b51      	ldr	r3, [pc, #324]	; (80080c4 <motor_function_step+0x258>)
 8007f7e:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007f82:	109b      	asrs	r3, r3, #2
 8007f84:	b21b      	sxth	r3, r3
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	b21a      	sxth	r2, r3
 8007f8c:	4b4d      	ldr	r3, [pc, #308]	; (80080c4 <motor_function_step+0x258>)
 8007f8e:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
    sys_regs.inputs[134] = (int16_T)(sys_regs.holdings[12] >> 2 & 1);
 8007f92:	4b4c      	ldr	r3, [pc, #304]	; (80080c4 <motor_function_step+0x258>)
 8007f94:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8007f98:	109b      	asrs	r3, r3, #2
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	b21a      	sxth	r2, r3
 8007fa2:	4b48      	ldr	r3, [pc, #288]	; (80080c4 <motor_function_step+0x258>)
 8007fa4:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
    sys_regs.inputs[135] = (int16_T)(sys_regs.holdings[18] >> 3 & 1);
 8007fa8:	4b46      	ldr	r3, [pc, #280]	; (80080c4 <motor_function_step+0x258>)
 8007faa:	f9b3 3424 	ldrsh.w	r3, [r3, #1060]	; 0x424
 8007fae:	10db      	asrs	r3, r3, #3
 8007fb0:	b21b      	sxth	r3, r3
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	4b42      	ldr	r3, [pc, #264]	; (80080c4 <motor_function_step+0x258>)
 8007fba:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
    sys_regs.inputs[136] = (int16_T)(sys_regs.holdings[0] >> 3 & 1);
 8007fbe:	4b41      	ldr	r3, [pc, #260]	; (80080c4 <motor_function_step+0x258>)
 8007fc0:	f9b3 3400 	ldrsh.w	r3, [r3, #1024]	; 0x400
 8007fc4:	10db      	asrs	r3, r3, #3
 8007fc6:	b21b      	sxth	r3, r3
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	b21a      	sxth	r2, r3
 8007fce:	4b3d      	ldr	r3, [pc, #244]	; (80080c4 <motor_function_step+0x258>)
 8007fd0:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
    sys_regs.inputs[137] = (int16_T)(sys_regs.holdings[6] >> 3 & 1);
 8007fd4:	4b3b      	ldr	r3, [pc, #236]	; (80080c4 <motor_function_step+0x258>)
 8007fd6:	f9b3 340c 	ldrsh.w	r3, [r3, #1036]	; 0x40c
 8007fda:	10db      	asrs	r3, r3, #3
 8007fdc:	b21b      	sxth	r3, r3
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	b21a      	sxth	r2, r3
 8007fe4:	4b37      	ldr	r3, [pc, #220]	; (80080c4 <motor_function_step+0x258>)
 8007fe6:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
    sys_regs.inputs[138] = (int16_T)(sys_regs.holdings[24] >> 3 & 1);
 8007fea:	4b36      	ldr	r3, [pc, #216]	; (80080c4 <motor_function_step+0x258>)
 8007fec:	f9b3 3430 	ldrsh.w	r3, [r3, #1072]	; 0x430
 8007ff0:	10db      	asrs	r3, r3, #3
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	b21a      	sxth	r2, r3
 8007ffa:	4b32      	ldr	r3, [pc, #200]	; (80080c4 <motor_function_step+0x258>)
 8007ffc:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
    sys_regs.inputs[139] = (int16_T)(sys_regs.holdings[12] >> 3 & 1);
 8008000:	4b30      	ldr	r3, [pc, #192]	; (80080c4 <motor_function_step+0x258>)
 8008002:	f9b3 3418 	ldrsh.w	r3, [r3, #1048]	; 0x418
 8008006:	10db      	asrs	r3, r3, #3
 8008008:	b21b      	sxth	r3, r3
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	b21a      	sxth	r2, r3
 8008010:	4b2c      	ldr	r3, [pc, #176]	; (80080c4 <motor_function_step+0x258>)
 8008012:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[100];
 8008016:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <motor_function_step+0x258>)
 8008018:	f9b3 32c8 	ldrsh.w	r3, [r3, #712]	; 0x2c8
 800801c:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 800801e:	4b29      	ldr	r3, [pc, #164]	; (80080c4 <motor_function_step+0x258>)
 8008020:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8008024:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[101];
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <motor_function_step+0x258>)
 8008028:	f9b3 32ca 	ldrsh.w	r3, [r3, #714]	; 0x2ca
 800802c:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 800802e:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <motor_function_step+0x258>)
 8008030:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 8008034:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 8008036:	2300      	movs	r3, #0
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e010      	b.n	800805e <motor_function_step+0x1f2>
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 120];
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3378      	adds	r3, #120	; 0x78
 8008040:	4a20      	ldr	r2, [pc, #128]	; (80080c4 <motor_function_step+0x258>)
 8008042:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008046:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	f107 0120 	add.w	r1, r7, #32
 8008052:	440b      	add	r3, r1
 8008054:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	3301      	adds	r3, #1
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	2b04      	cmp	r3, #4
 8008062:	ddeb      	ble.n	800803c <motor_function_step+0x1d0>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 8008064:	4b17      	ldr	r3, [pc, #92]	; (80080c4 <motor_function_step+0x258>)
 8008066:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 800806a:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 800806c:	f107 0010 	add.w	r0, r7, #16
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	f107 010c 	add.w	r1, r7, #12
 8008078:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <motor_function_step+0x25c>)
 800807a:	9306      	str	r3, [sp, #24]
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <motor_function_step+0x260>)
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <motor_function_step+0x264>)
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	1dbb      	adds	r3, r7, #6
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <motor_function_step+0x268>)
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <motor_function_step+0x268>)
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <motor_function_step+0x268>)
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4603      	mov	r3, r0
 8008096:	4810      	ldr	r0, [pc, #64]	; (80080d8 <motor_function_step+0x26c>)
 8008098:	f000 fcd4 	bl	8008a44 <motor_channel>
                  &rtCP_Constant_Value[0], &rtCP_Constant_Value[0], &rtCP_Constant_Value[0], &rtb_com_only3, &motor_function_B.up_relay,
                  &motor_function_B.down_relay, &(motor_function_DW.Model_InstanceData.rtdw));
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[102];
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <motor_function_step+0x258>)
 800809e:	f9b3 32cc 	ldrsh.w	r3, [r3, #716]	; 0x2cc
 80080a2:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <motor_function_step+0x258>)
 80080a6:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 80080aa:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[103];
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <motor_function_step+0x258>)
 80080ae:	f9b3 32ce 	ldrsh.w	r3, [r3, #718]	; 0x2ce
 80080b2:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 80080b4:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <motor_function_step+0x258>)
 80080b6:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 80080ba:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 80080bc:	2300      	movs	r3, #0
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	e01d      	b.n	80080fe <motor_function_step+0x292>
 80080c2:	bf00      	nop
 80080c4:	20002948 	.word	0x20002948
 80080c8:	20003040 	.word	0x20003040
 80080cc:	200030a2 	.word	0x200030a2
 80080d0:	200030a0 	.word	0x200030a0
 80080d4:	08009644 	.word	0x08009644
 80080d8:	20003054 	.word	0x20003054
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 125];
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	337d      	adds	r3, #125	; 0x7d
 80080e0:	4a79      	ldr	r2, [pc, #484]	; (80082c8 <motor_function_step+0x45c>)
 80080e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80080e6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	f107 0120 	add.w	r1, r7, #32
 80080f2:	440b      	add	r3, r1
 80080f4:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	3301      	adds	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b04      	cmp	r3, #4
 8008102:	ddeb      	ble.n	80080dc <motor_function_step+0x270>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 8008104:	4b70      	ldr	r3, [pc, #448]	; (80082c8 <motor_function_step+0x45c>)
 8008106:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 800810a:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model1_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 800810c:	f107 0010 	add.w	r0, r7, #16
 8008110:	f107 0208 	add.w	r2, r7, #8
 8008114:	f107 010c 	add.w	r1, r7, #12
 8008118:	4b6c      	ldr	r3, [pc, #432]	; (80082cc <motor_function_step+0x460>)
 800811a:	9306      	str	r3, [sp, #24]
 800811c:	4b6c      	ldr	r3, [pc, #432]	; (80082d0 <motor_function_step+0x464>)
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	4b6c      	ldr	r3, [pc, #432]	; (80082d4 <motor_function_step+0x468>)
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	1dbb      	adds	r3, r7, #6
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	4b6b      	ldr	r3, [pc, #428]	; (80082d8 <motor_function_step+0x46c>)
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	4b6a      	ldr	r3, [pc, #424]	; (80082d8 <motor_function_step+0x46c>)
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	4b69      	ldr	r3, [pc, #420]	; (80082d8 <motor_function_step+0x46c>)
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4603      	mov	r3, r0
 8008136:	4869      	ldr	r0, [pc, #420]	; (80082dc <motor_function_step+0x470>)
 8008138:	f000 fc84 	bl	8008a44 <motor_channel>
                  &rtCP_Constant23_Value[0], &rtCP_Constant23_Value[0], &rtCP_Constant23_Value[0], &rtb_com_only3,
                  &motor_function_B.up_relay_g, &motor_function_B.down_relay_d, &(motor_function_DW.Model1_InstanceData.rtdw));
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[104];
 800813c:	4b62      	ldr	r3, [pc, #392]	; (80082c8 <motor_function_step+0x45c>)
 800813e:	f9b3 32d0 	ldrsh.w	r3, [r3, #720]	; 0x2d0
 8008142:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 8008144:	4b60      	ldr	r3, [pc, #384]	; (80082c8 <motor_function_step+0x45c>)
 8008146:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 800814a:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[105];
 800814c:	4b5e      	ldr	r3, [pc, #376]	; (80082c8 <motor_function_step+0x45c>)
 800814e:	f9b3 32d2 	ldrsh.w	r3, [r3, #722]	; 0x2d2
 8008152:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 8008154:	4b5c      	ldr	r3, [pc, #368]	; (80082c8 <motor_function_step+0x45c>)
 8008156:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 800815a:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 800815c:	2300      	movs	r3, #0
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e010      	b.n	8008184 <motor_function_step+0x318>
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 130];
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3382      	adds	r3, #130	; 0x82
 8008166:	4a58      	ldr	r2, [pc, #352]	; (80082c8 <motor_function_step+0x45c>)
 8008168:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800816c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	f107 0120 	add.w	r1, r7, #32
 8008178:	440b      	add	r3, r1
 800817a:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	3301      	adds	r3, #1
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	2b04      	cmp	r3, #4
 8008188:	ddeb      	ble.n	8008162 <motor_function_step+0x2f6>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 800818a:	4b4f      	ldr	r3, [pc, #316]	; (80082c8 <motor_function_step+0x45c>)
 800818c:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 8008190:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model2_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 8008192:	f107 0010 	add.w	r0, r7, #16
 8008196:	f107 0208 	add.w	r2, r7, #8
 800819a:	f107 010c 	add.w	r1, r7, #12
 800819e:	4b50      	ldr	r3, [pc, #320]	; (80082e0 <motor_function_step+0x474>)
 80081a0:	9306      	str	r3, [sp, #24]
 80081a2:	4b50      	ldr	r3, [pc, #320]	; (80082e4 <motor_function_step+0x478>)
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	4b50      	ldr	r3, [pc, #320]	; (80082e8 <motor_function_step+0x47c>)
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	1dbb      	adds	r3, r7, #6
 80081ac:	9303      	str	r3, [sp, #12]
 80081ae:	4b4a      	ldr	r3, [pc, #296]	; (80082d8 <motor_function_step+0x46c>)
 80081b0:	9302      	str	r3, [sp, #8]
 80081b2:	4b49      	ldr	r3, [pc, #292]	; (80082d8 <motor_function_step+0x46c>)
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	4b48      	ldr	r3, [pc, #288]	; (80082d8 <motor_function_step+0x46c>)
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4603      	mov	r3, r0
 80081bc:	484b      	ldr	r0, [pc, #300]	; (80082ec <motor_function_step+0x480>)
 80081be:	f000 fc41 	bl	8008a44 <motor_channel>
                  &rtCP_Constant26_Value[0], &rtCP_Constant26_Value[0], &rtCP_Constant26_Value[0], &rtb_com_only3,
                  &motor_function_B.up_relay_j, &motor_function_B.down_relay_j, &(motor_function_DW.Model2_InstanceData.rtdw));
    rtb_DataStoreRead_o1[0] = sys_regs.inputs[106];
 80081c2:	4b41      	ldr	r3, [pc, #260]	; (80082c8 <motor_function_step+0x45c>)
 80081c4:	f9b3 32d4 	ldrsh.w	r3, [r3, #724]	; 0x2d4
 80081c8:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2[0] = sys_regs.inputs[108];
 80081ca:	4b3f      	ldr	r3, [pc, #252]	; (80082c8 <motor_function_step+0x45c>)
 80081cc:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 80081d0:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o1[1] = sys_regs.inputs[107];
 80081d2:	4b3d      	ldr	r3, [pc, #244]	; (80082c8 <motor_function_step+0x45c>)
 80081d4:	f9b3 32d6 	ldrsh.w	r3, [r3, #726]	; 0x2d6
 80081d8:	81fb      	strh	r3, [r7, #14]
    rtb_DataStoreRead_o2[1] = sys_regs.inputs[109];
 80081da:	4b3b      	ldr	r3, [pc, #236]	; (80082c8 <motor_function_step+0x45c>)
 80081dc:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
 80081e0:	817b      	strh	r3, [r7, #10]
    for (i = 0; i < 5; i++)
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	e010      	b.n	800820a <motor_function_step+0x39e>
    {
        rtb_DataStoreRead3_o3[i] = sys_regs.inputs[i + 135];
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	3387      	adds	r3, #135	; 0x87
 80081ec:	4a36      	ldr	r2, [pc, #216]	; (80082c8 <motor_function_step+0x45c>)
 80081ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081f2:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	f107 0120 	add.w	r1, r7, #32
 80081fe:	440b      	add	r3, r1
 8008200:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < 5; i++)
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b04      	cmp	r3, #4
 800820e:	ddeb      	ble.n	80081e8 <motor_function_step+0x37c>
    }

    rtb_com_only3 = sys_regs.holdings[37];
 8008210:	4b2d      	ldr	r3, [pc, #180]	; (80082c8 <motor_function_step+0x45c>)
 8008212:	f9b3 344a 	ldrsh.w	r3, [r3, #1098]	; 0x44a
 8008216:	80fb      	strh	r3, [r7, #6]
    motor_channel(&(motor_function_DW.Model3_InstanceData.rtm), &rtb_DataStoreRead_o1[0], &rtb_DataStoreRead_o2[0], &rtb_DataStoreRead3_o3[0],
 8008218:	f107 0010 	add.w	r0, r7, #16
 800821c:	f107 0208 	add.w	r2, r7, #8
 8008220:	f107 010c 	add.w	r1, r7, #12
 8008224:	4b32      	ldr	r3, [pc, #200]	; (80082f0 <motor_function_step+0x484>)
 8008226:	9306      	str	r3, [sp, #24]
 8008228:	4b32      	ldr	r3, [pc, #200]	; (80082f4 <motor_function_step+0x488>)
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	4b32      	ldr	r3, [pc, #200]	; (80082f8 <motor_function_step+0x48c>)
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	1dbb      	adds	r3, r7, #6
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	4b28      	ldr	r3, [pc, #160]	; (80082d8 <motor_function_step+0x46c>)
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	4b27      	ldr	r3, [pc, #156]	; (80082d8 <motor_function_step+0x46c>)
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	4b26      	ldr	r3, [pc, #152]	; (80082d8 <motor_function_step+0x46c>)
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4603      	mov	r3, r0
 8008242:	482e      	ldr	r0, [pc, #184]	; (80082fc <motor_function_step+0x490>)
 8008244:	f000 fbfe 	bl	8008a44 <motor_channel>
                  &rtCP_Constant29_Value[0], &rtCP_Constant29_Value[0], &rtCP_Constant29_Value[0], &rtb_com_only3,
                  &motor_function_B.up_relay_j2, &motor_function_B.down_relay_g, &(motor_function_DW.Model3_InstanceData.rtdw));
    relay[0] = motor_function_B.up_relay;
 8008248:	4b2d      	ldr	r3, [pc, #180]	; (8008300 <motor_function_step+0x494>)
 800824a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800824e:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <motor_function_step+0x498>)
 8008250:	801a      	strh	r2, [r3, #0]
    relay[1] = motor_function_B.down_relay;
 8008252:	4b2b      	ldr	r3, [pc, #172]	; (8008300 <motor_function_step+0x494>)
 8008254:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008258:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <motor_function_step+0x498>)
 800825a:	805a      	strh	r2, [r3, #2]
    relay[2] = motor_function_B.up_relay_g;
 800825c:	4b28      	ldr	r3, [pc, #160]	; (8008300 <motor_function_step+0x494>)
 800825e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8008262:	4b28      	ldr	r3, [pc, #160]	; (8008304 <motor_function_step+0x498>)
 8008264:	809a      	strh	r2, [r3, #4]
    relay[3] = motor_function_B.down_relay_d;
 8008266:	4b26      	ldr	r3, [pc, #152]	; (8008300 <motor_function_step+0x494>)
 8008268:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800826c:	4b25      	ldr	r3, [pc, #148]	; (8008304 <motor_function_step+0x498>)
 800826e:	80da      	strh	r2, [r3, #6]
    relay[4] = motor_function_B.up_relay_j;
 8008270:	4b23      	ldr	r3, [pc, #140]	; (8008300 <motor_function_step+0x494>)
 8008272:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8008276:	4b23      	ldr	r3, [pc, #140]	; (8008304 <motor_function_step+0x498>)
 8008278:	811a      	strh	r2, [r3, #8]
    relay[5] = motor_function_B.down_relay_j;
 800827a:	4b21      	ldr	r3, [pc, #132]	; (8008300 <motor_function_step+0x494>)
 800827c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008280:	4b20      	ldr	r3, [pc, #128]	; (8008304 <motor_function_step+0x498>)
 8008282:	815a      	strh	r2, [r3, #10]
    relay[6] = motor_function_B.up_relay_j2;
 8008284:	4b1e      	ldr	r3, [pc, #120]	; (8008300 <motor_function_step+0x494>)
 8008286:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800828a:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <motor_function_step+0x498>)
 800828c:	819a      	strh	r2, [r3, #12]
    relay[7] = motor_function_B.down_relay_g;
 800828e:	4b1c      	ldr	r3, [pc, #112]	; (8008300 <motor_function_step+0x494>)
 8008290:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <motor_function_step+0x498>)
 8008296:	81da      	strh	r2, [r3, #14]
    sys_regs.holdings[18] = 0;
 8008298:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <motor_function_step+0x45c>)
 800829a:	2200      	movs	r2, #0
 800829c:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
    sys_regs.holdings[0] = 0;
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <motor_function_step+0x45c>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    sys_regs.holdings[6] = 0;
 80082a8:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <motor_function_step+0x45c>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    sys_regs.holdings[24] = 0;
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <motor_function_step+0x45c>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8a3 2430 	strh.w	r2, [r3, #1072]	; 0x430
    sys_regs.holdings[12] = 0;
 80082b8:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <motor_function_step+0x45c>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
}
 80082c0:	bf00      	nop
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20002948 	.word	0x20002948
 80082cc:	20003058 	.word	0x20003058
 80082d0:	200030a6 	.word	0x200030a6
 80082d4:	200030a4 	.word	0x200030a4
 80082d8:	08009644 	.word	0x08009644
 80082dc:	2000306c 	.word	0x2000306c
 80082e0:	20003070 	.word	0x20003070
 80082e4:	200030aa 	.word	0x200030aa
 80082e8:	200030a8 	.word	0x200030a8
 80082ec:	20003084 	.word	0x20003084
 80082f0:	20003088 	.word	0x20003088
 80082f4:	200030ae 	.word	0x200030ae
 80082f8:	200030ac 	.word	0x200030ac
 80082fc:	2000309c 	.word	0x2000309c
 8008300:	200030a0 	.word	0x200030a0
 8008304:	20002f48 	.word	0x20002f48

08008308 <motor_function_initialize>:

void motor_function_initialize(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
    motor_function_DW.Model_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model;
 800830c:	4b3e      	ldr	r3, [pc, #248]	; (8008408 <motor_function_initialize+0x100>)
 800830e:	4a3f      	ldr	r2, [pc, #252]	; (800840c <motor_function_initialize+0x104>)
 8008310:	615a      	str	r2, [r3, #20]
    motor_function_DW.Model1_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model1;
 8008312:	4b3d      	ldr	r3, [pc, #244]	; (8008408 <motor_function_initialize+0x100>)
 8008314:	4a3e      	ldr	r2, [pc, #248]	; (8008410 <motor_function_initialize+0x108>)
 8008316:	62da      	str	r2, [r3, #44]	; 0x2c
    motor_function_DW.Model2_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model2;
 8008318:	4b3b      	ldr	r3, [pc, #236]	; (8008408 <motor_function_initialize+0x100>)
 800831a:	4a3e      	ldr	r2, [pc, #248]	; (8008414 <motor_function_initialize+0x10c>)
 800831c:	645a      	str	r2, [r3, #68]	; 0x44
    motor_function_DW.Model3_InstanceData.rtm.motor_channel_InstP_ref = &motor_function_InstP.InstP_Model3;
 800831e:	4b3a      	ldr	r3, [pc, #232]	; (8008408 <motor_function_initialize+0x100>)
 8008320:	4a3d      	ldr	r2, [pc, #244]	; (8008418 <motor_function_initialize+0x110>)
 8008322:	65da      	str	r2, [r3, #92]	; 0x5c
    motor_channel_Init(&(motor_function_DW.Model_InstanceData.rtdw));
 8008324:	4838      	ldr	r0, [pc, #224]	; (8008408 <motor_function_initialize+0x100>)
 8008326:	f000 fb7f 	bl	8008a28 <motor_channel_Init>
    motor_channel_Init(&(motor_function_DW.Model1_InstanceData.rtdw));
 800832a:	483c      	ldr	r0, [pc, #240]	; (800841c <motor_function_initialize+0x114>)
 800832c:	f000 fb7c 	bl	8008a28 <motor_channel_Init>
    motor_channel_Init(&(motor_function_DW.Model2_InstanceData.rtdw));
 8008330:	483b      	ldr	r0, [pc, #236]	; (8008420 <motor_function_initialize+0x118>)
 8008332:	f000 fb79 	bl	8008a28 <motor_channel_Init>
    motor_channel_Init(&(motor_function_DW.Model3_InstanceData.rtdw));
 8008336:	483b      	ldr	r0, [pc, #236]	; (8008424 <motor_function_initialize+0x11c>)
 8008338:	f000 fb76 	bl	8008a28 <motor_channel_Init>
    motor_function_InstP.InstP_Model.debounce_cnt = sys_regs.holdings[100];
 800833c:	4b3a      	ldr	r3, [pc, #232]	; (8008428 <motor_function_initialize+0x120>)
 800833e:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 8008342:	4b32      	ldr	r3, [pc, #200]	; (800840c <motor_function_initialize+0x104>)
 8008344:	801a      	strh	r2, [r3, #0]
    motor_function_InstP.InstP_Model.longpress_cnt = sys_regs.holdings[101];
 8008346:	4b38      	ldr	r3, [pc, #224]	; (8008428 <motor_function_initialize+0x120>)
 8008348:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 800834c:	4b2f      	ldr	r3, [pc, #188]	; (800840c <motor_function_initialize+0x104>)
 800834e:	809a      	strh	r2, [r3, #4]
    motor_function_InstP.InstP_Model2.debounce_cnt = sys_regs.holdings[100];
 8008350:	4b35      	ldr	r3, [pc, #212]	; (8008428 <motor_function_initialize+0x120>)
 8008352:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 8008356:	4b2d      	ldr	r3, [pc, #180]	; (800840c <motor_function_initialize+0x104>)
 8008358:	829a      	strh	r2, [r3, #20]
    motor_function_InstP.InstP_Model2.longpress_cnt = sys_regs.holdings[101];
 800835a:	4b33      	ldr	r3, [pc, #204]	; (8008428 <motor_function_initialize+0x120>)
 800835c:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 8008360:	4b2a      	ldr	r3, [pc, #168]	; (800840c <motor_function_initialize+0x104>)
 8008362:	831a      	strh	r2, [r3, #24]
    motor_function_InstP.InstP_Model2.long_cnt = sys_regs.holdings[102];
 8008364:	4b30      	ldr	r3, [pc, #192]	; (8008428 <motor_function_initialize+0x120>)
 8008366:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 800836a:	4b28      	ldr	r3, [pc, #160]	; (800840c <motor_function_initialize+0x104>)
 800836c:	82da      	strh	r2, [r3, #22]
    motor_function_InstP.InstP_Model2.short_cnt = sys_regs.holdings[36];
 800836e:	4b2e      	ldr	r3, [pc, #184]	; (8008428 <motor_function_initialize+0x120>)
 8008370:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 8008374:	4b25      	ldr	r3, [pc, #148]	; (800840c <motor_function_initialize+0x104>)
 8008376:	835a      	strh	r2, [r3, #26]
    motor_function_InstP.InstP_Model2.transfer_cnt = sys_regs.holdings[104];
 8008378:	4b2b      	ldr	r3, [pc, #172]	; (8008428 <motor_function_initialize+0x120>)
 800837a:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 800837e:	4b23      	ldr	r3, [pc, #140]	; (800840c <motor_function_initialize+0x104>)
 8008380:	839a      	strh	r2, [r3, #28]
    motor_function_InstP.InstP_Model3.debounce_cnt = sys_regs.holdings[100];
 8008382:	4b29      	ldr	r3, [pc, #164]	; (8008428 <motor_function_initialize+0x120>)
 8008384:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 8008388:	4b20      	ldr	r3, [pc, #128]	; (800840c <motor_function_initialize+0x104>)
 800838a:	83da      	strh	r2, [r3, #30]
    motor_function_InstP.InstP_Model3.longpress_cnt = sys_regs.holdings[101];
 800838c:	4b26      	ldr	r3, [pc, #152]	; (8008428 <motor_function_initialize+0x120>)
 800838e:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 8008392:	4b1e      	ldr	r3, [pc, #120]	; (800840c <motor_function_initialize+0x104>)
 8008394:	845a      	strh	r2, [r3, #34]	; 0x22
    motor_function_InstP.InstP_Model3.long_cnt = sys_regs.holdings[102];
 8008396:	4b24      	ldr	r3, [pc, #144]	; (8008428 <motor_function_initialize+0x120>)
 8008398:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <motor_function_initialize+0x104>)
 800839e:	841a      	strh	r2, [r3, #32]
    motor_function_InstP.InstP_Model3.short_cnt = sys_regs.holdings[36];
 80083a0:	4b21      	ldr	r3, [pc, #132]	; (8008428 <motor_function_initialize+0x120>)
 80083a2:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 80083a6:	4b19      	ldr	r3, [pc, #100]	; (800840c <motor_function_initialize+0x104>)
 80083a8:	849a      	strh	r2, [r3, #36]	; 0x24
    motor_function_InstP.InstP_Model3.transfer_cnt = sys_regs.holdings[104];
 80083aa:	4b1f      	ldr	r3, [pc, #124]	; (8008428 <motor_function_initialize+0x120>)
 80083ac:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 80083b0:	4b16      	ldr	r3, [pc, #88]	; (800840c <motor_function_initialize+0x104>)
 80083b2:	84da      	strh	r2, [r3, #38]	; 0x26
    motor_function_InstP.InstP_Model.long_cnt = sys_regs.holdings[102];
 80083b4:	4b1c      	ldr	r3, [pc, #112]	; (8008428 <motor_function_initialize+0x120>)
 80083b6:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <motor_function_initialize+0x104>)
 80083bc:	805a      	strh	r2, [r3, #2]
    motor_function_InstP.InstP_Model.short_cnt = sys_regs.holdings[36];
 80083be:	4b1a      	ldr	r3, [pc, #104]	; (8008428 <motor_function_initialize+0x120>)
 80083c0:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 80083c4:	4b11      	ldr	r3, [pc, #68]	; (800840c <motor_function_initialize+0x104>)
 80083c6:	80da      	strh	r2, [r3, #6]
    motor_function_InstP.InstP_Model.transfer_cnt = sys_regs.holdings[104];
 80083c8:	4b17      	ldr	r3, [pc, #92]	; (8008428 <motor_function_initialize+0x120>)
 80083ca:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <motor_function_initialize+0x104>)
 80083d0:	811a      	strh	r2, [r3, #8]
    motor_function_InstP.InstP_Model1.debounce_cnt = sys_regs.holdings[100];
 80083d2:	4b15      	ldr	r3, [pc, #84]	; (8008428 <motor_function_initialize+0x120>)
 80083d4:	f9b3 24c8 	ldrsh.w	r2, [r3, #1224]	; 0x4c8
 80083d8:	4b0c      	ldr	r3, [pc, #48]	; (800840c <motor_function_initialize+0x104>)
 80083da:	815a      	strh	r2, [r3, #10]
    motor_function_InstP.InstP_Model1.longpress_cnt = sys_regs.holdings[101];
 80083dc:	4b12      	ldr	r3, [pc, #72]	; (8008428 <motor_function_initialize+0x120>)
 80083de:	f9b3 24ca 	ldrsh.w	r2, [r3, #1226]	; 0x4ca
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <motor_function_initialize+0x104>)
 80083e4:	81da      	strh	r2, [r3, #14]
    motor_function_InstP.InstP_Model1.long_cnt = sys_regs.holdings[102];
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <motor_function_initialize+0x120>)
 80083e8:	f9b3 24cc 	ldrsh.w	r2, [r3, #1228]	; 0x4cc
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <motor_function_initialize+0x104>)
 80083ee:	819a      	strh	r2, [r3, #12]
    motor_function_InstP.InstP_Model1.short_cnt = sys_regs.holdings[36];
 80083f0:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <motor_function_initialize+0x120>)
 80083f2:	f9b3 2448 	ldrsh.w	r2, [r3, #1096]	; 0x448
 80083f6:	4b05      	ldr	r3, [pc, #20]	; (800840c <motor_function_initialize+0x104>)
 80083f8:	821a      	strh	r2, [r3, #16]
    motor_function_InstP.InstP_Model1.transfer_cnt = sys_regs.holdings[104];
 80083fa:	4b0b      	ldr	r3, [pc, #44]	; (8008428 <motor_function_initialize+0x120>)
 80083fc:	f9b3 24d0 	ldrsh.w	r2, [r3, #1232]	; 0x4d0
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <motor_function_initialize+0x104>)
 8008402:	825a      	strh	r2, [r3, #18]
}
 8008404:	bf00      	nop
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20003040 	.word	0x20003040
 800840c:	200000a0 	.word	0x200000a0
 8008410:	200000aa 	.word	0x200000aa
 8008414:	200000b4 	.word	0x200000b4
 8008418:	200000be 	.word	0x200000be
 800841c:	20003058 	.word	0x20003058
 8008420:	20003070 	.word	0x20003070
 8008424:	20003088 	.word	0x20003088
 8008428:	20002948 	.word	0x20002948

0800842c <motor_param_persist_step>:
#include "motor_param_persist.h"
#include "div_nde_s32_floor.h"

DW_motor_param_persist_T motor_param_persist_DW;
void motor_param_persist_step(void)
{
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af04      	add	r7, sp, #16
    int16_T rtb_DataStoreRead_o1;
    int16_T rtb_DataStoreRead_o2;
    int16_T rtb_DataStoreRead_o3;
    int16_T rtb_DataStoreRead_o4;
    int16_T rtb_DataStoreRead_o5;
    rtb_DataStoreRead_o1 = sys_regs.holdings[100];
 8008432:	4b4e      	ldr	r3, [pc, #312]	; (800856c <motor_param_persist_step+0x140>)
 8008434:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 8008438:	81bb      	strh	r3, [r7, #12]
    rtb_DataStoreRead_o2 = sys_regs.holdings[101];
 800843a:	4b4c      	ldr	r3, [pc, #304]	; (800856c <motor_param_persist_step+0x140>)
 800843c:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 8008440:	817b      	strh	r3, [r7, #10]
    rtb_DataStoreRead_o3 = sys_regs.holdings[102];
 8008442:	4b4a      	ldr	r3, [pc, #296]	; (800856c <motor_param_persist_step+0x140>)
 8008444:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 8008448:	813b      	strh	r3, [r7, #8]
    rtb_DataStoreRead_o4 = sys_regs.holdings[36];
 800844a:	4b48      	ldr	r3, [pc, #288]	; (800856c <motor_param_persist_step+0x140>)
 800844c:	f9b3 3448 	ldrsh.w	r3, [r3, #1096]	; 0x448
 8008450:	80fb      	strh	r3, [r7, #6]
    rtb_DataStoreRead_o5 = sys_regs.holdings[104];
 8008452:	4b46      	ldr	r3, [pc, #280]	; (800856c <motor_param_persist_step+0x140>)
 8008454:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008458:	80bb      	strh	r3, [r7, #4]
    change_monitor(&rtb_DataStoreRead_o1, &rtb_DataStoreRead_o2, &rtb_DataStoreRead_o3, &rtb_DataStoreRead_o4, &rtb_DataStoreRead_o5,
 800845a:	1dbc      	adds	r4, r7, #6
 800845c:	f107 0208 	add.w	r2, r7, #8
 8008460:	f107 010a 	add.w	r1, r7, #10
 8008464:	f107 000c 	add.w	r0, r7, #12
 8008468:	4b41      	ldr	r3, [pc, #260]	; (8008570 <motor_param_persist_step+0x144>)
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	f107 030f 	add.w	r3, r7, #15
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	1d3b      	adds	r3, r7, #4
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4623      	mov	r3, r4
 8008478:	f000 f917 	bl	80086aa <change_monitor>
                   &rtb_Model, &(motor_param_persist_DW.Model_InstanceData.rtdw));
    if (rtb_Model)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d06f      	beq.n	8008562 <motor_param_persist_step+0x136>
    {
        ee_ram[0] = (uint8_T)(sys_regs.holdings[100] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[100], 256) << 8));
 8008482:	4b3a      	ldr	r3, [pc, #232]	; (800856c <motor_param_persist_step+0x140>)
 8008484:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 8008488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f8e5 	bl	800865c <div_nde_s32_floor>
 8008492:	4b36      	ldr	r3, [pc, #216]	; (800856c <motor_param_persist_step+0x140>)
 8008494:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 8008498:	b2da      	uxtb	r2, r3
 800849a:	4b36      	ldr	r3, [pc, #216]	; (8008574 <motor_param_persist_step+0x148>)
 800849c:	701a      	strb	r2, [r3, #0]
        ee_ram[1] = (uint8_T)(sys_regs.holdings[100] >> 8);
 800849e:	4b33      	ldr	r3, [pc, #204]	; (800856c <motor_param_persist_step+0x140>)
 80084a0:	f9b3 34c8 	ldrsh.w	r3, [r3, #1224]	; 0x4c8
 80084a4:	121b      	asrs	r3, r3, #8
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4b32      	ldr	r3, [pc, #200]	; (8008574 <motor_param_persist_step+0x148>)
 80084ac:	705a      	strb	r2, [r3, #1]
        ee_ram[2] = (uint8_T)(sys_regs.holdings[101] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[101], 256) << 8));
 80084ae:	4b2f      	ldr	r3, [pc, #188]	; (800856c <motor_param_persist_step+0x140>)
 80084b0:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 80084b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f8cf 	bl	800865c <div_nde_s32_floor>
 80084be:	4b2b      	ldr	r3, [pc, #172]	; (800856c <motor_param_persist_step+0x140>)
 80084c0:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <motor_param_persist_step+0x148>)
 80084c8:	709a      	strb	r2, [r3, #2]
        ee_ram[3] = (uint8_T)(sys_regs.holdings[101] >> 8);
 80084ca:	4b28      	ldr	r3, [pc, #160]	; (800856c <motor_param_persist_step+0x140>)
 80084cc:	f9b3 34ca 	ldrsh.w	r3, [r3, #1226]	; 0x4ca
 80084d0:	121b      	asrs	r3, r3, #8
 80084d2:	b21b      	sxth	r3, r3
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <motor_param_persist_step+0x148>)
 80084d8:	70da      	strb	r2, [r3, #3]
        ee_ram[4] = (uint8_T)(sys_regs.holdings[102] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[102], 256) << 8));
 80084da:	4b24      	ldr	r3, [pc, #144]	; (800856c <motor_param_persist_step+0x140>)
 80084dc:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 80084e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 f8b9 	bl	800865c <div_nde_s32_floor>
 80084ea:	4b20      	ldr	r3, [pc, #128]	; (800856c <motor_param_persist_step+0x140>)
 80084ec:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	4b20      	ldr	r3, [pc, #128]	; (8008574 <motor_param_persist_step+0x148>)
 80084f4:	711a      	strb	r2, [r3, #4]
        ee_ram[5] = (uint8_T)(sys_regs.holdings[102] >> 8);
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <motor_param_persist_step+0x140>)
 80084f8:	f9b3 34cc 	ldrsh.w	r3, [r3, #1228]	; 0x4cc
 80084fc:	121b      	asrs	r3, r3, #8
 80084fe:	b21b      	sxth	r3, r3
 8008500:	b2da      	uxtb	r2, r3
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <motor_param_persist_step+0x148>)
 8008504:	715a      	strb	r2, [r3, #5]
        ee_ram[6] = (uint8_T)(sys_regs.holdings[36] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[36], 256) << 8));
 8008506:	4b19      	ldr	r3, [pc, #100]	; (800856c <motor_param_persist_step+0x140>)
 8008508:	f9b3 3448 	ldrsh.w	r3, [r3, #1096]	; 0x448
 800850c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8a3 	bl	800865c <div_nde_s32_floor>
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <motor_param_persist_step+0x140>)
 8008518:	f9b3 3448 	ldrsh.w	r3, [r3, #1096]	; 0x448
 800851c:	b2da      	uxtb	r2, r3
 800851e:	4b15      	ldr	r3, [pc, #84]	; (8008574 <motor_param_persist_step+0x148>)
 8008520:	719a      	strb	r2, [r3, #6]
        ee_ram[7] = (uint8_T)(sys_regs.holdings[36] >> 8);
 8008522:	4b12      	ldr	r3, [pc, #72]	; (800856c <motor_param_persist_step+0x140>)
 8008524:	f9b3 3448 	ldrsh.w	r3, [r3, #1096]	; 0x448
 8008528:	121b      	asrs	r3, r3, #8
 800852a:	b21b      	sxth	r3, r3
 800852c:	b2da      	uxtb	r2, r3
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <motor_param_persist_step+0x148>)
 8008530:	71da      	strb	r2, [r3, #7]
        ee_ram[8] = (uint8_T)(sys_regs.holdings[104] - (int16_T)((int16_T)div_nde_s32_floor(sys_regs.holdings[104], 256) << 8));
 8008532:	4b0e      	ldr	r3, [pc, #56]	; (800856c <motor_param_persist_step+0x140>)
 8008534:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f88d 	bl	800865c <div_nde_s32_floor>
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <motor_param_persist_step+0x140>)
 8008544:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008548:	b2da      	uxtb	r2, r3
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <motor_param_persist_step+0x148>)
 800854c:	721a      	strb	r2, [r3, #8]
        ee_ram[9] = (uint8_T)(sys_regs.holdings[104] >> 8);
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <motor_param_persist_step+0x140>)
 8008550:	f9b3 34d0 	ldrsh.w	r3, [r3, #1232]	; 0x4d0
 8008554:	121b      	asrs	r3, r3, #8
 8008556:	b21b      	sxth	r3, r3
 8008558:	b2da      	uxtb	r2, r3
 800855a:	4b06      	ldr	r3, [pc, #24]	; (8008574 <motor_param_persist_step+0x148>)
 800855c:	725a      	strb	r2, [r3, #9]
        ee_commit();
 800855e:	f7f8 fbe1 	bl	8000d24 <ee_commit>
    }
}
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	bd90      	pop	{r4, r7, pc}
 800856a:	bf00      	nop
 800856c:	20002948 	.word	0x20002948
 8008570:	200030b0 	.word	0x200030b0
 8008574:	20002f58 	.word	0x20002f58

08008578 <motor_param_persist_initialize>:

void motor_param_persist_initialize(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
    sys_regs.holdings[100] = (int16_T)((int16_T)(ee_ram[1] << 8) + ee_ram[0]);
 800857c:	4b35      	ldr	r3, [pc, #212]	; (8008654 <motor_param_persist_initialize+0xdc>)
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	b29a      	uxth	r2, r3
 8008584:	4b33      	ldr	r3, [pc, #204]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	4413      	add	r3, r2
 800858c:	b29b      	uxth	r3, r3
 800858e:	b21a      	sxth	r2, r3
 8008590:	4b31      	ldr	r3, [pc, #196]	; (8008658 <motor_param_persist_initialize+0xe0>)
 8008592:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
    sys_regs.holdings[101] = (int16_T)((int16_T)(ee_ram[3] << 8) + ee_ram[2]);
 8008596:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008598:	78db      	ldrb	r3, [r3, #3]
 800859a:	021b      	lsls	r3, r3, #8
 800859c:	b29a      	uxth	r2, r3
 800859e:	4b2d      	ldr	r3, [pc, #180]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085a0:	789b      	ldrb	r3, [r3, #2]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	4413      	add	r3, r2
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	b21a      	sxth	r2, r3
 80085aa:	4b2b      	ldr	r3, [pc, #172]	; (8008658 <motor_param_persist_initialize+0xe0>)
 80085ac:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
    sys_regs.holdings[102] = (int16_T)((int16_T)(ee_ram[5] << 8) + ee_ram[4]);
 80085b0:	4b28      	ldr	r3, [pc, #160]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085b2:	795b      	ldrb	r3, [r3, #5]
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	4b26      	ldr	r3, [pc, #152]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4413      	add	r3, r2
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	b21a      	sxth	r2, r3
 80085c4:	4b24      	ldr	r3, [pc, #144]	; (8008658 <motor_param_persist_initialize+0xe0>)
 80085c6:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
    sys_regs.holdings[36] = (int16_T)((int16_T)(ee_ram[7] << 8) + ee_ram[6]);
 80085ca:	4b22      	ldr	r3, [pc, #136]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085cc:	79db      	ldrb	r3, [r3, #7]
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	4b20      	ldr	r3, [pc, #128]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085d4:	799b      	ldrb	r3, [r3, #6]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	4413      	add	r3, r2
 80085da:	b29b      	uxth	r3, r3
 80085dc:	b21a      	sxth	r2, r3
 80085de:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <motor_param_persist_initialize+0xe0>)
 80085e0:	f8a3 2448 	strh.w	r2, [r3, #1096]	; 0x448
    sys_regs.holdings[104] = (int16_T)((int16_T)(ee_ram[9] << 8) + ee_ram[8]);
 80085e4:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085e6:	7a5b      	ldrb	r3, [r3, #9]
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	4b19      	ldr	r3, [pc, #100]	; (8008654 <motor_param_persist_initialize+0xdc>)
 80085ee:	7a1b      	ldrb	r3, [r3, #8]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4413      	add	r3, r2
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	b21a      	sxth	r2, r3
 80085f8:	4b17      	ldr	r3, [pc, #92]	; (8008658 <motor_param_persist_initialize+0xe0>)
 80085fa:	f8a3 24d0 	strh.w	r2, [r3, #1232]	; 0x4d0
    if (ee_ram[100] != 1)
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008600:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008604:	2b01      	cmp	r3, #1
 8008606:	d023      	beq.n	8008650 <motor_param_persist_initialize+0xd8>
    {
        ee_ram[100] = 1U;
 8008608:	4b12      	ldr	r3, [pc, #72]	; (8008654 <motor_param_persist_initialize+0xdc>)
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        ee_ram[0] = 4U;
 8008610:	4b10      	ldr	r3, [pc, #64]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008612:	2204      	movs	r2, #4
 8008614:	701a      	strb	r2, [r3, #0]
        ee_ram[1] = 0U;
 8008616:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008618:	2200      	movs	r2, #0
 800861a:	705a      	strb	r2, [r3, #1]
        ee_ram[2] = 100U;
 800861c:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <motor_param_persist_initialize+0xdc>)
 800861e:	2264      	movs	r2, #100	; 0x64
 8008620:	709a      	strb	r2, [r3, #2]
        ee_ram[3] = 0U;
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008624:	2200      	movs	r2, #0
 8008626:	70da      	strb	r2, [r3, #3]
        ee_ram[4] = 112U;
 8008628:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <motor_param_persist_initialize+0xdc>)
 800862a:	2270      	movs	r2, #112	; 0x70
 800862c:	711a      	strb	r2, [r3, #4]
        ee_ram[5] = 23U;
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008630:	2217      	movs	r2, #23
 8008632:	715a      	strb	r2, [r3, #5]
        ee_ram[6] = 20U;
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008636:	2214      	movs	r2, #20
 8008638:	719a      	strb	r2, [r3, #6]
        ee_ram[7] = 0U;
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <motor_param_persist_initialize+0xdc>)
 800863c:	2200      	movs	r2, #0
 800863e:	71da      	strb	r2, [r3, #7]
        ee_ram[8] = 50U;
 8008640:	4b04      	ldr	r3, [pc, #16]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008642:	2232      	movs	r2, #50	; 0x32
 8008644:	721a      	strb	r2, [r3, #8]
        ee_ram[9] = 0U;
 8008646:	4b03      	ldr	r3, [pc, #12]	; (8008654 <motor_param_persist_initialize+0xdc>)
 8008648:	2200      	movs	r2, #0
 800864a:	725a      	strb	r2, [r3, #9]
        ee_commit();
 800864c:	f7f8 fb6a 	bl	8000d24 <ee_commit>
    }
}
 8008650:	bf00      	nop
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20002f58 	.word	0x20002f58
 8008658:	20002948 	.word	0x20002948

0800865c <div_nde_s32_floor>:
#include "rtwtypes.h"
#include "div_nde_s32_floor.h"

int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
    return (((numerator < 0) != (denominator < 0)) && (numerator % denominator != 0) ? -1 : 0) + numerator / denominator;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	0fdb      	lsrs	r3, r3, #31
 800866a:	b2da      	uxtb	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	0fdb      	lsrs	r3, r3, #31
 8008670:	b2db      	uxtb	r3, r3
 8008672:	4053      	eors	r3, r2
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00c      	beq.n	8008694 <div_nde_s32_floor+0x38>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	fb01 f202 	mul.w	r2, r1, r2
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <div_nde_s32_floor+0x38>
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	e000      	b.n	8008696 <div_nde_s32_floor+0x3a>
 8008694:	2200      	movs	r2, #0
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	fb91 f3f3 	sdiv	r3, r1, r3
 800869e:	4413      	add	r3, r2
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <change_monitor>:
#include "change_monitor.h"

void change_monitor(const int16_T *rtu_debounce, const int16_T *rtu_longpress, const int16_T *rtu_long, const int16_T *rtu_short, const
                    int16_T *rtu_transfer, boolean_T *rty_changed, DW_change_monitor_f_T *localDW)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b087      	sub	sp, #28
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	603b      	str	r3, [r7, #0]
    boolean_T rtb_FixPtRelationalOperator;
    boolean_T rtb_FixPtRelationalOperator_a;
    boolean_T rtb_FixPtRelationalOperator_e;
    boolean_T rtb_FixPtRelationalOperator_h;
    boolean_T rtb_FixPtRelationalOperator_hh;
    rtb_FixPtRelationalOperator = (*rtu_debounce != localDW->DelayInput1_DSTATE);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	bf14      	ite	ne
 80086c8:	2301      	movne	r3, #1
 80086ca:	2300      	moveq	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	75fb      	strb	r3, [r7, #23]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_e;
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_h = (*rtu_longpress != localDW->DelayInput1_DSTATE);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	bf14      	ite	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	2300      	moveq	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	75bb      	strb	r3, [r7, #22]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_k;
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_e = (*rtu_long != localDW->DelayInput1_DSTATE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008708:	429a      	cmp	r2, r3
 800870a:	bf14      	ite	ne
 800870c:	2301      	movne	r3, #1
 800870e:	2300      	moveq	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	757b      	strb	r3, [r7, #21]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_m;
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_hh = (*rtu_short != localDW->DelayInput1_DSTATE);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800872a:	429a      	cmp	r2, r3
 800872c:	bf14      	ite	ne
 800872e:	2301      	movne	r3, #1
 8008730:	2300      	moveq	r3, #0
 8008732:	b2db      	uxtb	r3, r3
 8008734:	753b      	strb	r3, [r7, #20]
    localDW->DelayInput1_DSTATE = localDW->DelayInput1_DSTATE_i;
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	801a      	strh	r2, [r3, #0]
    rtb_FixPtRelationalOperator_a = (*rtu_transfer != localDW->DelayInput1_DSTATE);
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800874c:	429a      	cmp	r2, r3
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	74fb      	strb	r3, [r7, #19]
    rtb_FixPtRelationalOperator = (rtb_FixPtRelationalOperator || rtb_FixPtRelationalOperator_h || rtb_FixPtRelationalOperator_e ||
        rtb_FixPtRelationalOperator_hh || rtb_FixPtRelationalOperator_a);
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <change_monitor+0xcc>
    rtb_FixPtRelationalOperator = (rtb_FixPtRelationalOperator || rtb_FixPtRelationalOperator_h || rtb_FixPtRelationalOperator_e ||
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d108      	bne.n	8008776 <change_monitor+0xcc>
 8008764:	7d7b      	ldrb	r3, [r7, #21]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <change_monitor+0xcc>
 800876a:	7d3b      	ldrb	r3, [r7, #20]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <change_monitor+0xcc>
        rtb_FixPtRelationalOperator_hh || rtb_FixPtRelationalOperator_a);
 8008770:	7cfb      	ldrb	r3, [r7, #19]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <change_monitor+0xd0>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <change_monitor+0xd2>
 800877a:	2300      	movs	r3, #0
    rtb_FixPtRelationalOperator = (rtb_FixPtRelationalOperator || rtb_FixPtRelationalOperator_h || rtb_FixPtRelationalOperator_e ||
 800877c:	75fb      	strb	r3, [r7, #23]
    localDW->Delay_DSTATE = (uint8_T)((uint32_T)rtb_FixPtRelationalOperator + localDW->Delay_DSTATE);
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	7a9a      	ldrb	r2, [r3, #10]
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	4413      	add	r3, r2
 8008786:	b2da      	uxtb	r2, r3
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	729a      	strb	r2, [r3, #10]
    if (localDW->Delay_DSTATE >= 100)
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	7a9b      	ldrb	r3, [r3, #10]
 8008790:	2b63      	cmp	r3, #99	; 0x63
 8008792:	d902      	bls.n	800879a <change_monitor+0xf0>
    {
        localDW->Delay_DSTATE = 100U;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	2264      	movs	r2, #100	; 0x64
 8008798:	729a      	strb	r2, [r3, #10]
    }

    *rty_changed = (rtb_FixPtRelationalOperator && (localDW->Delay_DSTATE >= 2));
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <change_monitor+0x102>
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	7a9b      	ldrb	r3, [r3, #10]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d901      	bls.n	80087ac <change_monitor+0x102>
 80087a8:	2301      	movs	r3, #1
 80087aa:	e000      	b.n	80087ae <change_monitor+0x104>
 80087ac:	2300      	movs	r3, #0
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	701a      	strb	r2, [r3, #0]
    localDW->DelayInput1_DSTATE = *rtu_debounce;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	801a      	strh	r2, [r3, #0]
    localDW->DelayInput1_DSTATE_e = *rtu_longpress;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	805a      	strh	r2, [r3, #2]
    localDW->DelayInput1_DSTATE_k = *rtu_long;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d0:	809a      	strh	r2, [r3, #4]
    localDW->DelayInput1_DSTATE_m = *rtu_short;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	80da      	strh	r2, [r3, #6]
    localDW->DelayInput1_DSTATE_i = *rtu_transfer;
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	811a      	strh	r2, [r3, #8]
}
 80087e6:	bf00      	nop
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bc80      	pop	{r7}
 80087ee:	4770      	bx	lr

080087f0 <motor_channel_MOTOR>:

static void motor_channel_MOTOR(int16_T *rty_up_relay, int16_T *rty_down_relay, RT_MODEL_motor_channel_T * const motor_channel_M,
    DW_motor_channel_f_T *localDW);
static void motor_channel_MOTOR(int16_T *rty_up_relay, int16_T *rty_down_relay, RT_MODEL_motor_channel_T * const motor_channel_M,
    DW_motor_channel_f_T *localDW)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
    InstP_motor_channel_T *motor_channel_InstP_arg = motor_channel_M->motor_channel_InstP_ref;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	617b      	str	r3, [r7, #20]
    switch (localDW->is_MOTOR)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	7c9b      	ldrb	r3, [r3, #18]
 8008808:	3b01      	subs	r3, #1
 800880a:	2b06      	cmp	r3, #6
 800880c:	f200 8107 	bhi.w	8008a1e <motor_channel_MOTOR+0x22e>
 8008810:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <motor_channel_MOTOR+0x28>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	08008835 	.word	0x08008835
 800881c:	0800885b 	.word	0x0800885b
 8008820:	080088b7 	.word	0x080088b7
 8008824:	08008913 	.word	0x08008913
 8008828:	080089a5 	.word	0x080089a5
 800882c:	080089c3 	.word	0x080089c3
 8008830:	080089e1 	.word	0x080089e1
    {
      case motor_channel_IN_DOWN_TO_LONGUP:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->transfer_cnt)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	891a      	ldrh	r2, [r3, #8]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800883e:	b29b      	uxth	r3, r3
 8008840:	429a      	cmp	r2, r3
 8008842:	f0c0 80df 	bcc.w	8008a04 <motor_channel_MOTOR+0x214>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_UP;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2203      	movs	r2, #3
 800884a:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2200      	movs	r2, #0
 8008850:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	801a      	strh	r2, [r3, #0]
        }
        break;
 8008858:	e0d4      	b.n	8008a04 <motor_channel_MOTOR+0x214>

      case motor_channel_IN_LONG_DOWN:
        if ((localDW->sfEvent == motor_chan_event_down_key_click) || (localDW->sfEvent == motor_channe_event_up_key_click) ||
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00f      	beq.n	8008882 <motor_channel_MOTOR+0x92>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b07      	cmp	r3, #7
 8008868:	d00b      	beq.n	8008882 <motor_channel_MOTOR+0x92>
                (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
        if ((localDW->sfEvent == motor_chan_event_down_key_click) || (localDW->sfEvent == motor_channe_event_up_key_click) ||
 800886e:	2b06      	cmp	r3, #6
 8008870:	d007      	beq.n	8008882 <motor_channel_MOTOR+0x92>
                (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	891a      	ldrh	r2, [r3, #8]
                motor_channel_InstP_arg->long_cnt))
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 800887c:	b29b      	uxth	r3, r3
 800887e:	429a      	cmp	r2, r3
 8008880:	d306      	bcc.n	8008890 <motor_channel_MOTOR+0xa0>
        {
            *rty_down_relay = 0;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2204      	movs	r2, #4
 800888c:	749a      	strb	r2, [r3, #18]
        {
            *rty_down_relay = 0;
            localDW->is_MOTOR = motor_channel_IN_DOWN_TO_LONGUP;
            localDW->temporalCounter_i3 = 0U;
        }
        break;
 800888e:	e0bb      	b.n	8008a08 <motor_channel_MOTOR+0x218>
        else if ((localDW->sfEvent == motor_c_event_up_key_long_press) || (localDW->sfEvent == motor_chann_event_long_up_event))
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b08      	cmp	r3, #8
 8008896:	d004      	beq.n	80088a2 <motor_channel_MOTOR+0xb2>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b03      	cmp	r3, #3
 800889e:	f040 80b3 	bne.w	8008a08 <motor_channel_MOTOR+0x218>
            *rty_down_relay = 0;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_DOWN_TO_LONGUP;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2201      	movs	r2, #1
 80088ac:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2200      	movs	r2, #0
 80088b2:	811a      	strh	r2, [r3, #8]
        break;
 80088b4:	e0a8      	b.n	8008a08 <motor_channel_MOTOR+0x218>

      case motor_channel_IN_LONG_UP:
        if ((localDW->sfEvent == motor_event_down_key_long_press) || (localDW->sfEvent == motor_cha_event_long_down_event))
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d003      	beq.n	80088c6 <motor_channel_MOTOR+0xd6>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d109      	bne.n	80088da <motor_channel_MOTOR+0xea>
        {
            *rty_up_relay = 0;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_UP_TO_LONGDOWN;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2207      	movs	r2, #7
 80088d0:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2200      	movs	r2, #0
 80088d6:	811a      	strh	r2, [r3, #8]
                  motor_channel_InstP_arg->long_cnt))
        {
            *rty_up_relay = 0;
            localDW->is_MOTOR = motor_channel_IN_OFF;
        }
        break;
 80088d8:	e098      	b.n	8008a0c <motor_channel_MOTOR+0x21c>
        else if ((localDW->sfEvent == motor_channe_event_up_key_click) || (localDW->sfEvent == motor_chan_event_down_key_click) ||
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b07      	cmp	r3, #7
 80088e0:	d010      	beq.n	8008904 <motor_channel_MOTOR+0x114>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <motor_channel_MOTOR+0x114>
                 (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
        else if ((localDW->sfEvent == motor_channe_event_up_key_click) || (localDW->sfEvent == motor_chan_event_down_key_click) ||
 80088ee:	2b06      	cmp	r3, #6
 80088f0:	d008      	beq.n	8008904 <motor_channel_MOTOR+0x114>
                 (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	891a      	ldrh	r2, [r3, #8]
                  motor_channel_InstP_arg->long_cnt))
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
                 (localDW->sfEvent == motor_channel_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	429a      	cmp	r2, r3
 8008900:	f0c0 8084 	bcc.w	8008a0c <motor_channel_MOTOR+0x21c>
            *rty_up_relay = 0;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2204      	movs	r2, #4
 800890e:	749a      	strb	r2, [r3, #18]
        break;
 8008910:	e07c      	b.n	8008a0c <motor_channel_MOTOR+0x21c>

      case motor_channel_IN_OFF:
        if ((localDW->sfEvent == motor_channe_event_up_key_click) || (localDW->sfEvent == motor_chan_event_short_up_event))
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b07      	cmp	r3, #7
 8008918:	d003      	beq.n	8008922 <motor_channel_MOTOR+0x132>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d109      	bne.n	8008936 <motor_channel_MOTOR+0x146>
        {
            localDW->is_MOTOR = motor_channel_IN_SHORT_UP_m;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2206      	movs	r2, #6
 8008926:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2200      	movs	r2, #0
 800892c:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e035      	b.n	80089a2 <motor_channel_MOTOR+0x1b2>
        }
        else if ((localDW->sfEvent == motor_c_event_up_key_long_press) || (localDW->sfEvent == motor_chann_event_long_up_event))
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b08      	cmp	r3, #8
 800893c:	d003      	beq.n	8008946 <motor_channel_MOTOR+0x156>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b03      	cmp	r3, #3
 8008944:	d109      	bne.n	800895a <motor_channel_MOTOR+0x16a>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_UP;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2203      	movs	r2, #3
 800894a:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2200      	movs	r2, #0
 8008950:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	e023      	b.n	80089a2 <motor_channel_MOTOR+0x1b2>
        }
        else if ((localDW->sfEvent == motor_chan_event_down_key_click) || (localDW->sfEvent == motor_ch_event_short_down_event))
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <motor_channel_MOTOR+0x17a>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b04      	cmp	r3, #4
 8008968:	d109      	bne.n	800897e <motor_channel_MOTOR+0x18e>
        {
            localDW->is_MOTOR = motor_channel_IN_SHORT_DOWN_f;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2205      	movs	r2, #5
 800896e:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2200      	movs	r2, #0
 8008974:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2201      	movs	r2, #1
 800897a:	801a      	strh	r2, [r3, #0]
 800897c:	e011      	b.n	80089a2 <motor_channel_MOTOR+0x1b2>
        }
        else if ((localDW->sfEvent == motor_event_down_key_long_press) || (localDW->sfEvent == motor_cha_event_long_down_event))
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d003      	beq.n	800898e <motor_channel_MOTOR+0x19e>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d140      	bne.n	8008a10 <motor_channel_MOTOR+0x220>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_DOWN;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2202      	movs	r2, #2
 8008992:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2201      	movs	r2, #1
 800899e:	801a      	strh	r2, [r3, #0]
        }
        break;
 80089a0:	e036      	b.n	8008a10 <motor_channel_MOTOR+0x220>
 80089a2:	e035      	b.n	8008a10 <motor_channel_MOTOR+0x220>

      case motor_channel_IN_SHORT_DOWN_f:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	891a      	ldrh	r2, [r3, #8]
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d32f      	bcc.n	8008a14 <motor_channel_MOTOR+0x224>
        {
            *rty_down_relay = 0;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2204      	movs	r2, #4
 80089be:	749a      	strb	r2, [r3, #18]
        }
        break;
 80089c0:	e028      	b.n	8008a14 <motor_channel_MOTOR+0x224>

      case motor_channel_IN_SHORT_UP_m:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	891a      	ldrh	r2, [r3, #8]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d322      	bcc.n	8008a18 <motor_channel_MOTOR+0x228>
        {
            *rty_up_relay = 0;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_channel_IN_OFF;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2204      	movs	r2, #4
 80089dc:	749a      	strb	r2, [r3, #18]
        }
        break;
 80089de:	e01b      	b.n	8008a18 <motor_channel_MOTOR+0x228>

      case motor_channel_IN_UP_TO_LONGDOWN:
        if (localDW->temporalCounter_i3 >= (uint16_T)motor_channel_InstP_arg->transfer_cnt)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	891a      	ldrh	r2, [r3, #8]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d315      	bcc.n	8008a1c <motor_channel_MOTOR+0x22c>
        {
            localDW->is_MOTOR = motor_channel_IN_LONG_DOWN;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2202      	movs	r2, #2
 80089f4:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2200      	movs	r2, #0
 80089fa:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2201      	movs	r2, #1
 8008a00:	801a      	strh	r2, [r3, #0]
        }
        break;
 8008a02:	e00b      	b.n	8008a1c <motor_channel_MOTOR+0x22c>
        break;
 8008a04:	bf00      	nop
 8008a06:	e00a      	b.n	8008a1e <motor_channel_MOTOR+0x22e>
        break;
 8008a08:	bf00      	nop
 8008a0a:	e008      	b.n	8008a1e <motor_channel_MOTOR+0x22e>
        break;
 8008a0c:	bf00      	nop
 8008a0e:	e006      	b.n	8008a1e <motor_channel_MOTOR+0x22e>
        break;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <motor_channel_MOTOR+0x22e>
        break;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <motor_channel_MOTOR+0x22e>
        break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <motor_channel_MOTOR+0x22e>
        break;
 8008a1c:	bf00      	nop
    }
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr

08008a28 <motor_channel_Init>:

void motor_channel_Init(DW_motor_channel_f_T *localDW)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
    localDW->sfEvent = motor_channel_CALL_EVENT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	601a      	str	r2, [r3, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bc80      	pop	{r7}
 8008a40:	4770      	bx	lr
	...

08008a44 <motor_channel>:

void motor_channel(RT_MODEL_motor_channel_T * const motor_channel_M, const int16_T rtu_ch_btns[2], const int16_T rtu_gp_btns[2], const
                   int16_T rtu_ch_coms[5], const int16_T rtu_gp_coms[5], const int16_T rtu_ch_rmts[5], const int16_T rtu_gp_rmts[5], const
                   int16_T *rtu_com_only, int16_T *rty_up_relay, int16_T *rty_down_relay, DW_motor_channel_f_T *localDW)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	; 0x28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
    InstP_motor_channel_T *motor_channel_InstP_arg = motor_channel_M->motor_channel_InstP_ref;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	61bb      	str	r3, [r7, #24]
    boolean_T Switch3;
    boolean_T Switch4;
    boolean_T Switch5;
    boolean_T Switch6;
    boolean_T Switch7;
    if (*rtu_com_only != 0)
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d056      	beq.n	8008b10 <motor_channel+0xcc>
    {
        Switch1 = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	84fb      	strh	r3, [r7, #38]	; 0x26
        Switch3 = ((rtu_ch_coms[0] != 0) || (rtu_gp_coms[0] != 0));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <motor_channel+0x36>
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <motor_channel+0x3a>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <motor_channel+0x3c>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        Switch4 = ((rtu_ch_coms[1] != 0) || (rtu_gp_coms[1] != 0));
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	3302      	adds	r3, #2
 8008a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d105      	bne.n	8008a9c <motor_channel+0x58>
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	3302      	adds	r3, #2
 8008a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <motor_channel+0x5c>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e000      	b.n	8008aa2 <motor_channel+0x5e>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        Switch5 = ((rtu_ch_coms[2] != 0) || (rtu_gp_coms[2] != 0));
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d105      	bne.n	8008abe <motor_channel+0x7a>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <motor_channel+0x7e>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <motor_channel+0x80>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        Switch6 = ((rtu_ch_coms[3] != 0) || (rtu_gp_coms[3] != 0));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	3306      	adds	r3, #6
 8008acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d105      	bne.n	8008ae0 <motor_channel+0x9c>
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	3306      	adds	r3, #6
 8008ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <motor_channel+0xa0>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <motor_channel+0xa2>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 3020 	strb.w	r3, [r7, #32]
        Switch2 = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	84bb      	strh	r3, [r7, #36]	; 0x24
        Switch7 = ((rtu_ch_coms[4] != 0) || (rtu_gp_coms[4] != 0));
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	3308      	adds	r3, #8
 8008af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <motor_channel+0xc2>
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	3308      	adds	r3, #8
 8008afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <motor_channel+0xc6>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <motor_channel+0xc8>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	77fb      	strb	r3, [r7, #31]
 8008b0e:	e0a9      	b.n	8008c64 <motor_channel+0x220>
    }
    else
    {
        Switch1 = (int16_T)((rtu_ch_btns[0] != 0) || (rtu_gp_btns[0] != 0));
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d104      	bne.n	8008b24 <motor_channel+0xe0>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <motor_channel+0xe4>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e000      	b.n	8008b2a <motor_channel+0xe6>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Switch3 = ((rtu_ch_coms[0] != 0) || (rtu_gp_coms[0] != 0) || ((rtu_ch_rmts[0] != 0) || (rtu_gp_rmts[0] != 0)));
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10e      	bne.n	8008b54 <motor_channel+0x110>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <motor_channel+0x110>
 8008b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <motor_channel+0x110>
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <motor_channel+0x114>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <motor_channel+0x116>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        Switch4 = ((rtu_ch_coms[1] != 0) || (rtu_gp_coms[1] != 0) || ((rtu_ch_rmts[1] != 0) || (rtu_gp_rmts[1] != 0)));
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	3302      	adds	r3, #2
 8008b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d111      	bne.n	8008b8e <motor_channel+0x14a>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <motor_channel+0x14a>
 8008b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b78:	3302      	adds	r3, #2
 8008b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d105      	bne.n	8008b8e <motor_channel+0x14a>
 8008b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b84:	3302      	adds	r3, #2
 8008b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <motor_channel+0x14e>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <motor_channel+0x150>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        Switch5 = ((rtu_ch_coms[2] != 0) || (rtu_gp_coms[2] != 0) || ((rtu_ch_rmts[2] != 0) || (rtu_gp_rmts[2] != 0)));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d111      	bne.n	8008bc8 <motor_channel+0x184>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <motor_channel+0x184>
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d105      	bne.n	8008bc8 <motor_channel+0x184>
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <motor_channel+0x188>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e000      	b.n	8008bce <motor_channel+0x18a>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        Switch6 = ((rtu_ch_coms[3] != 0) || (rtu_gp_coms[3] != 0) || ((rtu_ch_rmts[3] != 0) || (rtu_gp_rmts[3] != 0)));
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	3306      	adds	r3, #6
 8008bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d111      	bne.n	8008c02 <motor_channel+0x1be>
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	3306      	adds	r3, #6
 8008be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10b      	bne.n	8008c02 <motor_channel+0x1be>
 8008bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bec:	3306      	adds	r3, #6
 8008bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d105      	bne.n	8008c02 <motor_channel+0x1be>
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	3306      	adds	r3, #6
 8008bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <motor_channel+0x1c2>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <motor_channel+0x1c4>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f887 3020 	strb.w	r3, [r7, #32]
        Switch2 = (int16_T)((rtu_ch_btns[1] != 0) || (rtu_gp_btns[1] != 0));
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3302      	adds	r3, #2
 8008c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <motor_channel+0x1e0>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3302      	adds	r3, #2
 8008c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <motor_channel+0x1e4>
 8008c24:	2301      	movs	r3, #1
 8008c26:	e000      	b.n	8008c2a <motor_channel+0x1e6>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	84bb      	strh	r3, [r7, #36]	; 0x24
        Switch7 = ((rtu_ch_coms[4] != 0) || (rtu_gp_coms[4] != 0) || ((rtu_ch_rmts[4] != 0) || (rtu_gp_rmts[4] != 0)));
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d111      	bne.n	8008c5c <motor_channel+0x218>
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10b      	bne.n	8008c5c <motor_channel+0x218>
 8008c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c46:	3308      	adds	r3, #8
 8008c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d105      	bne.n	8008c5c <motor_channel+0x218>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	3308      	adds	r3, #8
 8008c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <motor_channel+0x21c>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <motor_channel+0x21e>
 8008c60:	2300      	movs	r3, #0
 8008c62:	77fb      	strb	r3, [r7, #31]
    }

    localDW->sfEvent = motor_channel_CALL_EVENT;
 8008c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	601a      	str	r2, [r3, #0]
    if (localDW->temporalCounter_i1 < 32767U)
 8008c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6e:	889b      	ldrh	r3, [r3, #4]
 8008c70:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d805      	bhi.n	8008c84 <motor_channel+0x240>
    {
        localDW->temporalCounter_i1++;
 8008c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c7a:	889b      	ldrh	r3, [r3, #4]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c82:	809a      	strh	r2, [r3, #4]
    }

    if (localDW->temporalCounter_i2 < 32767U)
 8008c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c86:	88db      	ldrh	r3, [r3, #6]
 8008c88:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d805      	bhi.n	8008c9c <motor_channel+0x258>
    {
        localDW->temporalCounter_i2++;
 8008c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c92:	88db      	ldrh	r3, [r3, #6]
 8008c94:	3301      	adds	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9a:	80da      	strh	r2, [r3, #6]
    }

    if (localDW->temporalCounter_i3 < 32767U)
 8008c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9e:	891b      	ldrh	r3, [r3, #8]
 8008ca0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d805      	bhi.n	8008cb4 <motor_channel+0x270>
    {
        localDW->temporalCounter_i3++;
 8008ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008caa:	891b      	ldrh	r3, [r3, #8]
 8008cac:	3301      	adds	r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb2:	811a      	strh	r2, [r3, #8]
    }

    if (localDW->is_active_c3_motor_channel == 0U)
 8008cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cb6:	7a9b      	ldrb	r3, [r3, #10]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d118      	bne.n	8008cee <motor_channel+0x2aa>
    {
        localDW->is_active_c3_motor_channel = 1U;
 8008cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	729a      	strb	r2, [r3, #10]
        localDW->is_c3_motor_channel = motor_channel_IN_MOTOR_CTRL;
 8008cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	72da      	strb	r2, [r3, #11]
        localDW->is_active_COM_CMD = 1U;
 8008cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cca:	2201      	movs	r2, #1
 8008ccc:	735a      	strb	r2, [r3, #13]
        localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	731a      	strb	r2, [r3, #12]
        localDW->is_active_KEY_CMD = 1U;
 8008cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	73da      	strb	r2, [r3, #15]
        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cdc:	2202      	movs	r2, #2
 8008cde:	739a      	strb	r2, [r3, #14]
        localDW->is_active_MOTOR = 1U;
 8008ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	74da      	strb	r2, [r3, #19]
        localDW->is_MOTOR = motor_channel_IN_OFF;
 8008ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce8:	2204      	movs	r2, #4
 8008cea:	749a      	strb	r2, [r3, #18]
        if (localDW->is_active_MOTOR != 0U)
        {
            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
        }
    }
}
 8008cec:	e223      	b.n	8009136 <motor_channel+0x6f2>
    else if (localDW->is_c3_motor_channel == 1)
 8008cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf0:	7adb      	ldrb	r3, [r3, #11]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	f040 821f 	bne.w	8009136 <motor_channel+0x6f2>
        if (localDW->is_active_COM_CMD != 0U)
 8008cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfa:	7b5b      	ldrb	r3, [r3, #13]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80e6 	beq.w	8008ece <motor_channel+0x48a>
            switch (localDW->is_COM_CMD)
 8008d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d04:	7b1b      	ldrb	r3, [r3, #12]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b05      	cmp	r3, #5
 8008d0a:	f200 80ed 	bhi.w	8008ee8 <motor_channel+0x4a4>
 8008d0e:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <motor_channel+0x2d0>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008e57 	.word	0x08008e57
 8008d1c:	08008e6f 	.word	0x08008e6f
 8008d20:	08008e87 	.word	0x08008e87
 8008d24:	08008e9f 	.word	0x08008e9f
 8008d28:	08008eb7 	.word	0x08008eb7
                if (Switch7)
 8008d2c:	7ffb      	ldrb	r3, [r7, #31]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d019      	beq.n	8008d66 <motor_channel+0x322>
                    localDW->is_COM_CMD = motor_channel_IN_LONG_DOWN;
 8008d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d34:	2202      	movs	r2, #2
 8008d36:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_cha_event_long_down_event;
 8008d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d46:	2202      	movs	r2, #2
 8008d48:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d4c:	7cdb      	ldrb	r3, [r3, #19]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <motor_channel+0x31a>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008d5a:	f7ff fd49 	bl	80087f0 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	601a      	str	r2, [r3, #0]
                break;
 8008d64:	e0b5      	b.n	8008ed2 <motor_channel+0x48e>
                else if (Switch5)
 8008d66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d019      	beq.n	8008da2 <motor_channel+0x35e>
                    localDW->is_COM_CMD = motor_channel_IN_STOP;
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d70:	2206      	movs	r2, #6
 8008d72:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d76:	2200      	movs	r2, #0
 8008d78:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_channel_event_stop_event;
 8008d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d82:	2206      	movs	r2, #6
 8008d84:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d88:	7cdb      	ldrb	r3, [r3, #19]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <motor_channel+0x356>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008d96:	f7ff fd2b 	bl	80087f0 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	601a      	str	r2, [r3, #0]
                break;
 8008da0:	e097      	b.n	8008ed2 <motor_channel+0x48e>
                else if (Switch3)
 8008da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d019      	beq.n	8008dde <motor_channel+0x39a>
                    localDW->is_COM_CMD = motor_channel_IN_SHORT_UP;
 8008daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dac:	2205      	movs	r2, #5
 8008dae:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db2:	2200      	movs	r2, #0
 8008db4:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_chan_event_short_up_event;
 8008dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dbe:	2205      	movs	r2, #5
 8008dc0:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc4:	7cdb      	ldrb	r3, [r3, #19]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <motor_channel+0x392>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008dd2:	f7ff fd0d 	bl	80087f0 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	601a      	str	r2, [r3, #0]
                break;
 8008ddc:	e079      	b.n	8008ed2 <motor_channel+0x48e>
                else if (Switch4)
 8008dde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d019      	beq.n	8008e1a <motor_channel+0x3d6>
                    localDW->is_COM_CMD = motor_channel_IN_LONG_UP;
 8008de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de8:	2203      	movs	r2, #3
 8008dea:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dee:	2200      	movs	r2, #0
 8008df0:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_chann_event_long_up_event;
 8008df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e00:	7cdb      	ldrb	r3, [r3, #19]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d005      	beq.n	8008e12 <motor_channel+0x3ce>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e0e:	f7ff fcef 	bl	80087f0 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	601a      	str	r2, [r3, #0]
                break;
 8008e18:	e05b      	b.n	8008ed2 <motor_channel+0x48e>
                else if (Switch6)
 8008e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d057      	beq.n	8008ed2 <motor_channel+0x48e>
                    localDW->is_COM_CMD = motor_channel_IN_SHORT_DOWN;
 8008e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e24:	2204      	movs	r2, #4
 8008e26:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	617b      	str	r3, [r7, #20]
                    localDW->sfEvent = motor_ch_event_short_down_event;
 8008e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e36:	2204      	movs	r2, #4
 8008e38:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e3c:	7cdb      	ldrb	r3, [r3, #19]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <motor_channel+0x40a>
                        motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e48:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e4a:	f7ff fcd1 	bl	80087f0 <motor_channel_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	601a      	str	r2, [r3, #0]
                break;
 8008e54:	e03d      	b.n	8008ed2 <motor_channel+0x48e>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e58:	889a      	ldrh	r2, [r3, #4]
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d337      	bcc.n	8008ed6 <motor_channel+0x492>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e68:	2201      	movs	r2, #1
 8008e6a:	731a      	strb	r2, [r3, #12]
                break;
 8008e6c:	e033      	b.n	8008ed6 <motor_channel+0x492>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e70:	889a      	ldrh	r2, [r3, #4]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d32d      	bcc.n	8008eda <motor_channel+0x496>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	2201      	movs	r2, #1
 8008e82:	731a      	strb	r2, [r3, #12]
                break;
 8008e84:	e029      	b.n	8008eda <motor_channel+0x496>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e88:	889a      	ldrh	r2, [r3, #4]
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d323      	bcc.n	8008ede <motor_channel+0x49a>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e98:	2201      	movs	r2, #1
 8008e9a:	731a      	strb	r2, [r3, #12]
                break;
 8008e9c:	e01f      	b.n	8008ede <motor_channel+0x49a>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea0:	889a      	ldrh	r2, [r3, #4]
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d319      	bcc.n	8008ee2 <motor_channel+0x49e>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	731a      	strb	r2, [r3, #12]
                break;
 8008eb4:	e015      	b.n	8008ee2 <motor_channel+0x49e>
                if (localDW->temporalCounter_i1 >= (uint16_T)motor_channel_InstP_arg->short_cnt)
 8008eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb8:	889a      	ldrh	r2, [r3, #4]
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d30f      	bcc.n	8008ee6 <motor_channel+0x4a2>
                    localDW->is_COM_CMD = motor_channel_IN_IDLE;
 8008ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ec8:	2201      	movs	r2, #1
 8008eca:	731a      	strb	r2, [r3, #12]
                break;
 8008ecc:	e00b      	b.n	8008ee6 <motor_channel+0x4a2>
        }
 8008ece:	bf00      	nop
 8008ed0:	e00a      	b.n	8008ee8 <motor_channel+0x4a4>
                break;
 8008ed2:	bf00      	nop
 8008ed4:	e008      	b.n	8008ee8 <motor_channel+0x4a4>
                break;
 8008ed6:	bf00      	nop
 8008ed8:	e006      	b.n	8008ee8 <motor_channel+0x4a4>
                break;
 8008eda:	bf00      	nop
 8008edc:	e004      	b.n	8008ee8 <motor_channel+0x4a4>
                break;
 8008ede:	bf00      	nop
 8008ee0:	e002      	b.n	8008ee8 <motor_channel+0x4a4>
                break;
 8008ee2:	bf00      	nop
 8008ee4:	e000      	b.n	8008ee8 <motor_channel+0x4a4>
                break;
 8008ee6:	bf00      	nop
        if (localDW->is_active_KEY_CMD != 0U)
 8008ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eea:	7bdb      	ldrb	r3, [r3, #15]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8111 	beq.w	8009114 <motor_channel+0x6d0>
            switch (localDW->is_KEY_CMD)
 8008ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ef4:	7b9b      	ldrb	r3, [r3, #14]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	f000 8099 	beq.w	800902e <motor_channel+0x5ea>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	f300 8110 	bgt.w	8009122 <motor_channel+0x6de>
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d002      	beq.n	8008f0c <motor_channel+0x4c8>
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d074      	beq.n	8008ff4 <motor_channel+0x5b0>
 8008f0a:	e10a      	b.n	8009122 <motor_channel+0x6de>
                switch (localDW->is_DOWN_KEY_PRESSED)
 8008f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f0e:	7c1b      	ldrb	r3, [r3, #16]
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d05e      	beq.n	8008fd2 <motor_channel+0x58e>
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	f300 80ff 	bgt.w	8009118 <motor_channel+0x6d4>
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d002      	beq.n	8008f24 <motor_channel+0x4e0>
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d03d      	beq.n	8008f9e <motor_channel+0x55a>
                break;
 8008f22:	e0f9      	b.n	8009118 <motor_channel+0x6d4>
                    if (Switch2 != 1)
 8008f24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d019      	beq.n	8008f60 <motor_channel+0x51c>
                        h_previousEvent = localDW->sfEvent;
 8008f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_chan_event_down_key_click;
 8008f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3a:	7cdb      	ldrb	r3, [r3, #19]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <motor_channel+0x508>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f46:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f48:	f7ff fc52 	bl	80087f0 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	601a      	str	r2, [r3, #0]
                        localDW->is_DOWN_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f54:	2200      	movs	r2, #0
 8008f56:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	739a      	strb	r2, [r3, #14]
                    break;
 8008f5e:	e043      	b.n	8008fe8 <motor_channel+0x5a4>
                    else if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->longpress_cnt)
 8008f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f62:	88da      	ldrh	r2, [r3, #6]
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d33b      	bcc.n	8008fe8 <motor_channel+0x5a4>
                        localDW->is_DOWN_KEY_PRESSED = motor_channel_IN_DOWN_LONGPRESS;
 8008f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f72:	2203      	movs	r2, #3
 8008f74:	741a      	strb	r2, [r3, #16]
                        h_previousEvent = localDW->sfEvent;
 8008f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_event_down_key_long_press;
 8008f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7e:	2201      	movs	r2, #1
 8008f80:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f84:	7cdb      	ldrb	r3, [r3, #19]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <motor_channel+0x552>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f92:	f7ff fc2d 	bl	80087f0 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	601a      	str	r2, [r3, #0]
                    break;
 8008f9c:	e024      	b.n	8008fe8 <motor_channel+0x5a4>
                    if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->debounce_cnt)
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa0:	88da      	ldrh	r2, [r3, #6]
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d306      	bcc.n	8008fbc <motor_channel+0x578>
                        localDW->is_DOWN_KEY_PRESSED = motor_channel_IN_DOWN_CLICK;
 8008fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	741a      	strb	r2, [r3, #16]
                        localDW->temporalCounter_i2 = 0U;
 8008fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	80da      	strh	r2, [r3, #6]
                    break;
 8008fba:	e017      	b.n	8008fec <motor_channel+0x5a8>
                    else if (Switch2 != 1)
 8008fbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d013      	beq.n	8008fec <motor_channel+0x5a8>
                        localDW->is_DOWN_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fcc:	2202      	movs	r2, #2
 8008fce:	739a      	strb	r2, [r3, #14]
                    break;
 8008fd0:	e00c      	b.n	8008fec <motor_channel+0x5a8>
                    if (Switch2 != 1)
 8008fd2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d00a      	beq.n	8008ff0 <motor_channel+0x5ac>
                        localDW->is_DOWN_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8008fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fdc:	2200      	movs	r2, #0
 8008fde:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8008fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	739a      	strb	r2, [r3, #14]
                    break;
 8008fe6:	e003      	b.n	8008ff0 <motor_channel+0x5ac>
                    break;
 8008fe8:	bf00      	nop
 8008fea:	e095      	b.n	8009118 <motor_channel+0x6d4>
                    break;
 8008fec:	bf00      	nop
 8008fee:	e093      	b.n	8009118 <motor_channel+0x6d4>
                    break;
 8008ff0:	bf00      	nop
                break;
 8008ff2:	e091      	b.n	8009118 <motor_channel+0x6d4>
                if (Switch1 == 1)
 8008ff4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d109      	bne.n	8009010 <motor_channel+0x5cc>
                    localDW->is_KEY_CMD = motor_channel_IN_UP_KEY_PRESSED;
 8008ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffe:	2203      	movs	r2, #3
 8009000:	739a      	strb	r2, [r3, #14]
                    localDW->is_UP_KEY_PRESSED = motor_channel_IN_UP_DEBOUNCE;
 8009002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009004:	2202      	movs	r2, #2
 8009006:	745a      	strb	r2, [r3, #17]
                    localDW->temporalCounter_i2 = 0U;
 8009008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900a:	2200      	movs	r2, #0
 800900c:	80da      	strh	r2, [r3, #6]
                break;
 800900e:	e085      	b.n	800911c <motor_channel+0x6d8>
                else if (Switch2 == 1)
 8009010:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009014:	2b01      	cmp	r3, #1
 8009016:	f040 8081 	bne.w	800911c <motor_channel+0x6d8>
                    localDW->is_KEY_CMD = motor_chann_IN_DOWN_KEY_PRESSED;
 800901a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800901c:	2201      	movs	r2, #1
 800901e:	739a      	strb	r2, [r3, #14]
                    localDW->is_DOWN_KEY_PRESSED = motor_channel_IN_DOWN_DEBOUNCE;
 8009020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009022:	2202      	movs	r2, #2
 8009024:	741a      	strb	r2, [r3, #16]
                    localDW->temporalCounter_i2 = 0U;
 8009026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009028:	2200      	movs	r2, #0
 800902a:	80da      	strh	r2, [r3, #6]
                break;
 800902c:	e076      	b.n	800911c <motor_channel+0x6d8>
                switch (localDW->is_UP_KEY_PRESSED)
 800902e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009030:	7c5b      	ldrb	r3, [r3, #17]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d05d      	beq.n	80090f2 <motor_channel+0x6ae>
 8009036:	2b03      	cmp	r3, #3
 8009038:	dc72      	bgt.n	8009120 <motor_channel+0x6dc>
 800903a:	2b01      	cmp	r3, #1
 800903c:	d002      	beq.n	8009044 <motor_channel+0x600>
 800903e:	2b02      	cmp	r3, #2
 8009040:	d03d      	beq.n	80090be <motor_channel+0x67a>
                break;
 8009042:	e06d      	b.n	8009120 <motor_channel+0x6dc>
                    if (Switch1 != 1)
 8009044:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009048:	2b01      	cmp	r3, #1
 800904a:	d019      	beq.n	8009080 <motor_channel+0x63c>
                        h_previousEvent = localDW->sfEvent;
 800904c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_channe_event_up_key_click;
 8009052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009054:	2207      	movs	r2, #7
 8009056:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8009058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800905a:	7cdb      	ldrb	r3, [r3, #19]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <motor_channel+0x628>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 8009060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009066:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009068:	f7ff fbc2 	bl	80087f0 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 800906c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	601a      	str	r2, [r3, #0]
                        localDW->is_UP_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 8009072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009074:	2200      	movs	r2, #0
 8009076:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8009078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907a:	2202      	movs	r2, #2
 800907c:	739a      	strb	r2, [r3, #14]
                    break;
 800907e:	e043      	b.n	8009108 <motor_channel+0x6c4>
                    else if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->longpress_cnt)
 8009080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009082:	88da      	ldrh	r2, [r3, #6]
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800908a:	b29b      	uxth	r3, r3
 800908c:	429a      	cmp	r2, r3
 800908e:	d33b      	bcc.n	8009108 <motor_channel+0x6c4>
                        localDW->is_UP_KEY_PRESSED = motor_channel_IN_UP_LONGPRESS;
 8009090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009092:	2203      	movs	r2, #3
 8009094:	745a      	strb	r2, [r3, #17]
                        h_previousEvent = localDW->sfEvent;
 8009096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	617b      	str	r3, [r7, #20]
                        localDW->sfEvent = motor_c_event_up_key_long_press;
 800909c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909e:	2208      	movs	r2, #8
 80090a0:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 80090a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a4:	7cdb      	ldrb	r3, [r3, #19]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <motor_channel+0x672>
                            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 80090aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80090b2:	f7ff fb9d 	bl	80087f0 <motor_channel_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 80090b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	601a      	str	r2, [r3, #0]
                    break;
 80090bc:	e024      	b.n	8009108 <motor_channel+0x6c4>
                    if (localDW->temporalCounter_i2 >= (uint16_T)motor_channel_InstP_arg->debounce_cnt)
 80090be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c0:	88da      	ldrh	r2, [r3, #6]
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d306      	bcc.n	80090dc <motor_channel+0x698>
                        localDW->is_UP_KEY_PRESSED = motor_channel_IN_UP_CLICK;
 80090ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d0:	2201      	movs	r2, #1
 80090d2:	745a      	strb	r2, [r3, #17]
                        localDW->temporalCounter_i2 = 0U;
 80090d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d6:	2200      	movs	r2, #0
 80090d8:	80da      	strh	r2, [r3, #6]
                    break;
 80090da:	e017      	b.n	800910c <motor_channel+0x6c8>
                    else if (Switch1 != 1)
 80090dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d013      	beq.n	800910c <motor_channel+0x6c8>
                        localDW->is_UP_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 80090e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e6:	2200      	movs	r2, #0
 80090e8:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 80090ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ec:	2202      	movs	r2, #2
 80090ee:	739a      	strb	r2, [r3, #14]
                    break;
 80090f0:	e00c      	b.n	800910c <motor_channel+0x6c8>
                    if (Switch1 != 1)
 80090f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d00a      	beq.n	8009110 <motor_channel+0x6cc>
                        localDW->is_UP_KEY_PRESSED = motor_channe_IN_NO_ACTIVE_CHILD;
 80090fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fc:	2200      	movs	r2, #0
 80090fe:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_channel_IN_IDLE_d;
 8009100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009102:	2202      	movs	r2, #2
 8009104:	739a      	strb	r2, [r3, #14]
                    break;
 8009106:	e003      	b.n	8009110 <motor_channel+0x6cc>
                    break;
 8009108:	bf00      	nop
 800910a:	e009      	b.n	8009120 <motor_channel+0x6dc>
                    break;
 800910c:	bf00      	nop
 800910e:	e007      	b.n	8009120 <motor_channel+0x6dc>
                    break;
 8009110:	bf00      	nop
                break;
 8009112:	e005      	b.n	8009120 <motor_channel+0x6dc>
        }
 8009114:	bf00      	nop
 8009116:	e004      	b.n	8009122 <motor_channel+0x6de>
                break;
 8009118:	bf00      	nop
 800911a:	e002      	b.n	8009122 <motor_channel+0x6de>
                break;
 800911c:	bf00      	nop
 800911e:	e000      	b.n	8009122 <motor_channel+0x6de>
                break;
 8009120:	bf00      	nop
        if (localDW->is_active_MOTOR != 0U)
 8009122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009124:	7cdb      	ldrb	r3, [r3, #19]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <motor_channel+0x6f2>
            motor_channel_MOTOR(rty_up_relay, rty_down_relay, motor_channel_M, localDW);
 800912a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009130:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009132:	f7ff fb5d 	bl	80087f0 <motor_channel_MOTOR>
}
 8009136:	bf00      	nop
 8009138:	3728      	adds	r7, #40	; 0x28
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	2600      	movs	r6, #0
 8009144:	4d0c      	ldr	r5, [pc, #48]	; (8009178 <__libc_init_array+0x38>)
 8009146:	4c0d      	ldr	r4, [pc, #52]	; (800917c <__libc_init_array+0x3c>)
 8009148:	1b64      	subs	r4, r4, r5
 800914a:	10a4      	asrs	r4, r4, #2
 800914c:	42a6      	cmp	r6, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	f000 f8f4 	bl	800933c <_init>
 8009154:	2600      	movs	r6, #0
 8009156:	4d0a      	ldr	r5, [pc, #40]	; (8009180 <__libc_init_array+0x40>)
 8009158:	4c0a      	ldr	r4, [pc, #40]	; (8009184 <__libc_init_array+0x44>)
 800915a:	1b64      	subs	r4, r4, r5
 800915c:	10a4      	asrs	r4, r4, #2
 800915e:	42a6      	cmp	r6, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f855 3b04 	ldr.w	r3, [r5], #4
 8009168:	4798      	blx	r3
 800916a:	3601      	adds	r6, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009172:	4798      	blx	r3
 8009174:	3601      	adds	r6, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	080096b0 	.word	0x080096b0
 800917c:	080096b0 	.word	0x080096b0
 8009180:	080096b0 	.word	0x080096b0
 8009184:	080096b4 	.word	0x080096b4

08009188 <__retarget_lock_acquire_recursive>:
 8009188:	4770      	bx	lr

0800918a <__retarget_lock_release_recursive>:
 800918a:	4770      	bx	lr

0800918c <memcpy>:
 800918c:	440a      	add	r2, r1
 800918e:	4291      	cmp	r1, r2
 8009190:	f100 33ff 	add.w	r3, r0, #4294967295
 8009194:	d100      	bne.n	8009198 <memcpy+0xc>
 8009196:	4770      	bx	lr
 8009198:	b510      	push	{r4, lr}
 800919a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800919e:	4291      	cmp	r1, r2
 80091a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a4:	d1f9      	bne.n	800919a <memcpy+0xe>
 80091a6:	bd10      	pop	{r4, pc}

080091a8 <memset>:
 80091a8:	4603      	mov	r3, r0
 80091aa:	4402      	add	r2, r0
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d100      	bne.n	80091b2 <memset+0xa>
 80091b0:	4770      	bx	lr
 80091b2:	f803 1b01 	strb.w	r1, [r3], #1
 80091b6:	e7f9      	b.n	80091ac <memset+0x4>

080091b8 <cleanup_glue>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	460c      	mov	r4, r1
 80091bc:	6809      	ldr	r1, [r1, #0]
 80091be:	4605      	mov	r5, r0
 80091c0:	b109      	cbz	r1, 80091c6 <cleanup_glue+0xe>
 80091c2:	f7ff fff9 	bl	80091b8 <cleanup_glue>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ce:	f000 b869 	b.w	80092a4 <_free_r>
	...

080091d4 <_reclaim_reent>:
 80091d4:	4b2c      	ldr	r3, [pc, #176]	; (8009288 <_reclaim_reent+0xb4>)
 80091d6:	b570      	push	{r4, r5, r6, lr}
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4604      	mov	r4, r0
 80091dc:	4283      	cmp	r3, r0
 80091de:	d051      	beq.n	8009284 <_reclaim_reent+0xb0>
 80091e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091e2:	b143      	cbz	r3, 80091f6 <_reclaim_reent+0x22>
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d14a      	bne.n	8009280 <_reclaim_reent+0xac>
 80091ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ec:	6819      	ldr	r1, [r3, #0]
 80091ee:	b111      	cbz	r1, 80091f6 <_reclaim_reent+0x22>
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 f857 	bl	80092a4 <_free_r>
 80091f6:	6961      	ldr	r1, [r4, #20]
 80091f8:	b111      	cbz	r1, 8009200 <_reclaim_reent+0x2c>
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 f852 	bl	80092a4 <_free_r>
 8009200:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009202:	b111      	cbz	r1, 800920a <_reclaim_reent+0x36>
 8009204:	4620      	mov	r0, r4
 8009206:	f000 f84d 	bl	80092a4 <_free_r>
 800920a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800920c:	b111      	cbz	r1, 8009214 <_reclaim_reent+0x40>
 800920e:	4620      	mov	r0, r4
 8009210:	f000 f848 	bl	80092a4 <_free_r>
 8009214:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009216:	b111      	cbz	r1, 800921e <_reclaim_reent+0x4a>
 8009218:	4620      	mov	r0, r4
 800921a:	f000 f843 	bl	80092a4 <_free_r>
 800921e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009220:	b111      	cbz	r1, 8009228 <_reclaim_reent+0x54>
 8009222:	4620      	mov	r0, r4
 8009224:	f000 f83e 	bl	80092a4 <_free_r>
 8009228:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800922a:	b111      	cbz	r1, 8009232 <_reclaim_reent+0x5e>
 800922c:	4620      	mov	r0, r4
 800922e:	f000 f839 	bl	80092a4 <_free_r>
 8009232:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009234:	b111      	cbz	r1, 800923c <_reclaim_reent+0x68>
 8009236:	4620      	mov	r0, r4
 8009238:	f000 f834 	bl	80092a4 <_free_r>
 800923c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923e:	b111      	cbz	r1, 8009246 <_reclaim_reent+0x72>
 8009240:	4620      	mov	r0, r4
 8009242:	f000 f82f 	bl	80092a4 <_free_r>
 8009246:	69a3      	ldr	r3, [r4, #24]
 8009248:	b1e3      	cbz	r3, 8009284 <_reclaim_reent+0xb0>
 800924a:	4620      	mov	r0, r4
 800924c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800924e:	4798      	blx	r3
 8009250:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009252:	b1b9      	cbz	r1, 8009284 <_reclaim_reent+0xb0>
 8009254:	4620      	mov	r0, r4
 8009256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800925a:	f7ff bfad 	b.w	80091b8 <cleanup_glue>
 800925e:	5949      	ldr	r1, [r1, r5]
 8009260:	b941      	cbnz	r1, 8009274 <_reclaim_reent+0xa0>
 8009262:	3504      	adds	r5, #4
 8009264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009266:	2d80      	cmp	r5, #128	; 0x80
 8009268:	68d9      	ldr	r1, [r3, #12]
 800926a:	d1f8      	bne.n	800925e <_reclaim_reent+0x8a>
 800926c:	4620      	mov	r0, r4
 800926e:	f000 f819 	bl	80092a4 <_free_r>
 8009272:	e7ba      	b.n	80091ea <_reclaim_reent+0x16>
 8009274:	680e      	ldr	r6, [r1, #0]
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f814 	bl	80092a4 <_free_r>
 800927c:	4631      	mov	r1, r6
 800927e:	e7ef      	b.n	8009260 <_reclaim_reent+0x8c>
 8009280:	2500      	movs	r5, #0
 8009282:	e7ef      	b.n	8009264 <_reclaim_reent+0x90>
 8009284:	bd70      	pop	{r4, r5, r6, pc}
 8009286:	bf00      	nop
 8009288:	200000c8 	.word	0x200000c8

0800928c <__malloc_lock>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__malloc_lock+0x8>)
 800928e:	f7ff bf7b 	b.w	8009188 <__retarget_lock_acquire_recursive>
 8009292:	bf00      	nop
 8009294:	200030c0 	.word	0x200030c0

08009298 <__malloc_unlock>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__malloc_unlock+0x8>)
 800929a:	f7ff bf76 	b.w	800918a <__retarget_lock_release_recursive>
 800929e:	bf00      	nop
 80092a0:	200030c0 	.word	0x200030c0

080092a4 <_free_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4605      	mov	r5, r0
 80092a8:	2900      	cmp	r1, #0
 80092aa:	d043      	beq.n	8009334 <_free_r+0x90>
 80092ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b0:	1f0c      	subs	r4, r1, #4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	bfb8      	it	lt
 80092b6:	18e4      	addlt	r4, r4, r3
 80092b8:	f7ff ffe8 	bl	800928c <__malloc_lock>
 80092bc:	4a1e      	ldr	r2, [pc, #120]	; (8009338 <_free_r+0x94>)
 80092be:	6813      	ldr	r3, [r2, #0]
 80092c0:	4610      	mov	r0, r2
 80092c2:	b933      	cbnz	r3, 80092d2 <_free_r+0x2e>
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	6014      	str	r4, [r2, #0]
 80092c8:	4628      	mov	r0, r5
 80092ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ce:	f7ff bfe3 	b.w	8009298 <__malloc_unlock>
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	d90a      	bls.n	80092ec <_free_r+0x48>
 80092d6:	6821      	ldr	r1, [r4, #0]
 80092d8:	1862      	adds	r2, r4, r1
 80092da:	4293      	cmp	r3, r2
 80092dc:	bf01      	itttt	eq
 80092de:	681a      	ldreq	r2, [r3, #0]
 80092e0:	685b      	ldreq	r3, [r3, #4]
 80092e2:	1852      	addeq	r2, r2, r1
 80092e4:	6022      	streq	r2, [r4, #0]
 80092e6:	6063      	str	r3, [r4, #4]
 80092e8:	6004      	str	r4, [r0, #0]
 80092ea:	e7ed      	b.n	80092c8 <_free_r+0x24>
 80092ec:	461a      	mov	r2, r3
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	b10b      	cbz	r3, 80092f6 <_free_r+0x52>
 80092f2:	42a3      	cmp	r3, r4
 80092f4:	d9fa      	bls.n	80092ec <_free_r+0x48>
 80092f6:	6811      	ldr	r1, [r2, #0]
 80092f8:	1850      	adds	r0, r2, r1
 80092fa:	42a0      	cmp	r0, r4
 80092fc:	d10b      	bne.n	8009316 <_free_r+0x72>
 80092fe:	6820      	ldr	r0, [r4, #0]
 8009300:	4401      	add	r1, r0
 8009302:	1850      	adds	r0, r2, r1
 8009304:	4283      	cmp	r3, r0
 8009306:	6011      	str	r1, [r2, #0]
 8009308:	d1de      	bne.n	80092c8 <_free_r+0x24>
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	4401      	add	r1, r0
 8009310:	6011      	str	r1, [r2, #0]
 8009312:	6053      	str	r3, [r2, #4]
 8009314:	e7d8      	b.n	80092c8 <_free_r+0x24>
 8009316:	d902      	bls.n	800931e <_free_r+0x7a>
 8009318:	230c      	movs	r3, #12
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	e7d4      	b.n	80092c8 <_free_r+0x24>
 800931e:	6820      	ldr	r0, [r4, #0]
 8009320:	1821      	adds	r1, r4, r0
 8009322:	428b      	cmp	r3, r1
 8009324:	bf01      	itttt	eq
 8009326:	6819      	ldreq	r1, [r3, #0]
 8009328:	685b      	ldreq	r3, [r3, #4]
 800932a:	1809      	addeq	r1, r1, r0
 800932c:	6021      	streq	r1, [r4, #0]
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	6054      	str	r4, [r2, #4]
 8009332:	e7c9      	b.n	80092c8 <_free_r+0x24>
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	20002314 	.word	0x20002314

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	bf00      	nop
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	bf00      	nop
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
